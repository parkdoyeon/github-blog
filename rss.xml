<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[DEVLOG]]></title><description><![CDATA[things to search agoain]]></description><link>https://parkdoyeon.github.io/</link><image><url>https://parkdoyeon.github.io//logos/logo-48.png</url><title>DEVLOG</title><link>https://parkdoyeon.github.io/</link></image><generator>GatsbyJS Advanced Starter</generator><lastBuildDate>Wed, 30 Dec 2020 13:31:31 GMT</lastBuildDate><atom:link href="https://parkdoyeon.github.io//rss.xml" rel="self" type="application/rss+xml"/><copyright><![CDATA[Copyright © 2020. All rights reserved.]]></copyright><item><title><![CDATA[쿠버네티스 자주 사용하는 명령어 정리]]></title><description><![CDATA[클러스터 세팅, 네임스페이스 설정하기 클러스터 세팅하기 네임스페이스 설정하기 접근하기 포트 포워딩 통해서 서비스 로컬 포트로 끌어오기 리소스 확인하기]]></description><link>https://parkdoyeon.github.io//쿠버네티스-자주-사용하는-명령어-정리</link><guid isPermaLink="false">https://parkdoyeon.github.io//쿠버네티스-자주-사용하는-명령어-정리</guid><category><![CDATA[kubernetes]]></category><pubDate>Thu, 12 Mar 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;클러스터-세팅-네임스페이스-설정하기&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%84%B8%ED%8C%85-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;클러스터 세팅 네임스페이스 설정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클러스터 세팅, 네임스페이스 설정하기&lt;/h3&gt;
&lt;p&gt;클러스터 세팅하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ kubectl sc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;네임스페이스 설정하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ kubectl config set-context --current --namespace:[내 네임스페이스]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;접근하기&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;접근하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근하기&lt;/h3&gt;
&lt;p&gt;포트 포워딩 통해서 서비스 로컬 포트로 끌어오기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;kubectl port-forward svc/grafana-service 7000:3000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;리소스-확인하기&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%86%8C%EC%8A%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;리소스 확인하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리소스 확인하기&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;kubectl get configmap -o yaml [configmap 이름]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[피닉스의 채널]]></title><description><![CDATA[채널은 커뮤니케이션 메커니즘이고, 소켓은 이를 수행하는 것(implementation)이다.
적절한 클라이언트만 구현되어있다면, 채널을 통해 채팅방, 운송 트래킹, 센서 모니터링, 브라우저의 자바스크립트 혹은 css…]]></description><link>https://parkdoyeon.github.io//피닉스의-채널</link><guid isPermaLink="false">https://parkdoyeon.github.io//피닉스의-채널</guid><category><![CDATA[elixir]]></category><category><![CDATA[phoenix]]></category><category><![CDATA[channel]]></category><category><![CDATA[socket]]></category><pubDate>Tue, 10 Mar 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;채널은 커뮤니케이션 메커니즘이고, 소켓은 이를 수행하는 것(implementation)이다.
적절한 클라이언트만 구현되어있다면, 채널을 통해 채팅방, 운송 트래킹, 센서 모니터링, 브라우저의 자바스크립트 혹은 css 변경 등이 가능하다.
채널은 일반 HTTP통신 처럼 stateless하지 않은 long-live한 connection을 유지한다. 이 연결들은 BEAM의 경량 프로세스를 통해 동시적으로 처리된다. 피닉스의 체널은 수백만개 구독체(subscriber를 갖고 초당 수십만개의 메세지를 서비스 가능한 latency로 처리한다. 채널의 특징은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bidirectional browser-server communication&lt;/li&gt;
&lt;li&gt;Nested inside conventional HTTP request&lt;/li&gt;
&lt;li&gt;Reliable, performant, cross browser&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;브라우저 서버간의 양방향 커뮤니케이션으로, http 요청에 내장되어 있으며, 브라우저종과 무관하게 높은 퍼포먼스와 신뢰성을 갖고있다.&lt;/p&gt;
&lt;p&gt;채널은 클라이언트의 토픽 단위로 생성된다. MVC의 컨트롤러같은 역할을 하는데, 요청을 받기만 하지 않고 보낼 수도 있다는 점과 단일 request/response 형태를 넘어서서 지속될 수 있다는 차이가 있다. 전송방식은 websocket과 longpoll을 선택할 수 있으며, Endpoint 모듈 내에서 세팅 가능하다.&lt;/p&gt;
&lt;p&gt;피닉스 채널은 PubSub 모듈을 내장하고 있는데, 실제로 코드로직에서 다룰 일은 없다. PubSub 모듈은 BEAM의 네이티브 메세징을 사용하여 메세지를 받고 전달하는 일을 수행한다.&lt;/p&gt;
&lt;p&gt;클라이언트는 피닉스 채널의 &lt;code class=&quot;language-text&quot;&gt;join&lt;/code&gt;을 호출하여 채널에 합류한다. 클라이언트로부터 요청이 일어날 때 피닉스 채널에선 &lt;code class=&quot;language-text&quot;&gt;handle_in&lt;/code&gt;이 호출되고, &lt;code class=&quot;language-text&quot;&gt;handle_in&lt;/code&gt; 내부 로직에서 연결된 모든 클라이언트들에게 수신된 이벤트에 대한 &lt;code class=&quot;language-text&quot;&gt;broadcast&lt;/code&gt;를 할 수 있다. 또한, &lt;code class=&quot;language-text&quot;&gt;broadcast&lt;/code&gt;가 수행되어 클라이언트에 닿기 전에 이 요청을 &lt;code class=&quot;language-text&quot;&gt;intercept할&lt;/code&gt; 수 있다.&lt;/p&gt;
&lt;p&gt;클라이언트부터 서버의 소켓통신을 진행하는 컨트롤러에 요청이 일어나고
서버는 이에대한 html리스폰스를 한다
이 html리스폰스를 통해 클라이언트 브라우저는 자바 스크립트코드로 소켓을 열기위한 리퀘스트를 수행한다.
그러면 서버에 소켓 엔드포인트로 요청이가고, 그 이후부터는 async free-for-all로 양쪽의 이벤트 핸들러에 의한 통신이 자유롭게 이뤄진다.&lt;/p&gt;
&lt;p&gt;Endpoint is the same as endpoint for http request.
All connection is out to tcp socket.&lt;/p&gt;
&lt;p&gt;The sockets is created on that endpoints. These endpoints are place to put all of the channels. You can also do some authentication up here to socket level.
채널은 웹소켓 통신에서 http통신의 컨트롤러같은 역할이라고 이해하면 된다.&lt;/p&gt;
&lt;p&gt; And channels handle the messages back and forth.&lt;/p&gt;
&lt;p&gt; 참고자료&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexdocs.pm/phoenix/channels.html&quot;&gt;피닉스 공식문서&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Elixir와 함수형 프로그래밍]]></title><description><![CDATA[OOP has methods, FP has functions 객체 지향적인 프로그래밍은 클래스 인스턴스 메소드를 사용하여 상태변경을 하게되는데, 몇가지 단점이 있다. 상태와 메소드간의 강한결합(coupling…]]></description><link>https://parkdoyeon.github.io//elixir와-함수형-프로그래밍</link><guid isPermaLink="false">https://parkdoyeon.github.io//elixir와-함수형-프로그래밍</guid><category><![CDATA[elixir]]></category><category><![CDATA[functional]]></category><pubDate>Sun, 02 Feb 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;oop-has-methods-fp-has-functions&quot;&gt;&lt;a href=&quot;#oop-has-methods-fp-has-functions&quot; aria-label=&quot;oop has methods fp has functions permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OOP has methods, FP has functions&lt;/h1&gt;
&lt;p&gt;객체 지향적인 프로그래밍은 클래스 인스턴스 메소드를 사용하여 상태변경을 하게되는데, 몇가지 단점이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;상태와 메소드간의 강한결합(coupling)이 발생한다. 실제로는 객체지향적인 메소드 사용보다 서브클래싱을 하여 메소드를 공유하는 경우가 더 많다.&lt;/li&gt;
&lt;li&gt;역할에 대한 혼란을 불러일으킨다. 메소드의 다른 역할이 필요해질 때 클래스 확장이나 서브클래싱을 사용하는데, 이 또한 강항 결합을 야기한다.&lt;/li&gt;
&lt;li&gt;동시성 환경에서 오브젝트의 상태값을 예기치 못하게 변경할 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;functions-and-state&quot;&gt;&lt;a href=&quot;#functions-and-state&quot; aria-label=&quot;functions and state permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Functions and State&lt;/h1&gt;
&lt;p&gt;함수형 프로그래밍은 본래의 상태값을 절대 변경하지 않는다. 함수형 프로그래밍에서 상태는 변경되지 않으며, 그저 새로운 상태를 만들 뿐이다. 때문에 함수는 pure하다. 즉, 쉽게 조합되거나 재사용될 수 있다.&lt;/p&gt;
&lt;p&gt;엘릭서의 주된 도구는 함수의 조합(파이프 오퍼레이터의 사용 등의...)이나 패턴매칭(다른 파라미터를 갖는 같은 이름의 여러의 함수를 작성하는 것)이다. 파이프 오퍼레이터와 패턴매칭을 통해 자연스럽게 연산을 조합((composing)하기 때문에, 조건문을 사용하지 않는 방향에서 코드작성이 가능하다. 조건문은 많이 쓰게되면 코드작성이 어렵고 가독성이 떨어진다는 단점이 있는데, 함수형 프로그래밍은 이를 지양하므로써 좋은 설계가 가능하다.
예켠데, 아래와 같이 조건문을 사용하지 않고도 함수 파라미터가 같은 두개의 값을 인자로 취했는지 아닌지 판단할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@doc “&amp;quot;&amp;quot;
a function that takes two parameters.
It should return `true` if the parameters are the same, `false` others.
You aren&amp;#39;t allowed to use any conditional logic, so you&amp;#39;ll have to rely on pattern matching.
“&amp;quot;&amp;quot;

def equal(a, a), do: true
def equal(_, _), do: false&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Mac OS에서 asdf을 통한 언어 버전관리 + elixir 설치하기]]></title><description><![CDATA[asdf는 개발환경에서 언어 사용 버전을 관리할 수 있도록 하는 오픈소스이다. 솔루션마다 적용되는 언어가 다를 경우 개발환경에서 커맨드 라인을 통해 손쉽게 현재 사용되는 언어의 버전 포인터를 바꿔줄 수 있다. 설치나 사용방법이 간단하고, asdf…]]></description><link>https://parkdoyeon.github.io//mac-os에서-asdf을-통한-언어-버전관리-elixir-설치하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//mac-os에서-asdf을-통한-언어-버전관리-elixir-설치하기</guid><category><![CDATA[linux]]></category><category><![CDATA[asdf]]></category><pubDate>Fri, 31 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;asdf는 개발환경에서 언어 사용 버전을 관리할 수 있도록 하는 오픈소스이다. 솔루션마다 적용되는 언어가 다를 경우 개발환경에서 커맨드 라인을 통해 손쉽게 현재 사용되는 언어의 버전 포인터를 바꿔줄 수 있다. 설치나 사용방법이 간단하고, &lt;a href=&quot;https://asdf-vm.com/#/core-manage-asdf-vm&quot;&gt;asdf 공식문서&lt;/a&gt;에도 설명이 잘 나와있지만 할때마다 elixir와 erlang 세팅을 할때 한번씩 빼먹는게 있어서 순서대로 정리해놓기로 했다. 내가 사용하는 환경은 Mac OS Catalina 이상에 패키지 매니저로 homebrew가 설치되어있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;asdf설치하기 (Mac OS 중심으로)
Homebrew를 통해 asdf을 설치한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; asdf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mac OS Catalina 버전에서 다음과 같이 쉘에 입력한다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&apos;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;. &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.asdf/asdf.sh&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/.zprofile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;미만 버전에서는 아래를 입력하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&apos;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;. &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.asdf/asdf.sh&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/.bash_profile
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&apos;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;. &lt;span class=&quot;token environment constant&quot;&gt;$HOME&lt;/span&gt;/.asdf/completions/asdf.bash&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/.bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;플러그인 추가하기
각 버전을 관리할 수 있도록 플러그인을 추가한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ asdf plugin-add erlang
$ asdf plugin-add elixir&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;erlang 설치하기
이제 언어를 설치하면 되는데, elixir는 erlang VM환경에서 동작하므로 &lt;a href=&quot;https://github.com/asdf-vm/asdf-erlang&quot;&gt;erlang&lt;/a&gt;이 설치되어 있어야 한다. 그리고 erlang을 설치를 위해서는 build tool을 설치해야 한다. Mac OS의 경우 이미 있을 확률이 높다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; autoconf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;확인이 되었다면 이제 erlang OTP를 다운로드하자. 나는 현재 최신버전인 22.2를 받았다. 다운로드가 완료되면 다운로드 받은 erlang언어 버전중에 사용하고싶은 버전을 global하게 지정해주면 된다. local로 지정하면 로그인한 시스템 유저만 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ asdf &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; erlang &lt;span class=&quot;token number&quot;&gt;22.2&lt;/span&gt;
$ asdf global erlang &lt;span class=&quot;token number&quot;&gt;22.2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;elixir 설치하기
erlang이 잘 설치되었다면 이제 &lt;a href=&quot;https://github.com/asdf-vm/asdf-elixir&quot;&gt;엘릭서&lt;/a&gt; 설치를 하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ asdf &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; elixir &lt;span class=&quot;token number&quot;&gt;1.10&lt;/span&gt;
$ asdf global elixir &lt;span class=&quot;token number&quot;&gt;1.10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치가 완료되면 아래와 같은 명령어를 통해 리스폰스가 잘 나오는지 확인해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ elixir -v
$ iex &lt;span class=&quot;token comment&quot;&gt;# elixir의 인터렉티브 쉘&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;asdf 사용 현황 보기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ asdf current
elixir         &lt;span class=&quot;token number&quot;&gt;1.10&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set by /Users/doyeon/.tool-versions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
erlang         &lt;span class=&quot;token number&quot;&gt;22.2&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set by /Users/doyeon/.tool-versions&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 6 - 문자열, 제어흐름]]></title><description><![CDATA[문자열 Sigils ( symbols with magical power ) 물결로 시작하는 접두어를 sigil로 부른다 ~C A character list with no escaping or interpolation
~c A character list…]]></description><link>https://parkdoyeon.github.io//programming-elixir-6-문자열-제어흐름</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-6-문자열-제어흐름</guid><category><![CDATA[elixir]]></category><category><![CDATA[string]]></category><category><![CDATA[control]]></category><pubDate>Wed, 29 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;문자열&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4&quot; aria-label=&quot;문자열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열&lt;/h3&gt;
&lt;h4 id=&quot;sigils--symbols-with-magical-power-&quot;&gt;&lt;a href=&quot;#sigils--symbols-with-magical-power-&quot; aria-label=&quot;sigils  symbols with magical power  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sigils ( symbols with magical power )&lt;/h4&gt;
&lt;p&gt;물결로 시작하는 접두어를 sigil로 부른다&lt;/p&gt;
&lt;p&gt;~C A character list with no escaping or interpolation
~c A character list, escaped and interpolated just like a single-quoted string
~D A Date in the format yyyy-mm-dd
~N A naive (raw) DateTime in the format yyyy-mm-dd hh:mm:ss[.ddd]
~R A regular expression with no escaping or interpolation
~r A regular expression, escaped and interpolated
~S A string with no escaping or interpolation
~s A string, escaped and interpolated just like a double-quoted string
~T A Time in the format hh:mm:ss[.dddd]
~W A list of whitespace-delimited words, with no escaping or interpolation ~w A list of whitespace-delimited words, with escaping and interpolation&lt;/p&gt;
&lt;p&gt;sigil안에서 구분자(delimiter, (, [, {, &amp;#x3C;)는 닫히지 않으면 이스케이프가 필요 없다.&lt;/p&gt;
&lt;h4 id=&quot;single-quotations&quot;&gt;&lt;a href=&quot;#single-quotations&quot; aria-label=&quot;single quotations permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single quotations&lt;/h4&gt;
&lt;p&gt;엘릭서에서 작은 따옴표 안에 문자는 캐릭터 리스트로 판단한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; ‘cat’
‘cat&amp;#39;
iex&amp;gt; [67, 65, 84]
‘CAT&amp;#39;
iex&amp;gt; [67, 65, 84, 101]
[67, 65, 84, 101]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; str = ‘wombat&amp;#39;
‘wombat&amp;#39;
iex&amp;gt; :io.format &amp;quot;~w~n&amp;quot;, [ str ] [119,111,109,98,97,116]
:ok
iex&amp;gt; List.to_tuple str
{119, 111, 109, 98, 97, 116}
iex&amp;gt; str ++ [0]
[119, 111, 109, 98, 97, 116, 0]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;~n은 새줄 바꾸기를 의미한다.&lt;/p&gt;
&lt;p&gt;~w은 언랭 언어로 스트링을 표기하는 것을 강제하는 것으로, 언랭 내에서 해당 표현이 불가능하면 그냥 반환된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex(12)&amp;gt; &amp;#39;∂x/∂y&amp;#39;
[8706, 120, 47, 8706, 121]
iex(13)&amp;gt; ~w&amp;#39;∂x/∂y&amp;#39; 
[&amp;quot;∂x/∂y”]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;binaries&quot;&gt;&lt;a href=&quot;#binaries&quot; aria-label=&quot;binaries permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binaries&lt;/h4&gt;
&lt;p&gt;바이너리는 &amp;#x3C;&amp;#x3C;&gt;&gt;안에 담긴 0부터 255까지의 연속된 숫자 리스트이다.
바이너리 안에 integer, float값을 담을 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;double-quoted-strings-are-binaries&quot;&gt;&lt;a href=&quot;#double-quoted-strings-are-binaries&quot; aria-label=&quot;double quoted strings are binaries permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Double-Quoted Strings Are Binaries&lt;/h4&gt;
&lt;p&gt;single quotation으로 감싼 문자열은 리스트라면,
double quotation으로 감싸진 string은 utf-8인코딩된 일련의 바이트 데이터다.
이렇게 정의하면 합리적인데, 다음과 같은 이유에서이다.&lt;/p&gt;
&lt;p&gt;첫째, 반드시 글자별로 다른 메모리값을 가질 수 있어 메모리 사용이 합리적이다.
둘째, 리스트를 다루는 방식으로 문자열을 조작할 필요가 없다. 접근 방식이 편리함.&lt;/p&gt;
&lt;p&gt;문자열 데이터를 list 모듈에서 head-tail 구조로 분리할 수도 있는데.
이 경우 아래와 같이 바이너리 바이너리데이터 형식을 빌려서 분리할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule Utf8 do
  def each(str, func) when is_binary(str), do: _each(str, func(

  defp _each(&amp;lt;&amp;lt; head :: utf8, tail :: binary &amp;gt;&amp;gt;, func) do
    func.(head)
    _each(tail, func)
  end
  
  defp _each(&amp;lt;&amp;lt;&amp;gt;&amp;gt;, _func), do []
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;제어흐름&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EC%96%B4%ED%9D%90%EB%A6%84&quot; aria-label=&quot;제어흐름 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제어흐름&lt;/h3&gt;
&lt;p&gt;제어문을 사용하는 것보다 함수로 처리하는 것을 더 권장.
코드가 더 간결하고 핵심적일 수 있기 때문.&lt;/p&gt;
&lt;p&gt;Cond vs Case
cond는 여러 조건 체크가 필요한 경우 사용, case의 경우 패턴 매칭되는 요소를 찾을 때 사용&lt;/p&gt;
&lt;p&gt;Exception
사용자 정의 예외 클래스의 경우 반드시 message를 구현해야 한다.
예외가 절대 발생하면 안되는 경우 별도로 예외처리를 별도로 하지 않지만,
그렇지 않다면 함수 끝에 느낌표를 넣으면 예외가 raise 되며, 유의미한 예외일 것이라는 관습적인 의미를 갖는다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 5 - 콜렉션 처리]]></title><description><![CDATA[Enum Enum은 엘릭서의 모든 콜렉션 타입을 다루는 workhorse이다.
그러나 데이터 변환작업시 메모리에 중간 결과물을 포함한 모든 콜렉션 데이터를 올려놓기 때문에 lazy하게 동작하도록 하려면 Stream을 사용해야한다.
Stream…]]></description><link>https://parkdoyeon.github.io//programming-elixir-5-콜렉션-처리</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-5-콜렉션-처리</guid><category><![CDATA[elixir]]></category><category><![CDATA[enum]]></category><category><![CDATA[collection]]></category><pubDate>Tue, 28 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;enum&quot;&gt;&lt;a href=&quot;#enum&quot; aria-label=&quot;enum permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enum&lt;/h3&gt;
&lt;p&gt;Enum은 엘릭서의 모든 콜렉션 타입을 다루는 workhorse이다.
그러나 데이터 변환작업시 메모리에 중간 결과물을 포함한 모든 콜렉션 데이터를 올려놓기 때문에 lazy하게 동작하도록 하려면 Stream을 사용해야한다.
Stream은 스트림간의 모든 함수와 호환된다. 따라서 Stream은 Composable하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;IO.puts File.open!(“/usr/share/dict/words”)
             |&amp;gt; IO.stream(:line)
             |&amp;gt; Enum.max_by(&amp;amp;String.length/1)

# 위 코드의 shortcut코드
IO.puts File.stream!(“/usr/share/dict/words”)
             |&amp;gt; Enum.max_by(&amp;amp;String.length/1)

# Stream을 사용한 구현은 중간 storage가 없는 대신 두배 이상 느리다는 단점이 있지만,
# 데이터가 도달하면 바로바로 처리된다는 장점이 있다.
# 가령 Enum으로만 구현한 경우 연속된 스트림라인이 늦게 도달했을 때 처리가 훨씬 더 오래걸릴 수 있다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;collectable-protocol&quot;&gt;&lt;a href=&quot;#collectable-protocol&quot; aria-label=&quot;collectable protocol permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collectable Protocol&lt;/h3&gt;
&lt;p&gt;Enumerable Protocol은 타입 안의 요소를 순회하는 것이라면, Collectable은 반대의 개념으로 요소를 더해서 Collection을 빌드한다.
그러나 모든 콜렉션이 collectable한것은 아니다. Range 타입의 경우 요소 추가가 불가능 하며, Enum을 통한 Collectable 타입의 전환을 통해서 요소 추가가 가능하다. 이때, 이미 데이터가 있는 리스트와 병합되는 경우 range가 리스트 tail에 붙는다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; Enum.into 1..5, [100, 101]
[100, 101, 1, 2, 3, 4, 5]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;comprehension-works-on-bits-too&quot;&gt;&lt;a href=&quot;#comprehension-works-on-bits-too&quot; aria-label=&quot;comprehension works on bits too permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Comprehension Works on Bits, Too&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; for &amp;lt;&amp;lt; &amp;lt;&amp;lt; b1::size(2), b2::size(3), b3::size(3) &amp;gt;&amp;gt; &amp;lt;- “hello” &amp;gt;&amp;gt; , do: “0#{b1}#{b2}#{b3}”
[&amp;quot;0150&amp;quot;, &amp;quot;0145&amp;quot;, &amp;quot;0154&amp;quot;, &amp;quot;0154&amp;quot;, &amp;quot;0157”]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서 &amp;#x3C;&amp;#x3C;&gt;&gt;은 바이너리를 가리킨다&lt;/p&gt;
&lt;h3 id=&quot;moving-past-divinity&quot;&gt;&lt;a href=&quot;#moving-past-divinity&quot; aria-label=&quot;moving past divinity permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Moving Past Divinity&lt;/h3&gt;
&lt;p&gt;엘릭서를 효율적으로 학습하는 과정의 일부는 재귀와 순회를 적재적소에 사용하는 것을 고민하는 것이다.
가능하면 순회를 사용할 것을 권장한다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 4 - 타입과 모듈]]></title><description><![CDATA[리스트와 재귀 Heads and Tails 엘릭서는 join operator인 파이프 연산자로 머리와 나머지(tail…]]></description><link>https://parkdoyeon.github.io//programming-elixir-4-타입과-모듈</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-4-타입과-모듈</guid><category><![CDATA[elixir]]></category><category><![CDATA[type]]></category><category><![CDATA[module]]></category><pubDate>Mon, 27 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;리스트와-재귀&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%9E%AC%EA%B7%80&quot; aria-label=&quot;리스트와 재귀 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리스트와 재귀&lt;/h3&gt;
&lt;h4 id=&quot;heads-and-tails&quot;&gt;&lt;a href=&quot;#heads-and-tails&quot; aria-label=&quot;heads and tails permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Heads and Tails&lt;/h4&gt;
&lt;p&gt;엘릭서는 join operator인 파이프 연산자로 머리와 나머지(tail)를 나눌 수 있다.
파이프 연산자와 재귀를 통해 길이 함수를 간단하게 구현할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule MyList do
  def len([]), do: 0
  def len([_head|tail]), do: 1 + len(tail)
#head는 함수내에서 사용하는 일이 없으므로 컴파일시 경고를 띄우지않게 언더스코어를 넣는다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;문자열과-리스트&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;문자열과 리스트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열과 리스트&lt;/h4&gt;
&lt;p&gt;엘릭서에서 문자열은 우리가 알고있는 일련의 단어들의 조합과 쿼테이션마크이면서,
리스트로 표기된 코드포인트의 값들이다. 후자의 경우 iEX에서 &apos;리스트의 모든 값이 문자열로 표현가능한지&apos; 여부에 따라 구분한다. (heuristically; trial and error)&lt;/p&gt;
&lt;h3 id=&quot;다른-타입들&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%A5%B8-%ED%83%80%EC%9E%85%EB%93%A4&quot; aria-label=&quot;다른 타입들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다른 타입들&lt;/h3&gt;
&lt;h4 id=&quot;structs&quot;&gt;&lt;a href=&quot;#structs&quot; aria-label=&quot;structs permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Structs&lt;/h4&gt;
&lt;p&gt;모듈의 이름이 곧 맵타입이 됨. 딕셔너리 기능이 없으므로 키값이 반드시 아톰이어야 한다.
구조체는 구조체에 특정한 행위를 정의하기위해 모듈 안에 정의한다.
구조체 안에 구조체를 넣는 Nested Structs 구현이 가능하다. Nested Struct의 접근자(Nested Accessor)는 기본적으로 컴파일 타임에 동작하는 매크로인데, 컴파일 타임에 동작하면 static하게 기능할 수 밖에 없으므로 다이나믹하게  &lt;/p&gt;
&lt;h3 id=&quot;엘릭서에서의-타입이란&quot;&gt;&lt;a href=&quot;#%EC%97%98%EB%A6%AD%EC%84%9C%EC%97%90%EC%84%9C%EC%9D%98-%ED%83%80%EC%9E%85%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;엘릭서에서의 타입이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;엘릭서에서의 타입이란?&lt;/h3&gt;
&lt;p&gt;primitive type vs functionality of module
In my mind, there’s a difference between the primitive list and the functional- ity of the List module. The primitive list is an implementation, whereas the List module adds a layer of abstraction.
-&gt; 엘릭서의 원시타입은 구현체이며, 모듈은 원시타입 구현체에 추상레이어를 추가한 것이다.
-&gt; 가령 Map은 원시타입이지만, keyword 타입을 통해 딕셔너리 튜플 리스트 형태로 표현할 수 있다. 이 경우, 리스트에서 제공하는 풍부한 모듈을 함께 사용할 수 있다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 3 - 함수]]></title><description><![CDATA[…]]></description><link>https://parkdoyeon.github.io//programming-elixir-3-함수</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-3-함수</guid><category><![CDATA[elixir]]></category><category><![CDATA[function]]></category><category><![CDATA[functional]]></category><pubDate>Sun, 26 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;엘릭서의-함수&quot;&gt;&lt;a href=&quot;#%EC%97%98%EB%A6%AD%EC%84%9C%EC%9D%98-%ED%95%A8%EC%88%98&quot; aria-label=&quot;엘릭서의 함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;엘릭서의 함수&lt;/h3&gt;
&lt;p&gt;엘릭서는 같은 이름을 가졌더라도 인자로 받는 파라미터 갯수가 다른 함수를 서로 구분한다. 그러나 코드 작성의 관점에서 혼란을 줄 수 있으므로 이런 상황은 피하는 것이 좋다.&lt;/p&gt;
&lt;h3 id=&quot;함수의-매칭&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EC%9D%98-%EB%A7%A4%EC%B9%AD&quot; aria-label=&quot;함수의 매칭 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수의 매칭&lt;/h3&gt;
&lt;p&gt;앨릭서는 같은 이름의 함수를 호출할 때 매칭되는 함수를 ‘순서대로’호출한다. 예컨데 다음과 같이 재귀함수를 구현할 때,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule Factorial do
  def of(0), do: 1
  def of(n), do: n*of(n-1)
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;첫번째에 해당하는 케이스가 아니면 두번째 of함수를 호출한다.
만약 Factorial내부의 함수가 &lt;code class=&quot;language-text&quot;&gt;of(n)&lt;/code&gt;이 먼저 등장하는 순서로 구현이 되어있으면, &lt;code class=&quot;language-text&quot;&gt;f(0)&lt;/code&gt;이 절대 도달불가능하므로 컴파일시 경고를 띄운다.&lt;/p&gt;
&lt;h3 id=&quot;when&quot;&gt;&lt;a href=&quot;#when&quot; aria-label=&quot;when permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;When&lt;/h3&gt;
&lt;p&gt;함수 인자의 validity를 체크할때 사용. 더 명확하게 표현 가능하다.&lt;/p&gt;
&lt;h3 id=&quot;함수의-기본값&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EC%9D%98-%EA%B8%B0%EB%B3%B8%EA%B0%92&quot; aria-label=&quot;함수의 기본값 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수의 기본값&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;\\&lt;/code&gt;를 통해 함수인자의 기본 값 부여가 가능하다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; def func(p1 \\ 1) do: IO inspect p1
#p1이 없으면 파라미터로 1이 넘어감.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러나 같은 이름을 갖는 함수의 경우 혼란을 막기 위해 기본값을 사용하는 함수가 먼저 매칭되지 않도록 하자.&lt;/p&gt;
&lt;h3 id=&quot;defp&quot;&gt;&lt;a href=&quot;#defp&quot; aria-label=&quot;defp permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;defp&lt;/h3&gt;
&lt;p&gt;모듈 내 프라이빗 함수선언은 &lt;code class=&quot;language-text&quot;&gt;defp&lt;/code&gt;로 가능하다.
그러나 모뉼 내 같은 이름을 가지면서 어떤 함수는 프라이빗하고 어떤 함수는 퍼블릭할 수 없다.&lt;/p&gt;
&lt;h3 id=&quot;pipe-operator-을-통한-메소드-체이닝&quot;&gt;&lt;a href=&quot;#pipe-operator-%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%B2%B4%EC%9D%B4%EB%8B%9D&quot; aria-label=&quot;pipe operator 을 통한 메소드 체이닝 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;pipe operator |&gt;을 통한 메소드 체이닝&lt;/h3&gt;
&lt;p&gt;DB커넥션 구문같이 호출 결과를 인자로 받을 때 &lt;code class=&quot;language-text&quot;&gt;|&amp;gt;&lt;/code&gt;를 사용하면 더 깔끔하게 표현가능하다.
&lt;code class=&quot;language-text&quot;&gt;|&amp;gt;&lt;/code&gt;구문은 왼쪽의 구문 결과값을 인자로 오른쪽 메소드를 호출한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;list
|&amp;gt; sales_tax(2018)
|&amp;gt; prepare_filing
#아래와 동일
prepare_filing(sales_tax(list, 2018))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;*주의, 파이프 오퍼레이터 사용시 함수의 경우 반드시 괄호를 사용해야한다.
파이프 오퍼레이터는 &apos;프로그래밍은 데이터를 변환하는 것&apos;이라는 정의에 맞게, 데이터 변환 과정을 명시적으로 표기할 수 있도록 한다.&lt;/p&gt;
&lt;h3 id=&quot;module&quot;&gt;&lt;a href=&quot;#module&quot; aria-label=&quot;module permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Module&lt;/h3&gt;
&lt;p&gt;엘릭서에서 모듈 내에 내장된 모듈은 환상이다. 모든 모듈은 최상위 레벨에 존재하며, 마침표는 하위 모듈을 불러오지 않고 네임스페이스로만 동작한다. 가령 Mix.Tasks.Doctest와 Mix라는 두 모듈은 서로 어떤 연관성도 갖지 않는다.&lt;/p&gt;
&lt;h3 id=&quot;directive&quot;&gt;&lt;a href=&quot;#directive&quot; aria-label=&quot;directive permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Directive&lt;/h3&gt;
&lt;p&gt;import는 불러온 모듈의 이름을 일일히 호명하지 않아도 스코프 안에서 모듈 내 내장된 함수를 사용할 수 있도록 한다.
&lt;code class=&quot;language-text&quot;&gt;alias, defmodule, import, def&lt;/code&gt;와 같은 derective구문은 &lt;code class=&quot;language-text&quot;&gt;end&lt;/code&gt;를 만날때 까지 해당 스코프 내에서 유효하다.
&lt;code class=&quot;language-text&quot;&gt;alias … as&lt;/code&gt;를 통해 import하는 모듈의 표현을 단축할 수 있다. &lt;code class=&quot;language-text&quot;&gt;as&lt;/code&gt;를 생략하면 마지막 네임스페이스만 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;defmodule Example do
  def compile_and_go(source) do
    alias My.Other.Module.Parser, as: Parser
    alias My.Other.Module.Runner, as: Runner
#혹은 
#    alias My.Other.Module.Parser
#    alias My.Other.Module.Runner 로도 쓸 수 있다.
  end
end&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;모듈의-이름&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88%EC%9D%98-%EC%9D%B4%EB%A6%84&quot; aria-label=&quot;모듈의 이름 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈의 이름&lt;/h3&gt;
&lt;p&gt;내부적으로 모듈의 이름은 전부 아톰타입이다. 대문자로 시작하는 모든 이름을 지으면 엘릭서는 자동적으로 Elixir라는 접두어를 붙인다. 때문에 모든 함수는 아톰+점(.)+함수명형태의 아톰이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; is_atom IO
True
iex&amp;gt; to_string IO
“Elixir.IO&amp;quot;
iex&amp;gt; :”Elixir.IO” === IO
true
iex&amp;gt; :”Elixir.IO”.puts 123
123
:ok&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;erlang과-elixir&quot;&gt;&lt;a href=&quot;#erlang%EA%B3%BC-elixir&quot; aria-label=&quot;erlang과 elixir permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;erlang과 elixir&lt;/h3&gt;
&lt;p&gt;언랭 컨벤션은 엘릭서와 다르므로, 언랭 함수 호출시에는 언랭 규칙에 따라 호출하면 된다.
엘릭서와 달리 언랭은 아톰타입이 소문자로 시작하고 변수가 대문자로 시작한다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 2 - 자료형과 오퍼레이터]]></title><description><![CDATA[Interger 언더스코어(_)를 통해 콤마를 대체해서 1000단위를 구분할 수 있다. (편의상 표기할때 사용, 컴파일시 무시됨) 숫자 앞에 0x, 0o, 0b 등을 써서 16진수, 8진수, 2진수 등을 표기할 수 있음  처럼 쓰면 c의 UTF…]]></description><link>https://parkdoyeon.github.io//programming-elixir-2-자료형과-오퍼레이터</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-2-자료형과-오퍼레이터</guid><category><![CDATA[elixir]]></category><pubDate>Thu, 23 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;interger&quot;&gt;&lt;a href=&quot;#interger&quot; aria-label=&quot;interger permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Interger&lt;/h3&gt;
&lt;p&gt;언더스코어(_)를 통해 콤마를 대체해서 1000단위를 구분할 수 있다. (편의상 표기할때 사용, 컴파일시 무시됨)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; 123_456_789
123456789&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;숫자 앞에 0x, 0o, 0b 등을 써서 16진수, 8진수, 2진수 등을 표기할 수 있음&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; 0x41
65&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;?c&lt;/code&gt; 처럼 쓰면 c의 UTF 문자열 코드포인트를 반환한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; ?≠ 8800
8800&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;atom&quot;&gt;&lt;a href=&quot;#atom&quot; aria-label=&quot;atom permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Atom&lt;/h3&gt;
&lt;p&gt;엘릭서에서 등장하는 값 자료형 중 하나.
값이 곧 이름인 자료형으로, 콜론을 앞에 붙여서 표현하거나, 대문자로 시작하는 단어로 표현한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; Dictionary
Dictionary
iex&amp;gt; is_atom(Dictionary)
True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;따라서 같은 이름을 갖는 아톰타임은 어떤 프로그램끼리 만나도 동일한 값으로 취급한다. ex) 내장함수에서 사용하는 :ok&lt;/p&gt;
&lt;h3 id=&quot;boolean&quot;&gt;&lt;a href=&quot;#boolean&quot; aria-label=&quot;boolean permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Boolean&lt;/h3&gt;
&lt;p&gt;엘릭서에서 nil은 falsy한 값으로 취급한다&lt;/p&gt;
&lt;h3 id=&quot;tuple&quot;&gt;&lt;a href=&quot;#tuple&quot; aria-label=&quot;tuple permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tuple&lt;/h3&gt;
&lt;p&gt;보통 2-3개 정도의 작은 데이터들을 다룰때 사용. 플래그 된 값들을 표기할때 많이 쓴다.&lt;/p&gt;
&lt;h3 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List&lt;/h3&gt;
&lt;p&gt;엘릭서의 list는 중심기능으로서,  array가 아닌 linked list이다.
따라서 array와 달리 재귀적으로 사용되며, 암시적으로 전체를 순회하며 사용되는 array와 달리 선언적인 함수형 언어에 더 적합한 자료형이다.
데이터 수정시 변형하지 않고 포인터를 활용한다.
keyword lists: 튜플형 인자를 사용하여 Key-value페어 형식으로도 표현가능하다. 함수의 인자로 받을때는 브라켓과 리스트 꺽쇄도 제거 하고 표현 할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The chances are very good that your current language has arrays. They’re probably one of your go-to data structures. You like being able to say “go get the nth element.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But arrays are a data structure suited more to imperative programming, because you must explicitly iterate over them, using an external index. And they are prone to off-by-one errors.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On the other hand, lists are a recursive data structure, and turn out to be well suited to a functional or declarative style.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s a change of perspective that can be hard to make. Stick at it, because once you’re comfortable with lists, you won’t want to go back.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;To show you some of the power of lists, we need to cover just one more language topic: pattern matching. That’s what the next chapter is about&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; aria-label=&quot;map permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Map&lt;/h3&gt;
&lt;p&gt;리스트와 달리 중복된 키값을 허용하지 않는 자료형. 따라서 value접근하는 방법이 하나다. 서로 다른 자료형을 가진 key값을 허용한다. 예컨데 key값으로 아톰이나 튜플도 가능.
아톰 키값의 경우 map[:key]와 같이 접근하면 키값이 없으면 nil이 반환되지만, dot notation(map.key)의 경우 no matching keys 익셉션이 발생한다.
key값을 0부터 순차적으로 커지는 숫자값으로 지정해 array처럼 구현하기도 할 수 있다. 엘릭서에서 pure array가 있다면 그것보다는 못하겠지만, reasonable한 size의 콜렉션이라면 O(1)의 빅오를 가지며 나쁘지 않은 성능을 보인다고한다.&lt;/p&gt;
&lt;h3 id=&quot;with&quot;&gt;&lt;a href=&quot;#with&quot; aria-label=&quot;with permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;With&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;with … do … end&lt;/code&gt; 형식으로 사용
함수와 같은 구문형식을 갖기 때문에 첫번째 arg는 꼭 &lt;code class=&quot;language-text&quot;&gt;with&lt;/code&gt;옆에 위치시키거나 괄호로 감싸줘야한다.
&lt;code class=&quot;language-text&quot;&gt;with&lt;/code&gt;과 &lt;code class=&quot;language-text&quot;&gt;do&lt;/code&gt; 구문 사이에 로컬스코프 생성
패턴매칭에 실패할때 실패 결과를 다룰 수 있게 해줌
&lt;code class=&quot;language-text&quot;&gt;=&lt;/code&gt;대신 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;-&lt;/code&gt; 사용하므로써 예외 상황 발생시 nil처리
do와 같은 라인에 작성하면 end 쓰지 않고 숏컷으로 작성할 수 있다&lt;/p&gt;
&lt;h3 id=&quot;-operator&quot;&gt;&lt;a href=&quot;#-operator&quot; aria-label=&quot; operator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&amp;#x26; Operator&lt;/h3&gt;
&lt;p&gt;두가지 의미를 갖는다.&lt;/p&gt;
&lt;p&gt;첫째, 함수표현 다음에 나타나는 표현식을 가리키는 숏컷
ex) &lt;code class=&quot;language-text&quot;&gt;fn p1, p2 -&amp;gt; p1+p2&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;&amp;amp;(&amp;amp;1+&amp;amp;2)&lt;/code&gt;와 같음&lt;/p&gt;
&lt;p&gt;둘째, 문자식과 함께 사용되는 연산자를 가리킨다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; s = &amp;amp;”bacon and #{&amp;amp;1}”
#Function&amp;lt;6.99386804/1 in :erl_eval.expr/5&amp;gt;
iex&amp;gt; s.(“custard”)
“bacon and custard&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Programming Elixir 1 - 원리]]></title><description><![CDATA[확장자 convention  바이트코드로 컴파일 되고 실행됨 바이너리 파일로 컴파일 해야할때 사용하는 확장자 프로그램 어플리케이션으로 사용됨  컴파일 없이 쓰는 스크립트 프로그램 소스레벨에서 interpret됨 보통 테스트 코드에 사용 Elixir…]]></description><link>https://parkdoyeon.github.io//programming-elixir-1-원리</link><guid isPermaLink="false">https://parkdoyeon.github.io//programming-elixir-1-원리</guid><category><![CDATA[elixir]]></category><pubDate>Wed, 22 Jan 2020 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;확장자-convention&quot;&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5%EC%9E%90-convention&quot; aria-label=&quot;확장자 convention permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;확장자 convention&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.ex&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;바이트코드로 컴파일 되고 실행됨&lt;/li&gt;
&lt;li&gt;바이너리 파일로 컴파일 해야할때 사용하는 확장자&lt;/li&gt;
&lt;li&gt;프로그램 어플리케이션으로 사용됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;.exs&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴파일 없이 쓰는 스크립트 프로그램&lt;/li&gt;
&lt;li&gt;소스레벨에서 interpret됨&lt;/li&gt;
&lt;li&gt;보통 테스트 코드에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;elixir-asserts-variable-not-assigns&quot;&gt;&lt;a href=&quot;#elixir-asserts-variable-not-assigns&quot; aria-label=&quot;elixir asserts variable not assigns permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elixir asserts variable, not assigns.&lt;/h3&gt;
&lt;p&gt;엘릭서는 변수를 merge 하듯이 사용한다. 하지만 이미 값이 부여된 변수의 경우 그 값을 보관하기때문에(variables bind once per match), 이와 다른 값(value)과 매치하면 매치에러가 발생한다. 다시말해, 엘릭서에서의 ‘=&apos; 수학에서의 수식과 유사한 의미를 갖는다. 프로그래밍을 하면서 제일 먼저 버리게되는 등호에 대한 직관을 다시 되찾아옴. (하지만 왼쪽 항에서 계산연산을 하지는 않음)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; a = 1
1
ies&amp;gt; 1 = a
1
Iex&amp;gt; 2 = a
** (MatchError) no match of right hand side value: 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2와 a는 매치되지 않으므로 매치에러 발생&lt;/p&gt;
&lt;p&gt;엘릭서는 &quot;Fail early”하는 것이 reliable한 코드 작성을 위한 방법이다. 때문에 아래와 같은 패턴이 자주 사용된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{ :ok, file } = File.open(“/etc/passwd”)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;성공하면 file에 객체가 담기겠지만 그렇지 않으면 :error가 리턴되면서 MatchError 익셉션이 발생할 것이다.
패턴매칭, 파이프 오퍼레이터를 사용하면 &lt;/p&gt;
&lt;h3 id=&quot;variables-bind-once-per-match&quot;&gt;&lt;a href=&quot;#variables-bind-once-per-match&quot; aria-label=&quot;variables bind once per match permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;variables bind once per match&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;iex&amp;gt; [a, a] = [1, 1]
[1, 1]
iex&amp;gt; a
1
iex&amp;gt; [b, b] = [1, 2]
** (MatchError) no match of right hand side value: [1, 2]
iex&amp;gt; [a, a] = [2, 2]
# 새로운 매치이기 때문에 에러발생 안함&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Force existing value
기존 값을 고수하고싶다면 캐럿(caret)마크로 표기한다. 기존 값이 아닌 다른 값이 매치되면 Exception이 발생한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Iex&amp;gt; a = 1
1
iex&amp;gt; [^a, 2, 3] = [8, 2, 3]
MatchError &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;immutability&quot;&gt;&lt;a href=&quot;#immutability&quot; aria-label=&quot;immutability permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Immutability&lt;/h3&gt;
&lt;p&gt;일반 언어는 기존 데이터를 통해 새로운 데이터를 생성할때 기존 데이터가 “변할 수도 있기”때문에 복제본을 생성한다.
그러나 엘릭서의 모든 값은 변하지 않는다는 약속이 지켜지므로, 원본 데이터의 단순 참조를 통해 새로운 데이터를 생성할 수도 있다. 무척 효율적.&lt;/p&gt;
&lt;h3 id=&quot;gc&quot;&gt;&lt;a href=&quot;#gc&quot; aria-label=&quot;gc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GC&lt;/h3&gt;
&lt;p&gt;엘릭서는 여러 프로세스에서 실행되기 때문에 각 프로세스별로 힙이 생성되고, 프로세스가 종료되면 바로 힙을 날리기 때문에 gc가 무척 빠르게 돌아간다. 때문에 기존 언어에서 사용되지 않은 오래된 값이 메모리를 잡고 있는 문제를 해소한다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[리눅스 도커 lftp로 파일 배포하기]]></title><description><![CDATA[CI 서버에서 npm 빌드가 완료되면 빌드된 파일을 ftp 통해서 웹서버에 배포하기로했다.
CI서버에서 설치하고 쓸 ftp를 찾다가 lftp의 도커 이미지가 있어서 CI 파이프라인에 추가했다.
lftp는 리눅스에서 많이 사용하는 ftp…]]></description><link>https://parkdoyeon.github.io//리눅스-도커-lftp로-파일-배포하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//리눅스-도커-lftp로-파일-배포하기</guid><category><![CDATA[docker]]></category><category><![CDATA[ci/cd]]></category><category><![CDATA[ftp]]></category><pubDate>Wed, 20 Nov 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CI 서버에서 npm 빌드가 완료되면 빌드된 파일을 ftp 통해서 웹서버에 배포하기로했다.
CI서버에서 설치하고 쓸 ftp를 찾다가 lftp의 도커 이미지가 있어서 CI 파이프라인에 추가했다.
lftp는 리눅스에서 많이 사용하는 ftp 프로그램으로, http를 포함한 다양한 프로토콜을 지원한다. 기본적인 명령어 형식은 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;lftp ftp://[user_id]:[user_password]@[host]:[port] -e &amp;quot;mirror -R -n -v -p -X *.md -X *.db -X *.yml -X @html/ -X *.git/ $CI_PROJECT_DIR/vue/vue-proj/dist /R2/vue/vue-proj-1125;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;명령어에 담긴 flag 의미는 아래와 같다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e: --delete, 동기화 과정중에 없는 파일을 삭제한다&lt;/li&gt;
&lt;li&gt;R: --recursive, 본래 mirror는 [목적지] [로컬] 순서로 디렉토리 표기가 되고 로컬에 목적지에 있는 파일을 다운로드 받는 명령어인데, 반대로 목적지에 파일을 전달하고 싶으면 R 플래그를 넣어줘야 한다.&lt;/li&gt;
&lt;li&gt;n: --only-newer, 새롭게 변경된 파일만 다운로드하기&lt;/li&gt;
&lt;li&gt;v: --verbose, 파일 전송 로그를 표기하기&lt;/li&gt;
&lt;li&gt;p: --no-perms, 작업이 완료되고 리눅스에서 원격에 있는 파일 권한을 변경하려하는데 &lt;/li&gt;
&lt;li&gt;X: --exclude-glob, glob 정규식으로 제외파일을 표기한다. 일반 정규식과 달리 asterisk(*)가 와일드카드 의미를 갖는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자세한 내용 및 더 많은 옵션은 &lt;a href=&quot;https://lftp.yar.ru/lftp-man.html&quot;&gt;lftp 공식 문서&lt;/a&gt;를 통해 확인하면 된다.&lt;/p&gt;
&lt;p&gt;해당 stage 스크립트를  &lt;code class=&quot;language-text&quot;&gt;gitlab-ci.yml&lt;/code&gt;에 작성하니 아래와 같아졌다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;deploy_prod_vue_event:
    image: registry.mycompany.com:5001/mwienk/docker-lftp:latest
    stage: deploy
    variables:
        GIT_STRATEGY: none
    script:
        - echo &amp;quot;Deploy to alpha server&amp;quot;
        - lftp ftp://deploy:$FTP_PASSWORD@172.0.0.1:2100 -e &amp;quot;mirror -R -n -v -p -X *.md -X *.db -X *.yml -X @html/ -X *.git/ $CI_PROJECT_DIR/vue/vue-proj/dist /R2/vue/vue-proj-1125;&amp;quot;
    environment:
        name: production
    tags:
        - ci-linux
    when: manual
    only:
    - master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[리눅스 계정잠금 해제]]></title><description><![CDATA[리눅스 계정 잠금 제어는 보통 pam_tally2로 한다. 접속 시도 횟수가 정책상 설정된 횟수를 초과하면 계정 잠금이 일어나는데 이때 다른 계정으로 접근해서 아래 명령어로 잠금 계정을 해제해줘야 한다.]]></description><link>https://parkdoyeon.github.io//리눅스-계정잠금-해제</link><guid isPermaLink="false">https://parkdoyeon.github.io//리눅스-계정잠금-해제</guid><category><![CDATA[linux]]></category><pubDate>Mon, 04 Nov 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스 계정 잠금 제어는 보통 pam_tally2로 한다. 접속 시도 횟수가 정책상 설정된 횟수를 초과하면 계정 잠금이 일어나는데 이때 다른 계정으로 접근해서 아래 명령어로 잠금 계정을 해제해줘야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;pam_tally2 -u [lockeduser] -r&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[npm 빌드위한 docker gitlab CI 세팅 삽질기]]></title><description><![CDATA[vue.js를 프로덕션에 도입하면서 빌드와 배포를 하는 파이프라인 구축이 필요했다. 젠킨스와 깃랩을 함께 사용할수도 있었겠지만, 기존에 설정되어있는 깃랩 CI를 확장해 도커 깃랩 러너를 통해 npm 빌드를 하는 환경구성을 해보기로 했다. How To…]]></description><link>https://parkdoyeon.github.io//npm-빌드위한-docker-gitlab-ci-세팅-삽질기</link><guid isPermaLink="false">https://parkdoyeon.github.io//npm-빌드위한-docker-gitlab-ci-세팅-삽질기</guid><category><![CDATA[javascript]]></category><category><![CDATA[node]]></category><category><![CDATA[npm]]></category><category><![CDATA[docker]]></category><category><![CDATA[gitlab]]></category><category><![CDATA[ci]]></category><category><![CDATA[container]]></category><pubDate>Sun, 27 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;vue.js를 프로덕션에 도입하면서 빌드와 배포를 하는 파이프라인 구축이 필요했다. 젠킨스와 깃랩을 함께 사용할수도 있었겠지만, 기존에 설정되어있는 깃랩 CI를 확장해 도커 깃랩 러너를 통해 npm 빌드를 하는 환경구성을 해보기로 했다.&lt;/p&gt;
&lt;h1 id=&quot;how-to&quot;&gt;&lt;a href=&quot;#how-to&quot; aria-label=&quot;how to permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;How To&lt;/h1&gt;
&lt;p&gt;gitlab runner docker로 설치하고, 설정파일 생성하기&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고 - &lt;a href=&quot;https://docs.gitlab.com/runner/install/&quot;&gt;깃랩 러너 설치 가이드&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;docker pull gitlab/gitlab-runner
docker run --rm \
-v /gitlab-runner/config:/etc/gitlab-runner/config \
-it gitlab/gitlab-runner register&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;register 과정에서 깃랩 프로젝트 내에서 생성된 gitlab runner token값과 코디네이션 url을(ex. &lt;a href=&quot;https://gilab.mycompany.com/ci&quot;&gt;https://gilab.mycompany.com/ci&lt;/a&gt;) 넣어줘야한다. 그러면 볼륨 매핑한 config 디렉토리에 &lt;code class=&quot;language-text&quot;&gt;config.toml&lt;/code&gt;파일이 생성된다.&lt;/p&gt;
&lt;p&gt;설정이 완료되고 러너가 돌아가면 깃랩 페이지에서 내가 생성한 러너가 확인 된다. 이 자체로 러너를 돌리기엔 부족할 확률이 높다. 아래와 같이 상황에 맞춰 내가 원하는 설정을 추가적으로 넣어줘야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;concurrent = 1
check_interval = 0
listen_address = &amp;quot;0.0.0.0:443&amp;quot;

[session_server]
  listen_address = &amp;quot;0.0.0.0:5092&amp;quot;
  session_timeout = 1800

[[runners]]
  name = &amp;quot;gitlab runner linux&amp;quot;
  url = &amp;quot;https://gitlab.mycompany.com/ci&amp;quot;
  token = &amp;quot;***************&amp;quot;
  executor = &amp;quot;docker&amp;quot;
  [runners.custom_build_dir]
  [runners.docker]
    tls_verify = false
    pull_policy = &amp;quot;if-not-present&amp;quot;
    privileged = true
    disable_entrypoint_overwrite = false
    oom_kill_disable = false
    disable_cache = false
    environment = [ &amp;quot;DOCKER_DRIVER=overlay2&amp;quot; ]
    cache_dir = &amp;quot;/data/volume/gitlab-runner/cache&amp;quot;
    volumes = [&amp;quot;/var/run/docker.sock:/var/run/docker.sock&amp;quot;, &amp;quot;/data/volume/gitlab-runner/builds:/builds&amp;quot;]
    shm_size = 0
  [runners.cache]
    [runners.cache.s3]
    [runners.cache.gcs]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;trouble-shooting&quot;&gt;&lt;a href=&quot;#trouble-shooting&quot; aria-label=&quot;trouble shooting permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Trouble Shooting&lt;/h1&gt;
&lt;p&gt;하지만 이 설정파일을 만들기까지 매우 많은 삽질이 있었다.&lt;/p&gt;
&lt;h4 id=&quot;도커-통신이-정상적으로-안되는-경우&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%ED%86%B5%EC%8B%A0%EC%9D%B4-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%95%88%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;도커 통신이 정상적으로 안되는 경우 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 통신이 정상적으로 안되는 경우&lt;/h4&gt;
&lt;p&gt; 나는 docker로 깃랩러너를 돌린 다음에 깃랩 러너 컨테이너와 같은 층위에 다른 도커 이미지(node나 python 이미지와 같은)를 사용해서 빌드를 하고싶었다. 이 때 이미지를 불러와야하는데 계속 볼륨으로 바인딩한 도커 서비스간에 통신이 안돼서 build failure가 발생했다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;빌드 로그&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Skipping Git submodules setup
$ docker info
Client:
Debug Mode: &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
Server:
errors pretty printing info
ERROR: error during connect: Get http://docker:2375/v1.40/info: dial tcp: lookup docker on &lt;span class=&quot;token number&quot;&gt;10.101&lt;/span&gt;.200.3:53: server misbehaving
ERROR: Job failed: &lt;span class=&quot;token builtin class-name&quot;&gt;exit&lt;/span&gt; code &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;혹시 볼륨 바인딩에 문제가 있는건 아닐까? 싶어서 찾아봤더니 깃랩 러너가 돌아가고있는 드라이버를 따로 표기를 해줘야한다는 글이 있어서, 환경변수로 overlay2를 넣어줬더니 정상빌드 됐다. 여기서 볼륨설정을 모든 컨테이너에 적용하고싶다면 위와같이 runner.docker에 환경변수로 넣어주면된다. 프로젝트별로 바인딩 하고싶다면 variable값으로 &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci&lt;/code&gt; 파일에 설정해주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;variables:
    DOCKER_DRIVER: overlay2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;npm-프록시-세팅하기&quot;&gt;&lt;a href=&quot;#npm-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0&quot; aria-label=&quot;npm 프록시 세팅하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;npm 프록시 세팅하기&lt;/h4&gt;
&lt;p&gt;폐쇄된 네트워크이기 때문에 npm 패키지를 설치할때 proxy설정을 해줘야했다. 처음에 도커 이미지에 프록시 세팅을 하려했다. 러너를 통해 생성되는 도커이미지에 프록시를 세팅하려면 아래와 같이 &lt;code class=&quot;language-text&quot;&gt;.gitlab-ci.yml&lt;/code&gt;파일을 수정하면 된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;참고 &lt;a href=&quot;https://docs.docker.com/network/proxy/&quot;&gt;도커 프록시 설정&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yaml&quot;&gt;&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#.gitlab-ci.yml&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;HTTPS_PROXY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;https://registry.mycompany.com/repository/npm-group/&quot;&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;HTTP_PROXY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;http://registry.mycompany.com/repository/npm-group&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;하지만 이렇게 하면 gitlab 코드를 받아올때도 프록시 설정이 적용되어 문제가 된다. no proxy옵션을 지정해주면 되지만, 앞으로 빌드하면서 어떤 url을 호출할지 알 수 없기 때문에 npm만 지정된 프록시로 우회하도록 설정하는게 깔끔하다. npm 자체적인 설정을 통해 가능하므로, ci 파일에 npm 프록시를 설정하는 스크립트를 넣어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm config set registry http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//packages.webzen.com/repository/npm&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;group/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실 이 부분도 삽질을 조금 했다. npm config에 https_proxy라는 값을 세팅해줄 수 있는데, 여기에 세팅되는 프록시 주소는 registry 프록시가 아니라 패키지가 다운로드하는 url들의 프록시를 의미한다. &lt;a href=&quot;https://docs.npmjs.com/misc/config&quot;&gt;공식문서&lt;/a&gt;에 나와있는 설명은 이렇다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https-proxy§
Default: null
Type: url
A proxy to use for outgoing https requests. If the HTTPS&lt;em&gt;PROXY or https&lt;/em&gt;proxy or HTTP&lt;em&gt;PROXY or http&lt;/em&gt;proxy environment variables are set, proxy settings will be honored by the underlying request library.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;완성된 .gitlab-ci.yml파일은 이렇다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;CHROMEDRIVER_FILEPATH&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/builds/chromedriver/chromedriver_linux64.zip&quot;&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm config set registry http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//registry.mycompany.com/repository/npm&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;group/

&lt;span class=&quot;token key atrule&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; build

&lt;span class=&quot;token key atrule&quot;&gt;test_build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; build
    &lt;span class=&quot;token key atrule&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; echo &quot;build vue js&quot;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; cd $CI_PROJECT_DIR/vue/somepage
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm i
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; npm run build
    &lt;span class=&quot;token key atrule&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; test
    &lt;span class=&quot;token key atrule&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; linux&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;runner
    &lt;span class=&quot;token key atrule&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; vue&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;branch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;공식문서/참고자료
&lt;a href=&quot;https://docs.gitlab.com/runner/executors/docker.html&quot;&gt;도커 executor 가이드&lt;/a&gt;
&lt;a href=&quot;https://docs.gitlab.com/ee/ci/docker/using_docker_images.html&quot;&gt;도커 이미지와 함께 빌드하기&lt;/a&gt;
&lt;a href=&quot;https://docs.gitlab.com/ee/ci/docker/using_docker_build.html&quot;&gt;도커 빌드하기&lt;/a&gt;
&lt;a href=&quot;https://docs.gitlab.com/runner/configuration/proxy.html&quot;&gt;깃랩 러너 프록시 가이드&lt;/a&gt;
&lt;a href=&quot;https://gitlab.com/gitlab-org/gitlab-ci-runner/issues/10&quot;&gt;coordinator url이란?&lt;/a&gt;
&lt;a href=&quot;https://gitlab.com/johandurancerdas/gitlab-cicd-tutorial&quot;&gt;참고 프로젝트&lt;/a&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=8h6IK9VkCQQ&quot;&gt;참고 강의&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[window에서 python 버전 구분해서 실행하기]]></title><description><![CDATA[node-sass을 폐쇄된 윈도우 ci에서 빌드하기위해 어쩔수없이 python 2.x버전을 설치했는데, 에러가 발생했다. node-sass를 빌드하는 node-gyp이 파이썬을 실행할 때 커맨드라인에서 를 사용하는데, unix기반 os…]]></description><link>https://parkdoyeon.github.io//window에서-python-버전-구분해서-실행하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//window에서-python-버전-구분해서-실행하기</guid><category><![CDATA[python]]></category><category><![CDATA[python2]]></category><category><![CDATA[python3]]></category><category><![CDATA[path]]></category><pubDate>Thu, 17 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;node-sass을 폐쇄된 윈도우 ci에서 빌드하기위해 어쩔수없이 python 2.x버전을 설치했는데, 에러가 발생했다. node-sass를 빌드하는 node-gyp이 파이썬을 실행할 때 커맨드라인에서 &lt;code class=&quot;language-text&quot;&gt;python2&lt;/code&gt;를 사용하는데, unix기반 os에서는 파이썬 버전에 따라 python2, python3와 같은 변수가 실행명령어로 바인딩이 되지만 윈도우는 그렇지 않기 때문이다(깃헙에 윈도우 환경을 고려해달라는 이슈가 올라와있다). 할수없이 커맨드 라인에서 &lt;code class=&quot;language-text&quot;&gt;python2&lt;/code&gt; 명령어를 인식할 수 있도록 환경변수를 세팅했다.&lt;/p&gt;
&lt;h1 id=&quot;윈도우와-python-환경변수-세팅&quot;&gt;&lt;a href=&quot;#%EC%9C%88%EB%8F%84%EC%9A%B0%EC%99%80-python-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;윈도우와 python 환경변수 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;윈도우와 python 환경변수 세팅&lt;/h1&gt;
&lt;p&gt;파이썬은 설치시 환경변수 세팅 옵션을 체크하면 자동으로 변수를 세팅한다. 윈도우 &lt;code class=&quot;language-text&quot;&gt;제어판 &amp;gt; 시스템 &amp;gt; 고급시스템설정 &amp;gt; 환경변수&lt;/code&gt;에 들어가면 사용자 변수 혹은 시스템 변수에 Path 라는 변수명을 갖고있는 값이 있다. 파이썬 환경변수 세팅이 됐다면 여기에 기존 파이썬 경로들이 나오는데, path의 입력 순서에 따라 첫번째로 작성된 파이썬 경로가 디폴트로 호출된다. 가령 아래와같이 입력이 되어있다면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;C:\Users\doyeon\AppData\Local\Programs\Python\Python38-32\Scripts\
C:\Users\doyeon\AppData\Local\Programs\Python\Python38-32\
C:\Users\doyeon\AppData\Local\Programs\Python\Python37-32\Scripts\
C:\Users\doyeon\AppData\Local\Programs\Python\Python37-32\&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python38-32가 상위에 입력이 되어있으므로 커맨드라인에서 &lt;code class=&quot;language-text&quot;&gt;python&lt;/code&gt;을 호출할 때 python 3.8이 실행된다. &lt;/p&gt;
&lt;h1 id=&quot;py--38로-버전-구분해서-실행하기&quot;&gt;&lt;a href=&quot;#py--38%EB%A1%9C-%EB%B2%84%EC%A0%84-%EA%B5%AC%EB%B6%84%ED%95%B4%EC%84%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0&quot; aria-label=&quot;py  38로 버전 구분해서 실행하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;py -3.8로 버전 구분해서 실행하기&lt;/h1&gt;
&lt;p&gt;unix 체제와 다를뿐이지 윈도우에서도 버전을 구분해서 실행할 수 있는 기본 명령어가 있다.&lt;code class=&quot;language-text&quot;&gt;py -3.7&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;py -3.8&lt;/code&gt;와 같은 형태로 입력하면된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;C:\Users\doyeon&amp;gt;py -3.7
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;python-3x를-메인으로-쓰면서-파이썬-27-세팅하기&quot;&gt;&lt;a href=&quot;#python-3x%EB%A5%BC-%EB%A9%94%EC%9D%B8%EC%9C%BC%EB%A1%9C-%EC%93%B0%EB%A9%B4%EC%84%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC-27-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0&quot; aria-label=&quot;python 3x를 메인으로 쓰면서 파이썬 27 세팅하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;python 3.x를 메인으로 쓰면서 파이썬 2.7 세팅하기&lt;/h1&gt;
&lt;p&gt;하지만 나처럼 python을 3.x버전대로 쓰면서 unix os처럼 python2를 호출하고싶다면, 우선 파이썬2를 설치하고 해당 경로를 환경변수로 추가해야한다. 가령 파이썬이 &lt;code class=&quot;language-text&quot;&gt;c:\Python27&lt;/code&gt;에 설치가 되었다면 해당 경로를 38버전 뒤에 추가해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;C:\Users\doyeon\AppData\Local\Programs\Python\Python38-32\Scripts\
C:\Users\doyeon\AppData\Local\Programs\Python\Python38-32\
c:\Python27\Scripts
c:\Python27\&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 python2를 사용하기 위해서 &lt;code class=&quot;language-text&quot;&gt;c:\Python27\&lt;/code&gt;경로에 있는 &lt;code class=&quot;language-text&quot;&gt;python.exe&lt;/code&gt;파일의 이름을 &lt;code class=&quot;language-text&quot;&gt;python2.exe&lt;/code&gt;로 바꿔준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;C:\Users\doyeon&amp;gt;python2
Python 2.7.16 (v2.7.16:ef4ec6ed12, Mar 25 2019, 21:26:53) [MSC v.1916 32 bit (Intel)] on win32
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[vue cli 3.X 버전에 typscript, webpack 세팅하기]]></title><description><![CDATA[처음에 엄청나게 삽질을 하게되는데 하고나면 또 별거아닌... 것중 하나가 웹팩세팅 아닌가 싶다. 이번에 SPA도입하면서 본격적으로 vue 빌드환경을 세팅해보게 되었는데, vue.js…]]></description><link>https://parkdoyeon.github.io//vue-cli-3-x-버전에-typscript-webpack-세팅하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//vue-cli-3-x-버전에-typscript-webpack-세팅하기</guid><category><![CDATA[javascript]]></category><category><![CDATA[typescript]]></category><category><![CDATA[node]]></category><pubDate>Tue, 15 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;처음에 엄청나게 삽질을 하게되는데 하고나면 또 별거아닌... 것중 하나가 웹팩세팅 아닌가 싶다. 이번에 SPA도입하면서 본격적으로 vue 빌드환경을 세팅해보게 되었는데, vue.js도 그렇지만 프론트엔드 개발환경구성 관련 기술들을 처음 접해봐서 그런지 많이 헤맸다. 해보고나니 헤맨만큼 더 잘 알것같은 느낌이 들어 좋은 경험이었다.&lt;/p&gt;
&lt;h1 id=&quot;vue-cli-설치하기&quot;&gt;&lt;a href=&quot;#vue-cli-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;vue cli 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue cli 설치하기&lt;/h1&gt;
&lt;p&gt;vue cli는 2.X대랑 3.X대가 변화가 큰 편이다. 혹시 구버전이 있으면 프로젝트 생성 명령어부터 다르니 반드시 두 버전을 확인하고 개발해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i -g @vue/cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;vue-cli-프로젝트-생성하기&quot;&gt;&lt;a href=&quot;#vue-cli-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;vue cli 프로젝트 생성하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;vue cli 프로젝트 생성하기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;vue create &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;project-name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;타입스크립트를 추가하고싶으면 프로젝트 생성시 설정단계를 통해 타입스크립트를 추가해도 되고, 생성된 프로젝트에 명령어로 typescript를 추가해도 된다.&lt;/p&gt;
&lt;h1 id=&quot;생성된-vue-프로젝트에-typescript-추가하는-법&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EB%90%9C-vue-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90-typescript-%EC%B6%94%EA%B0%80%ED%95%98%EB%8A%94-%EB%B2%95&quot; aria-label=&quot;생성된 vue 프로젝트에 typescript 추가하는 법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성된 vue 프로젝트에 typescript 추가하는 법&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;vue &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; typescript&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;타입스크립트 추가를 하면 &lt;code class=&quot;language-text&quot;&gt;main.js&lt;/code&gt;가 &lt;code class=&quot;language-text&quot;&gt;main.ts&lt;/code&gt;로 변경되고, 내가 설정한 옵션에 따라 이 경로에 &lt;code class=&quot;language-text&quot;&gt;shims-tsx.d.ts&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;shims-vue.d.ts&lt;/code&gt;파일이 생성된다.&lt;/p&gt;
&lt;h1 id=&quot;webpack-연동하기&quot;&gt;&lt;a href=&quot;#webpack-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0&quot; aria-label=&quot;webpack 연동하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;webpack 연동하기&lt;/h1&gt;
&lt;p&gt;vue cli는 웹팩 위에서 빌드되는 프로젝트이므로 기본 설정만으로도 당장 테스트하기에 충분하지만 그래도 webpack에서 사용하던 설정들을 몇가지 붙여야하면 &lt;code class=&quot;language-text&quot;&gt;vue.config.js&lt;/code&gt;를 통해 세팅하면 된다. 최초에 기본 생성되는 파일이 아니므로 직접 만들어야한다.&lt;/p&gt;
&lt;p&gt;기본적으로 지원되는 옵션은 &lt;a href=&quot;https://cli.vuejs.org/config/#global-cli-config&quot;&gt;공식문서&lt;/a&gt;를 참조해서 작성하고, 나머지는 &lt;code class=&quot;language-text&quot;&gt;configureWebpack&lt;/code&gt;을 통해 설정한다. 해당 키값으로 설정된 옵션들은 &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;옵션에 &lt;code class=&quot;language-text&quot;&gt;merge&lt;/code&gt;되면서 빌드된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path          &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;path&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	UglifyJsPlugin  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;uglifyjs-webpack-plugin&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	rootconfig      &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;./root.config&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	publicPath&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	outputDir&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./dist/&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rootconfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	configureWebpack&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		entry&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			app &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./src/&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rootconfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildpath &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;main.ts&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		output&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			filename&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;bundle.js&apos;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		resolve&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			alias&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&apos;@&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;src/&apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; rootconfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;buildpath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		optimization&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			minimize&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			minimizer&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;UglifyJsPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
					uglifyOptions&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
					&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
						sourceMap&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
						warnings&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
						compress&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
							unused&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
						&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
						mangle&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
						beautify&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
						output&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
							comments&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
						&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
					&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[yarn 설치하고 다른 경로에 있는 node_modules 참조하기]]></title><description><![CDATA[vue.js…]]></description><link>https://parkdoyeon.github.io//yarn-설치하고-다른-경로에-있는-node-modules-참조하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//yarn-설치하고-다른-경로에-있는-node-modules-참조하기</guid><category><![CDATA[javascript]]></category><category><![CDATA[yarn]]></category><category><![CDATA[node]]></category><pubDate>Mon, 07 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;vue.js 개발환경을 구축하면서 노드파일을 관리해야하는 이슈가 생겼다. 배포시 디렉토리 구조가 아래와 같은데&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt; MYDIR&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
   projects&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
     project_a
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node_modules
     project_b
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node_modules
     project_c
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json
        &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node_modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  이 상태에서 신규 디렉토리 배포가 나가면 &lt;code class=&quot;language-text&quot;&gt;npm i&lt;/code&gt;명령 마다 이미 빌드서버에 설치한 패키지가 중복되는 것은 물론, &lt;code class=&quot;language-text&quot;&gt;node_modules&lt;/code&gt; 디렉토리가 하드디스크를 가득 차지하는 문제가 발생한다. &lt;/p&gt;
&lt;p&gt;  그래서 아래와 같이 각 프로젝트가 하나의 노드 모듈을 바라보도록 수정하기로 했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;MYDIR&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
 projects&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
   node_modules&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;
   project_a
      &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json
   project_b
      &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json
   project_c
      &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;package&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;방법&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/26293049/specify-path-to-node-modules-in-package-json&quot;&gt;스택오버플로우&lt;/a&gt;에서 찾은 환경변수 변경하는 방법은 윈도우 환경에서는 잘 동작하지 않았다. yarn을 사용하는 방법이 있길래, 이참에 한번 설치해보았다.&lt;/p&gt;
&lt;h1 id=&quot;yarn이란&quot;&gt;&lt;a href=&quot;#yarn%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;yarn이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;yarn이란?&lt;/h1&gt;
&lt;p&gt;node 모듈관리를 조금 더 체계적으로 하기 위한 패키지 관리 툴이다. 별도의 용도를 목적으로 하지만 기본적으로 기존에 세팅된 npm프로젝트와 함께 사용해도 된다는 점이 좋다. 나는 단순히 노드 모듈 참조를 조금더 간단한 설정으로 세팅하고싶어 설치했지만, &lt;a href=&quot;https://academy.realm.io/kr/posts/mobilization-konstantin-raev-taming-node-modules-at-facebook/&quot;&gt;이 포스트(Facebook은 Node_Modules를 어떻게 관리할까요?)&lt;/a&gt;를 참조하길 권한다. 2017년에 작성된 오래된 글이지만 yarn의 개념과 도입의도를 파악할 수 있는 좋은 글이다.&lt;/p&gt;
&lt;h1 id=&quot;yarn-설치와-사용법&quot;&gt;&lt;a href=&quot;#yarn-%EC%84%A4%EC%B9%98%EC%99%80-%EC%82%AC%EC%9A%A9%EB%B2%95&quot; aria-label=&quot;yarn 설치와 사용법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;yarn 설치와 사용법&lt;/h1&gt;
&lt;p&gt;간단하다. npm을 통해 설치하고 npm대신 yarn을 사용하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm i -g yarn

# vue.js 시작인 경우
npm run dev
yarn run dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;다른-경로의-노드-모듈-참조하기&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EB%A5%B8-%EA%B2%BD%EB%A1%9C%EC%9D%98-%EB%85%B8%EB%93%9C-%EB%AA%A8%EB%93%88-%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;다른 경로의 노드 모듈 참조하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다른 경로의 노드 모듈 참조하기&lt;/h1&gt;
&lt;p&gt;아래와같이 서로 다른 package.json설정을 갖는 프로젝트가 있을때, yarn을 통해 프로젝트 디렉토리마다 node&lt;em&gt;modules를 생성하지 않고 상위에 있는 node&lt;/em&gt;modules를 참조할 수 있다.&lt;/p&gt;
&lt;p&gt;방법 1. 실행 명령어를 통해 설정하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;yarn run dev &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;modules&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;folder &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node_modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;방법 2. 설정파일 만들기
package.json이 있는 root 경로에 .yarnrc파일을 생성하고 아래 내용을 입력한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;-&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;modules&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;folder &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;node_modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Visual Studio Code 유용한/기본적인 세팅들]]></title><description><![CDATA[2019년 10월 8일부터 작성 시작, 꾸준히 업데이트할 예정이다. IDE 디자인 unique window colors
새로운 윈도우 띄울때마다 컬러가 바뀐다. 여러창 띄워놓고 작업할 때 유용하다.
https://marketplace…]]></description><link>https://parkdoyeon.github.io//visual-studio-code-유용한-기본적인-세팅들</link><guid isPermaLink="false">https://parkdoyeon.github.io//visual-studio-code-유용한-기본적인-세팅들</guid><category><![CDATA[vscode]]></category><category><![CDATA[ide]]></category><pubDate>Mon, 07 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;2019년 10월 8일부터 작성 시작, 꾸준히 업데이트할 예정이다.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;ide-디자인&quot;&gt;&lt;a href=&quot;#ide-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;ide 디자인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IDE 디자인&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;unique window colors
새로운 윈도우 띄울때마다 컬러가 바뀐다. 여러창 띄워놓고 작업할 때 유용하다.
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=stuart.unique-window-colors&quot;&gt;https://marketplace.visualstudio.com/items?itemName=stuart.unique-window-colors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;rainbow brakets
괄호를 여닫을 때 다양한 색상으로 표기. Elasticsearch 쿼리 만들때 유용하게 썼다.
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets&quot;&gt;https://marketplace.visualstudio.com/items?itemName=2gua.rainbow-brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;indent rainbow
코드 내 들여쓰기 정도를 컬러를 입혀서 구분한다. 색상도 vscode의 톤앤 매너에 맞는 은은한 컬러라 보기 좋다. dot으로 구분하는 라이브러리도 많은데 개인적으로는 색상 표현이 더 직관적인 것 같다.
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&quot;&gt;https://marketplace.visualstudio.com/items?itemName=oderwat.indent-rainbow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;마크다운&quot;&gt;&lt;a href=&quot;#%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4&quot; aria-label=&quot;마크다운 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마크다운&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;markdown all in one
마크다운 작성할때 단축키를 써서 작업할 수 있다
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&quot;&gt;https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[JavaScript - 정규식으로 문자열 replace하기]]></title><description><![CDATA[을 으로 바꾸려면 replace()를 사용해야 될 것같지만, replace…]]></description><link>https://parkdoyeon.github.io//java-script-정규식으로-문자열-replace하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//java-script-정규식으로-문자열-replace하기</guid><category><![CDATA[javascript]]></category><category><![CDATA[regex]]></category><pubDate>Mon, 16 Sep 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;#39;2019-09-17&amp;#39;&lt;/code&gt;을 &lt;code class=&quot;language-text&quot;&gt;&amp;#39;2019/09/17&amp;#39;&lt;/code&gt;으로 바꾸려면 replace()를 사용해야 될 것같지만, replace()는 &lt;strong&gt;가장 먼저 등장하는 문자열만&lt;/strong&gt; 교체한다. 때문에 전체 문자열에서 변경사항을 적용하려면 다음과 같이 정규식을 사용해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;2019-09-17&apos;&lt;/span&gt;
item&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;/-/g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정규식 끝에 있는 소문자는 &apos;전체탐색&apos;을 의미한다. i와 함께 많이 사용되는데, 정리하면 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;i: ignore case, 대문자/소문자 구분하지 않음&lt;/li&gt;
&lt;li&gt;g: global, 전체 탐색&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/replace&quot;&gt;MDN 문서&lt;/a&gt;에 좋은 예시들이 많이 나오는데, 아래와 같은 사용도 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; re &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;/(\w+)\s(\w+)/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;John Smith&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; newstr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;re&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;$2, $1&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newstr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// Smith, John&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[파이썬 heapq로 리스트 빠르게 정렬하기]]></title><description><![CDATA[문제 어떤 리스트(somearr)에서 가장 작은 원소 두개를 꺼내서 연산(원소1+원소2*2)한 다음 연산결과를 리스트(somearr)에 다시 넣는다.  리스트의 모든 원소가 일정 기준(point) 이상이 될 때 까지 이 동작을 반복한다. list…]]></description><link>https://parkdoyeon.github.io//파이썬-heapq로-리스트-빠르게-정렬하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//파이썬-heapq로-리스트-빠르게-정렬하기</guid><category><![CDATA[python]]></category><category><![CDATA[heapq]]></category><category><![CDATA[sort]]></category><pubDate>Tue, 30 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;문제&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;문제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;어떤 리스트(somearr)에서 가장 작은 원소 두개를 꺼내서&lt;/li&gt;
&lt;li&gt;연산(원소1+원소2*2)한 다음&lt;/li&gt;
&lt;li&gt;연산결과를 리스트(somearr)에 다시 넣는다. &lt;/li&gt;
&lt;li&gt;리스트의 모든 원소가 일정 기준(point) 이상이 될 때 까지 이 동작을 반복한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;somearr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
point &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;listsort&quot;&gt;&lt;a href=&quot;#listsort&quot; aria-label=&quot;listsort permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;list.sort()&lt;/h3&gt;
&lt;p&gt;이 동작을 일반 리스트를 통해 구현하면 어떨까? 코드자체는 단순하다. 그러나 가장 작은 원소를 찾기위해 정렬을 해야하며, 모든 원소를 확인하며 정렬하는 sort()로는 리스트가 길어질수록 여기에 비례한만큼 긴 시간이 소요된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; somearr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; point&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sorsomearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    sorsomearr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;append&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sorsomearr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sorsomearr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    somearr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;dequepopleft-dequeappendleft&quot;&gt;&lt;a href=&quot;#dequepopleft-dequeappendleft&quot; aria-label=&quot;dequepopleft dequeappendleft permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;deque.popleft(), deque.appendleft()&lt;/h3&gt;
&lt;p&gt;그렇다면 pop과 append연산을 deque모듈을 임포트해서 구현하는 것은 어떨까? &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; collections &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; deque
deque_arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; deque&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; deque_arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; point&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;deque_arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    deque_arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;appendleft&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;deque_arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;popleft&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;deque_arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;popleft&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;deque_arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;왼쪽에 연산 결과를 추가한다고해서 더 빠르게 정렬이 일어난다는 보장도 없거니와, 연산 결과값으로 추가되는 왼쪽 원소가 반드시 최소가 된다는 보장은 없으므로, 결국엔 리스트 정렬을 해야한다. 특별히 효과를 보지 못한다.&lt;/p&gt;
&lt;h3 id=&quot;heapqheappop-heapqheappush&quot;&gt;&lt;a href=&quot;#heapqheappop-heapqheappush&quot; aria-label=&quot;heapqheappop heapqheappush permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;heapq.heappop(), heapq.heappush()&lt;/h3&gt;
&lt;p&gt;이 때 활용하면 좋은 모듈이 heapq다. heapq는 이진트리의 자료구조를 구현해낸 모듈로, 일반 리스트 데이터를 파라미터로 받아 이진트리 알고리즘으로 정렬한 다음 원소를 꺼내거나 삭제한다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; heapq

heapq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapify&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 리스트 오브젝트를 정렬한다&lt;/span&gt;
answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; somearr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; K&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    heapq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heappush&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; heapq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heappop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;heapq&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heappop&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;somearr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;heappush, heappop 모두 자료 삭제/추가와 동시에 정렬이 이어나는 자료구조로, 별도의 sort가 필요없다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[파이썬 sort()함수 key 파라미터 제대로 사용하기]]></title><description><![CDATA[지난번에 작성한 big sort에 대한 글에서 casting을 통한 정렬을 위해 sort함수의 key파라미터에 대해 설명했는데 최근에 문제를 풀다가 몇가지 사용방법을 더 알게되었다. key 파라미터는 정렬의 기준이 되는 값을 제공하는 내장함수이다.…]]></description><link>https://parkdoyeon.github.io//파이썬-sort-함수-key-파라미터-제대로-사용하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//파이썬-sort-함수-key-파라미터-제대로-사용하기</guid><category><![CDATA[python]]></category><category><![CDATA[sort]]></category><pubDate>Sat, 27 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;지난번에 작성한 &lt;a href=&quot;./2019-07-21-python-sort&quot;&gt;big sort에 대한 글&lt;/a&gt;에서 casting을 통한 정렬을 위해 sort함수의 key파라미터에 대해 설명했는데 최근에 문제를 풀다가 몇가지 사용방법을 더 알게되었다. key 파라미터는 정렬의 기준이 되는 값을 제공하는 내장함수이다. 2차원 리스트를 정렬할때 sort함수는 기본으로 첫번째 인자를 기준으로 정렬한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;student_point &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;keyitemgetter-사용하기&quot;&gt;&lt;a href=&quot;#keyitemgetter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;keyitemgetter 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key=itemgetter 사용하기&lt;/h3&gt;
&lt;p&gt;그렇다면 인자마다 또 다른 iterable object를 갖는 2차원 오브젝트에 접근하여 정렬하려면 어떻게 해야할까? 첫번째 방법은 itemgetter를 사용하는 것이다. itemgetter를 사용하기 위해서는 기본제공 모듈인 operator의 import가 필요하다. itemgetter에 파라미터로 오브젝트의 몇번째 인자를 기준으로 정렬할지 사용할 수 있다. sort함수에 역순옵션을 주면 해당인자를 기준으로 역순으로 정렬해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; operator &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; itemgetter
student_point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;itemgetter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reverse&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;student_point&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;keylambda-사용하기&quot;&gt;&lt;a href=&quot;#keylambda-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;keylambda 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;key=lambda 사용하기&lt;/h3&gt;
&lt;p&gt;두번째 방법은 람다함수를 사용하는 것이다. 람다를 사용하면 operator를 import하지 않고 정렬할 수 있다. 역순으로 정렬하고싶으면 마이너스를 기호를 붙여주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;student_point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;출력 결과&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;lambda를-사용해-여러기준으로-정렬하기&quot;&gt;&lt;a href=&quot;#lambda%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%97%AC%EB%9F%AC%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;lambda를 사용해 여러기준으로 정렬하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lambda를 사용해 여러기준으로 정렬하기&lt;/h3&gt;
&lt;p&gt;lambda는 훨씬 자유도가 높은데, 아래와 같이 여러개의 인자를 리턴하면 앞에있는 인자를 기준으로 하고, 그 다음에는 두번째 인자를 기준으로 정렬한다. 여기서는 마이너스를 붙여줬으므로 앞의 인자 기준으로 정렬하되, 앞의 인자가 동일한 값을 갖게되면 두번째 인자를 기준으로 역순으로 정렬한다. 쉽게 말하면, 리턴된 인자가 정렬의 대상이 되는 인자인 것처럼 오브젝트를 다룬다!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;student_point&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;출력 결과&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;210&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;, &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[파이썬 dictionary활용을 위한 빌트인 함수들]]></title><description><![CDATA[DB…]]></description><link>https://parkdoyeon.github.io//파이썬-dictionary활용을-위한-빌트인-함수들</link><guid isPermaLink="false">https://parkdoyeon.github.io//파이썬-dictionary활용을-위한-빌트인-함수들</guid><category><![CDATA[python]]></category><category><![CDATA[algorithm]]></category><category><![CDATA[dictionary]]></category><pubDate>Tue, 23 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;DB를 잘 쓰려면 쿼리를 알아야 하듯이, 알고리즘 문제를 풀다보면 정확한 자료형을 구현하기위해선 빌트인 함수를 잘 써야한다. 가령 아래 배열에서 같은 인덱스 값을 갖는 값들이 어떤 곡의 장르와 플레이 횟수라고 했을때, 장르별 플레이 횟수 합산을 하고, 횟수 단위로 순위를 매기려면 어떻게 해야할까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;genres &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;classic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pop&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;classic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;classic&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pop&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
plays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드적으로 의미를 해석하면, 장르별 데이터라면 2개의 값이 서로 key-value관계를 가지며, 특정 장르별로 합산이 되어야한다는 것은 중복되지 않는 key값 단위로 합산이 이루어진다는 것을 의미한다. 이것을 순서로 정리하면&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;해당 key값을 갖는 딕셔너리를 생성한 다음에&lt;/li&gt;
&lt;li&gt;연산을 위해 0을 value로 할당하고 &lt;/li&gt;
&lt;li&gt;순회하면서 더하고&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;순위를 매긴다.
단순해보이지만 여기까지도 다양한 선택지가 존재한다. 여기 동일한 로직을 적용했지만 코드가 다른 두개의 방법이 있다. &lt;/p&gt;
&lt;h3 id=&quot;방법-1-fromkeys로-딕셔너리-생성후-index를-직접-순회하며-더하기&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-1-fromkeys%EB%A1%9C-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%83%9D%EC%84%B1%ED%9B%84-index%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%88%9C%ED%9A%8C%ED%95%98%EB%A9%B0-%EB%8D%94%ED%95%98%EA%B8%B0&quot; aria-label=&quot;방법 1 fromkeys로 딕셔너리 생성후 index를 직접 순회하며 더하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 1: fromkeys로 딕셔너리 생성후 index를 직접 순회하며 더하기&lt;/h3&gt;
&lt;p&gt;fromkeys는 순회가능한 리스트를 key값으로 생성한 딕셔너리를 만든다. 주의할점은 두번째 파라미터값으로 초기값을 받는데, 여기에 list()를 할당하면 &lt;strong&gt;같은 주소값을 갖는다.&lt;/strong&gt; 즉, 해당 value값의 변형이 일어나면 &lt;strong&gt;&lt;em&gt;모든 key에 대응하는 list값이 영향을 받는다.&lt;/em&gt;&lt;/strong&gt; 때문에 list할당시에는 comprehension이나 아래에 defaultdict()함수를 사용해야한다. fromkeys르 딕셔너리 생성후, genres와 plays는 서로 같은 인덱스에 대응하하므로 직접 인덱스 값을 순회하며 플레이 횟수를 더해준다. 합산된 딕셔너리는 다시 순서값이 있는 데이터형인 tuple자료형으로 변환된 다음, sort()로 정렬된다. 2차원 이상의 자료형은 제일 앞의 인자를 기준으로 sort된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;genre_rank_dict &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fromkeys&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;genres&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 딕셔너리 생성&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;plays&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
genre_rank_dict&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;genres&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; plays&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;genre&lt;em&gt;rank = [(albumrank[g], g) for g in albumrank.keys()]
genre&lt;/em&gt;rank.sort(reverse=True)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;### 방법 2: defaultdict으로 생성하고 zip으로 순회하기
두번째 바법은 defaultdict으로 빈 딕셔너리를 생성하는데, 람다함수로 초기값을 지정할 수 있다. 초기값을 지정해놓으면 함수연산이 바로 가능하다는 장점이 있다. 딕셔너리 생성 후에는 tuple자료형으로 장르와 재생횟수를 묶어서 dictionary에 넣어준다. zip은 iterable 오브젝트이기 때문에, 위의 방식과 성능적으로 전혀 차이가 없지만 더 명확하고 깔끔한 코드를 작성할 수 있는 장점이 있다. dict자료형이 완성되면 아래도 마찬가지로 items()함수를 호출해 tuple형으로 바꿔주는데, 컴프리헨션을 통해 플레이 휫수 기준으로 정렬된 tuple 리스트에서 장르만 순서대로 빼놓은 리스트를 새로 생성한다.
``` python
genre_rank_dict = defaultdict(lambda: 0) # 딕셔너리 생성
for genre, play in zip(genres, plays):
    genre_rank_dict[genre] += play

genre_rank = [genre for genre, play in sorted(genre_play_dict.items(), key=itemgetter(1), reverse=True)]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ASP.NET Core nuget package 배포하기]]></title><description><![CDATA[…]]></description><link>https://parkdoyeon.github.io//asp-net-core-nuget-package-배포하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//asp-net-core-nuget-package-배포하기</guid><category><![CDATA[csharp]]></category><category><![CDATA[dotnetcore]]></category><category><![CDATA[nuget]]></category><pubDate>Mon, 22 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사실 누겟패키지 생성방법은 &lt;a href=&quot;https://docs.microsoft.com/ko-kr/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli&quot;&gt;공식문서&lt;/a&gt;에 아주 잘 정리되어있다. 이 글은 공식문서를 내 언어로 한번 더 정리하고, 내부 패키지 서버에 배포하는 과정과 거기서 발생한 트러블 슈팅과정을 덧붙이는 것을 목적으로 한다. 닷넷 코어로 빌드한 누겟 패키지를 배포하고 또 닷넷 코어 프로젝트에 적용하면서 기록용으로 글을 작성하게 됐는데, 이전에 일반 닷넷 프레임워크 누겟 패키지 빌드/배포와 크게 달라진 점은 없는 것 같다.&lt;/p&gt;
&lt;p&gt;패키지의 빌드방식은 크게 세가지라고 할 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;방법-1-빌드-옵션을-통한-패키지-파일-자동생성&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-1-%EB%B9%8C%EB%93%9C-%EC%98%B5%EC%85%98%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%8C%A8%ED%82%A4%EC%A7%80-%ED%8C%8C%EC%9D%BC-%EC%9E%90%EB%8F%99%EC%83%9D%EC%84%B1&quot; aria-label=&quot;방법 1 빌드 옵션을 통한 패키지 파일 자동생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 1. 빌드 옵션을 통한 패키지 파일 자동생성&lt;/h1&gt;
&lt;p&gt;csproj에 아래의 설정값을 추가해주고 빌드하면 bin디렉토리 내 빌드 버전 폴더에 .nupkg파일이 생성된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PropertyGroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;$(Configuration)|$(Platform)&apos;==&apos;Debug|AnyCPU&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PackageId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;something.for.core&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;PackageId&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1.0.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Authors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;someauthor&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Authors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Company&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;somecompany&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Company&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;GeneratePackageOnBuild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;true&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;GeneratePackageOnBuild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;방법-2-명령어로-생성하기&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-2-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A1%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;방법 2 명령어로 생성하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 2. 명령어로 생성하기&lt;/h1&gt;
&lt;p&gt;빌드 설정에 누겟패키지 설정을 추가하는 것이 귀찮다면(혹은 property값을 굳이 남기고 싶지 않다면) 커맨드라인 명령어로 생성할수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;dotnet pack &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;c release&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;방법-3-nuget-package-explorer에서-생성하기&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95-3-nuget-package-explorer%EC%97%90%EC%84%9C-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;방법 3 nuget package explorer에서 생성하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법 3. nuget package explorer에서 생성하기&lt;/h1&gt;
&lt;p&gt;GUI를 통해 패키지를 생성할 수 있다. 윈도우 마켓에서 nuget package explorer를 설치해서 빌드하면 된다. 처음에 쓰면 혼란스러운 구석은 있어도 사용 자체는 어렵지 않아서 설명은 생략한다. 빌드 파일의 디렉토리 구성이나 버전별 관리까지 이래저래 손이 가는 부분이 있어서 특별한 경우가 아니면 사용하지 않는 것이 좋은 것 같다.&lt;/p&gt;
&lt;h1 id=&quot;배포하기---cmd를-사용한-배포&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0---cmd%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;배포하기   cmd를 사용한 배포 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포하기 - cmd를 사용한 배포&lt;/h1&gt;
&lt;p&gt;배포도 마찬가지로 위의 방법 세가지를 다 쓸 수 있다.누겟 익스플로러에서 해도되고, cmd에서 해도 된다. cmd는 아래와 같이 작성하면 된다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;dotnet nuget push something&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;core&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nupkg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;k somecompany &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;s https:&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nuget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;org&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;v3&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;-k&lt;/code&gt;는 키값을 넣는 파라미터인데, 내부서버에 배포하는 경우 키값을 임의로(아무거나) 작성해도 되지만, 누겟서버에 배포하는 경우 발급받은 키값을 입력해야한다.  내 경우 사내에서 사용하는 sonatype nexus package서버에 배포를 해야야 하므로 키값을 임의로 지정했다. 배포 url은 다운로드용으로 연결할때는 &lt;code class=&quot;language-text&quot;&gt;https://package.mycompany.com/repository/nuget-group/&lt;/code&gt; 주소로 했는데, 배포시에는 &lt;code class=&quot;language-text&quot;&gt;https://package.mycompany.com/repository/nuget-hosted/&lt;/code&gt;주소로 배포해야 했다. 이 점을 몰라서 조금 헤맸다.&lt;/p&gt;
&lt;h1 id=&quot;배포하기---누겟-익스플로러를-사용한-배포&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0---%EB%88%84%EA%B2%9F-%EC%9D%B5%EC%8A%A4%ED%94%8C%EB%A1%9C%EB%9F%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;배포하기   누겟 익스플로러를 사용한 배포 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배포하기 - 누겟 익스플로러를 사용한 배포&lt;/h1&gt;
&lt;p&gt;누겟 익스플로러에서 배포하는 경우 생성된 로컬 누겟패키지를 익스플로러에서 연 다음 &lt;code class=&quot;language-text&quot;&gt;File &amp;gt; Publish&lt;/code&gt;를 누르면 아래와같은 팝업이 나온다. 주소와 키값을 넣고 배포 버튼을 누르면 된다.
&lt;img src=&quot;/image/csharp/2019-07-23-nuget-1.png&quot; alt=&quot;nuget&quot;&gt;
주소입력창 하단에 &lt;code class=&quot;language-text&quot;&gt;api/v2/package&lt;/code&gt;경로를 배포경로에 더할것인지 체크하는 체크박스가 있는데 하지 않아도 된다.&lt;/p&gt;
&lt;h1 id=&quot;fyi---trouble-shooting&quot;&gt;&lt;a href=&quot;#fyi---trouble-shooting&quot; aria-label=&quot;fyi   trouble shooting permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FYI - Trouble Shooting&lt;/h1&gt;
&lt;p&gt;누겟 패키지를 게시하고 프로젝트에서 정상적으로 설치까지 했지만, cs 파일에서 패키지 호출시 네임스페이스를 인식 못하는 문제가 있었다. 이때 패키지 버전을 올려서 게시한 다음 패키지 업데이트를 하니 문제가 해결됐다. 또 그 이후에 다른 누겟 프로젝트를 최초로 빌드해 올렸을때는 정상적으로 레퍼런스 참조가 됐다. 해결법은 찾았지만 재현이 안된다. 대체 무엇이 문제였던 것일까.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[big sort 문제 풀기 - sort()함수에 대한 고찰]]></title><description><![CDATA[hackerrank에서 string으로 이루어진 무작위 순서의 리스트를 정렬하는 big-sorting문제를 풀었다. 내장된 sort()함수를 쓰면 안될 것 같아 직접 선택정렬을 활용한 sort…]]></description><link>https://parkdoyeon.github.io//big-sort-문제-풀기-sort-함수에-대한-고찰</link><guid isPermaLink="false">https://parkdoyeon.github.io//big-sort-문제-풀기-sort-함수에-대한-고찰</guid><category><![CDATA[python]]></category><category><![CDATA[algorithm]]></category><pubDate>Sat, 20 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;hackerrank에서 string으로 이루어진 무작위 순서의 리스트를 정렬하는 &lt;a href=&quot;https://www.hackerrank.com/challenges/big-sorting/&quot;&gt;big-sorting&lt;/a&gt;문제를 풀었다. 내장된 sort()함수를 쓰면 안될 것 같아 직접 선택정렬을 활용한 sort함수를 구현했는데 케이스 절반만 통과했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bigSorting&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        lgidx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; largest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
        j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;j &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;largest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 자릿수가 다르면 바로 순서 변경&lt;/span&gt;
                lgidx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i
                largest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;largest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# 자릿수가 같으면 숫자로 캐스팅한 다음 비교&lt;/span&gt;
                &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;largest&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
                    lgidx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i
                    largest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            j&lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; largest&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            temp &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; largest
            unsorted&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;lgidx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; temp
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; unsorted&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 문제의 핵심은 string에서 int로 캐스팅할때 발생하는 비용처리이다. 내 코드는 자릿수가 다른 경우만 처리한다는 점, 그리고 선택정렬 자체가 효율적이지 못했던 점이 문제였던 것 같다. 꽤 오랜시간을 들였는데도 답이 나오지 않아서 discussion을 읽기 시작했는데, 알지 못했던 사실들이 많았다.&lt;/p&gt;
&lt;h3 id=&quot;sort는-꽤-훌륭한-구현속도를-자랑하며-sorted와-성능상-큰-차이가-없다&quot;&gt;&lt;a href=&quot;#sort%EB%8A%94-%EA%BD%A4-%ED%9B%8C%EB%A5%AD%ED%95%9C-%EA%B5%AC%ED%98%84%EC%86%8D%EB%8F%84%EB%A5%BC-%EC%9E%90%EB%9E%91%ED%95%98%EB%A9%B0-sorted%EC%99%80-%EC%84%B1%EB%8A%A5%EC%83%81-%ED%81%B0-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EC%97%86%EB%8B%A4&quot; aria-label=&quot;sort는 꽤 훌륭한 구현속도를 자랑하며 sorted와 성능상 큰 차이가 없다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;sort()는 꽤 훌륭한 구현속도를 자랑하며, sorted()와 성능상 큰 차이가 없다.&lt;/h3&gt;
&lt;p&gt;sort()만 사용해도 테스트 케이스는 3문제를 제외하고(숫자 대소 확인이 안되어서 wrong answer가 된다) 모두 통과한다. 정렬은 둘 중 어느 함수를 써도 상관없다. 차이라면 sort()는 배열 원본의 순서를 변경하지만 sorted는 정렬된 리스트를 반환한다는 점이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
copy_arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;int에서-string으로-캐스팅할-때-비용이-반대의-경우보다-훨씬-크다&quot;&gt;&lt;a href=&quot;#int%EC%97%90%EC%84%9C-string%EC%9C%BC%EB%A1%9C-%EC%BA%90%EC%8A%A4%ED%8C%85%ED%95%A0-%EB%95%8C-%EB%B9%84%EC%9A%A9%EC%9D%B4-%EB%B0%98%EB%8C%80%EC%9D%98-%EA%B2%BD%EC%9A%B0%EB%B3%B4%EB%8B%A4-%ED%9B%A8%EC%94%AC-%ED%81%AC%EB%8B%A4&quot; aria-label=&quot;int에서 string으로 캐스팅할 때 비용이 반대의 경우보다 훨씬 크다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;int에서 string으로 캐스팅할 때 비용이 반대의 경우보다 훨씬 크다.&lt;/h3&gt;
&lt;p&gt;big sorting 문제풀이를 하려면 비교를 위해 필연적으로 string을 int로 변환하고, print구문으로 출력을 위해 string으로 변환하는 과정을 거친다. 여기서 숫자간 대소비교를 위해 int캐스팅 하는 과정은 비교적 빠르게 이루어지지만, 비교를 위해 변경한 int값을 string으로 바꾸는것은 꽤 오래걸린다.&lt;/p&gt;
&lt;h3 id=&quot;해법-sortkeyint&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EB%B2%95-sortkeyint&quot; aria-label=&quot;해법 sortkeyint permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해법: sort(key=int)&lt;/h3&gt;
&lt;p&gt;결론적으로 캐스팅 과정을 최소화 해야하는데, 3.6의 sort함수는 비교를 위한 키값을 파라미터로 받는다. 즉, key값으로 int를 지정해주면 정렬의 대소비교를 위해서만 캐스팅을 하고, 본래의 원소는 string으로 정렬된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
copy_arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;더-좋은-해결-sortkeylen&quot;&gt;&lt;a href=&quot;#%EB%8D%94-%EC%A2%8B%EC%9D%80-%ED%95%B4%EA%B2%B0-sortkeylen&quot; aria-label=&quot;더 좋은 해결 sortkeylen permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;더 좋은 해결!: sort(key=len)&lt;/h3&gt;
&lt;p&gt;하지만 위의 경우도 여전히 캐스팅은 발생한다. 캐스팅 없이 정렬할때의 문제는 숫자 대소인데, string기준으로 sorting을 한 다음에 key값으로 int가 아니라 문자열의 길이로 한번 더 sorting 해주면 통과할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러나 이건 제출의 문제이고, key값에 비교 람다함수를 넣어서 한번의 정렬만 일어나게 하면 훨씬 빠르게 연산이 일어난다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; timeit
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bigSortinglen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bigSortingint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unsorted&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;lambda&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;bigSorting - len:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    timeit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bigSortinglen(unsorted)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token builtin&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    number&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;bigSorting - int:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    timeit&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bigSortingint(unsorted)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    &lt;span class=&quot;token builtin&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;globals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
    number&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;실제로 timeit 라이브러리를 통해 시간을 비교하면 550배나 더 빠르다는 것을 알 수 있다.
&lt;code class=&quot;language-text&quot;&gt;bigSorting - len: 0.007199285000751843&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;bigSorting - int: 3.989389060998292&lt;/code&gt;&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[윈도우 파워쉘 권한 변경하기]]></title><description><![CDATA[간혹 윈도우 2009 정도되는 서버 파워쉘에서 스크립트 파일 실행시 아래와 같이 스크립트 에러메세지가 출력 되는경우가 있다. 관리자 권한으로 파워쉘 실행하고, 아래의 명령어로 실행 정책을 확인한다.  리턴된 값이 Restricted…]]></description><link>https://parkdoyeon.github.io//윈도우-파워쉘-권한-변경하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//윈도우-파워쉘-권한-변경하기</guid><category><![CDATA[window]]></category><category><![CDATA[powershell]]></category><pubDate>Tue, 09 Jul 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;간혹 윈도우 2009 정도되는 서버 파워쉘에서 스크립트 파일 실행시 아래와 같이 스크립트 에러메세지가 출력 되는경우가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;오류: 이 시스템에서 스크립트를 실행할 수 없으므로 &lt;span class=&quot;token namespace&quot;&gt;[script]&lt;/span&gt; 파일을 로드할 수 없습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;관리자 권한으로 파워쉘 실행하고, 아래의 명령어로 실행 정책을 확인한다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;PS&lt;/span&gt; &gt; Get&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ExecutionPolicy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;리턴된 값이 Restricted이면 외부 스크립트 실행이 안되므로 UnRestricted나 RemoteSigned으로 바꿔주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;PS&lt;/span&gt; &gt; &lt;span class=&quot;token function&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ExecutionPolicy RemoteSigned&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;RemoteSigned는 외부 스크립트에 모든 실행 권한을 주고, UnRestricted는 일부 스크립트에서 실행가능하다. 실행할때 ExecutionPolicy의 파라미터 값을 UnRestricted로 주면된다. 가령 Metricbeat의 서비스 인스톨 스크립트는 UnRestricted레벨을 주면 정상적으로 실행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;powershell&quot;&gt;&lt;pre class=&quot;language-powershell&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;PowerShell&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exe &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ExecutionPolicy UnRestricted &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;File &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;\install&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;service&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;metricbeat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ps1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - unassigned shard 문제 해결 (3) replica 숫자가 부적절할때]]></title><description><![CDATA[엘라스틱서치 테스트 환경에서 일어난 일이다. 마스터노드 1대만 단독으로 서비스가 올라가있는데, 어느 시점부터(아마도 es 버전을 올린 시점부터) index health status가 yellow로 바뀌었다. 확인해보니, 모든 인덱스에서 replica…]]></description><link>https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-3-replica-숫자가-부적절할때</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-3-replica-숫자가-부적절할때</guid><category><![CDATA[elasticsearch]]></category><pubDate>Wed, 26 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;엘라스틱서치 테스트 환경에서 일어난 일이다. 마스터노드 1대만 단독으로 서비스가 올라가있는데, 어느 시점부터(아마도 es 버전을 올린 시점부터) index health status가 yellow로 바뀌었다. 확인해보니, 모든 인덱스에서 replica shard만 할당이 되지 못하고 있었다. 이유를 쿼리했더니 동일한 샤드가 있는 곳엔 샤드할당이 되지않는다는 에러메세지가 나왔다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;GET /_cluster/allocation/explain
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//...생략&lt;/span&gt;
    cannot allocate because allocation is not permitted to any of the nodes that hold an in-sync shard copy
    &lt;span class=&quot;token comment&quot;&gt;//...생략&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;좀 더 찾아보니, 스택오버플로우에 &lt;a href=&quot;https://stackoverflow.com/questions/37302611/elasticsearch-doesnt-allow-to-allocate-unassigned-shard&quot;&gt;나와 비슷한 상황&lt;/a&gt;인 사람이 있었다. replica는 말그대로 복제 샤드이기 때문에 동일한 노드에 배치될 수 없고, 또 다른 노드에 배치되어야 한다는 답변이 있었다. 즉, 복제샤드가 필요하면 노드를 추가 해야하고, 아니면 복제샤드 갯수 설정을 더 낮게 바꿔야한다는 것이다. &lt;/p&gt;
&lt;p&gt;복제 샤드를 올바르게 설정하려면 &quot;전체 노드 갯수 &gt;원본샤드 노드(1) + 복제샤드 갯수&quot;가 성립해야 한다. ES가 기본값으로 설정하는 샤드의 갯수는 5개, 복제 샤드의 갯수는 1개이다. 테스트환경처럼 단독으로 ES 노드를 운영하는 상황에서는 복제샤드의 갯수를 0으로 맞춰줘야 status를 green으로 유지할 수 있다.&lt;/p&gt;
&lt;p&gt;다행히도 복제샤드에 대한 설정은 이미 생성된 인덱스에도 적용할 수 있다. 다음과같이 쿼리하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;PUT /index_name_*/_settings
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고, 앞으로 생성될 인덱스에 일괄적용하고싶다면 아래와 같이 &lt;a href=&quot;/elk/elk-2019-02-27-es-mapping&quot;&gt;템플릿을 통해&lt;/a&gt; 지정하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;GET _template/myindex_shards_control
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;index_patterns&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;index_name_*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch 7.2에 한국어 분석기 Nori 플러그인 설치하기]]></title><description><![CDATA[엘라스틱서치가 검색엔진으로서 한국어를 올바르게 인식하도록 하려면 한국어 분석기가 필요하다. 엘라스틱서치 6.4부터 공식적으로 제공하는 한국어 분석 플러그인 Nori…]]></description><link>https://parkdoyeon.github.io//elastic-search-7-2-에-한국어-분석기-nori-플러그인-설치하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-7-2-에-한국어-분석기-nori-플러그인-설치하기</guid><category><![CDATA[elasticsearch]]></category><category><![CDATA[nlp]]></category><category><![CDATA[nori]]></category><pubDate>Wed, 26 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;엘라스틱서치가 검색엔진으로서 한국어를 올바르게 인식하도록 하려면 한국어 분석기가 필요하다. 엘라스틱서치 6.4부터 공식적으로 제공하는 한국어 분석 플러그인 Nori는 기본 플러그인이 아니므로 번거롭지만 별도로 설치해줘야한다. 나는 도커로 서버를 운용하기때문에, 엘라스틱서치 공식 도커 이미지에 플러그인만 설치해서 다시 빌드했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; docker.elastic.co/elasticsearch/elasticsearch&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;7.2.0
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bin/elasticsearch-plugin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;analysis-nori&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;CMD&lt;/span&gt; bin/elasticsearch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;설치후에는 플러그인 동작을 노리에서 제공하는 기본 분석기로 테스트를 해볼 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;POST _analyze
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;explain&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nori&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;젤다의전설은 링크가 주인공이다.&amp;lt;/p&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;attributes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;posType&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;morphemes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reading&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//해당 컬럼이 없으면 전체 필드가 다 노출된다.&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Response 200&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;detail&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;custom_analyzer&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;org.apache.lucene.analysis.ko.KoreanAnalyzer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;tokens&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNP(Proper Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNP(Proper Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;링크&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;공&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;이&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;VCP(Positive designator)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;VCP(Positive designator)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;커스터마이즈-하기&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A6%88-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;커스터마이즈 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커스터마이즈 하기&lt;/h1&gt;
&lt;p&gt;검색결과를 코드로직에서 가공할수도 있지만, 커스텀 분석기를 만들어 더 효율적으로 결과의 내용을 변경할 수 있다. 커스텀 분석기가 잘 적용되는지 테스트를 하기위해 직접 데이터가 있는 인덱스에 붙이지 않고 샘플로 &lt;code class=&quot;language-text&quot;&gt;my-custom-analyzer&lt;/code&gt;인덱스를 생성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;PUT my-custom-analyzer
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;number_of_shards&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;number_of_replicas&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;analysis&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;kr_bbs_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;decompound_mode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mixed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token comment&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;user_dictionary_rules&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;젤다의전설 젤다 의 전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;성남시 성남 시&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;링크&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 배열로 등록할수도 있고&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 아래와 같이 직접 파일로 등록할 수도 있다.
                    &lt;span class=&quot;token property&quot;&gt;&quot;user_dictionary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_dictionary.txt&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;nori&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kr_bbs_tokenizer&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;user_dictionary는 단어로 인식할 값들이 들어있는 배열이다. 텍스트 파일의 경우 개행을 통해 단어를, 띄어쓰기를 통해 형식을 구분한다. 띄어쓰기는 첫번째 음절을 명사로, 두번째 음절을 복합명사로 등록한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;txt&quot;&gt;&lt;pre class=&quot;language-txt&quot;&gt;&lt;code class=&quot;language-txt&quot;&gt;성남시 성남 시
젤다의전설 젤다 의 전설
링크&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;해당 파일은 &lt;code class=&quot;language-text&quot;&gt;$ELASTICSEARCH-HOME/config/&lt;/code&gt;경로에 넣어놓고 등록하면 된다. 도커를 통해 텍스트파일을 마운트하고-&gt;분석기에 파일 등록하고 -&gt;사전 내용 수정을 했는데,커스텀 분석기가 파일이 변경되면 바로 감지를 못하는 것같다. 완성된 사전을 분석기 등록시에 넣어줘야하는지 조금더 확인이 필요한 것같다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;주의! (2019-07-06 업데이트)&lt;/em&gt;
노드가 여러개인 경우 각 ES 인스턴스 경로마다 사용자 정의사전 파일을 추가해야한다. 분명히 인덱스 매핑 템플릿 설정은 정상적으로 되는데(경로에 해당파일 없으면 설정도 되지 않는다) ES에서 계속 IOException 로그와 함께 복제 샤드가 샤딩이 잘 안되길래 파일명 바꿔가며 한참 삽질을 한 후에야 깨달았다.&lt;/p&gt;
&lt;p&gt;커스텀 분석기를 통해 사전을 적용한 형태소분석 결과값은 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;POST my-custom-analyzer/_analyze
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;explain&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;nori&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;젤다의전설은 링크가 주인공이다.&amp;lt;/p&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;attributes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;posType&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;morphemes&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;reading&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Response 200&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;detail&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;custom_analyzer&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;charfilters&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;my_custom_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;tokens&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다의전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;positionLength&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다/NNG(General Noun)+의/NNG(General Noun)+전설/NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;COMPOUND&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;의&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;은&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;J(Ending Particle)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;J(Ending Particle)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;링크&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;가&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;J(Ending Particle)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;J(Ending Particle)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인공&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;positionLength&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인/NNG(General Noun)+공/NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;COMPOUND&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;공&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NNG(General Noun)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;이&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;VCP(Positive designator)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;VCP(Positive designator)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;E(Verbal endings)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;E(Verbal endings)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;leftPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;morphemes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;posType&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;MORPHEME&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;reading&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token null keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;rightPOS&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;SL(Foreign language)&quot;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;tokenfilters&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;필터-세팅하기-noripartof_speech&quot;&gt;&lt;a href=&quot;#%ED%95%84%ED%84%B0-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0-noripartof_speech&quot; aria-label=&quot;필터 세팅하기 noripartof_speech permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;필터 세팅하기: nori&lt;em&gt;part&lt;/em&gt;of_speech&lt;/h1&gt;
&lt;p&gt;위에 분석결과를 보면 알 수 있듯이, 한국어의 조사같은 경우는 결과값으로서 의미가 없기때문에 처음부터 분석결과에 제외하는 것이 좋다. 방금 커스터마이즈로 추가한 인덱스에 &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;필드의 값으로 필터링할 품사를 넣어주면 된다. 품사에 대한 정보는 &lt;a href=&quot;http://lucene.apache.org/core/8_0_0/analyzers-nori/org/apache/lucene/analysis/ko/POS.Tag.html&quot;&gt;루씬 API문서&lt;/a&gt;를 참조하면되고, 설명은 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-nori-speech.html&quot;&gt;nori 공식문서&lt;/a&gt;를 참고하면 된다. 하지만 생선된 인덱스를 변경하기 위해서는&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_close&lt;/code&gt;으로 인덱스를 닫은 다음&lt;/li&gt;
&lt;li&gt;PUT 메소드의 _settings 쿼리를 통해 분석기를 변경하고 &lt;/li&gt;
&lt;li&gt;filter필드를 추가하고, analyzer필드 내부에 filter값을 지정해주면 된다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;_open&lt;/code&gt;을 통해 다시 열어줘야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;POST my-custom-analyzer/_close
POST my-custom-analyzer/_settings
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;analysis&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;my_custom_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;decompound_mode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mixed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;user_dictionary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_dictionary.txt&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;nori&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;my_custom_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;nori_posfilter&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;nori_posfilter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori_part_of_speech&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;stoptags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;J&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MAG&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;SE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SF&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SH&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SP&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SSC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SSO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;SY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UNA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VCN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VCP&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VSV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token string&quot;&gt;&quot;VV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VX&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XPN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSV&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
POST my-custom-analyzer/_open&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그럼 이제 의도한대로 필터링이 되었는지 확인해보자. anlayze쿼리에 &lt;code class=&quot;language-text&quot;&gt;explain: true&lt;/code&gt;값이 있으면 필터링이 되지 않으므로 반드시 제외하고 쿼리를 날리자. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;POST my-custom-analyzer/_analyze
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;p&gt;젤다의전설은 링크가 주인공이다.&amp;lt;/p&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//Response 200&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;tokens&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다의전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;positionLength&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;젤다&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;의&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;전설&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;링크&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인공&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;positionLength&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;주인&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;token&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;공&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;start_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;end_offset&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;word&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;position&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;템플릿-생성&quot;&gt;&lt;a href=&quot;#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;템플릿 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;템플릿 생성&lt;/h1&gt;
&lt;p&gt;이제 테스트해본 설정을 그대로 인덱스 템플릿에 붙이면된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;PUT _template/kr-board-analyzer-set
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;index_patterns&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;kr-board-*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;settings&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;analysis&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;custom_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;decompound_mode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;mixed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;user_dictionary&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;user_dictionary.txt&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;custom_analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;custom_tokenizer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;custom_posfilter&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;filter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;custom_posfilter&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nori_part_of_speech&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;stoptags&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;IC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;J&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MAG&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;MM&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;NR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;SE&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SF&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SH&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SL&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SP&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SSC&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;SSO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;SY&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UNA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UNKNOWN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VCN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VCP&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VSV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token string&quot;&gt;&quot;VV&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;VX&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XPN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XR&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSN&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;XSV&quot;&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;mappings&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;obj&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;Target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;token property&quot;&gt;&quot;Contents&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;custom_analyzer&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                  &lt;span class=&quot;token property&quot;&gt;&quot;Title&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;&quot;analyzer&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;custom_analyzer&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - unassigned shard 문제 해결 (2) 노드간 버전문제]]></title><description><![CDATA[문제 Elasticsearch 홈페이지에서 공식 docker 이미지를 받아 새로운 노드가 되는 서버를 구성했는데,
그새 버전이 올라서 내가 사용하던 6.7.0이아닌 6.7.1이 설치되었다. 즉, 마스터를 포함한 두개의 서버에서는 6.7.…]]></description><link>https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-2-노드간-버전문제</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-2-노드간-버전문제</guid><category><![CDATA[elasticsearch]]></category><pubDate>Mon, 17 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;문제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제&lt;/h1&gt;
&lt;p&gt;Elasticsearch 홈페이지에서 공식 docker 이미지를 받아 새로운 노드가 되는 서버를 구성했는데,
그새 버전이 올라서 내가 사용하던 6.7.0이아닌 6.7.1이 설치되었다.&lt;/p&gt;
&lt;p&gt;즉, 마스터를 포함한 두개의 서버에서는 6.7.0 이 실행되고, 새로 추가한 서버에서만 6.7.1의 도커 이미지가 도는 상태였다.
버전간 차이는 끝 자리수 +1이니 변화도 미미하고,
실제로 실행을 해도 크게 에러메세지나 경고메세지가 발생하지 않아서 하루정도 가만히 두고 있었다.&lt;/p&gt;
&lt;h1 id=&quot;원인&quot;&gt;&lt;a href=&quot;#%EC%9B%90%EC%9D%B8&quot; aria-label=&quot;원인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;원인&lt;/h1&gt;
&lt;p&gt;그런데 추가한 노드로 샤드가 assign이 되지 않아서, 이유를 확인하려고 쿼리를 날렸다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;GET /_cluster/allocation/explain&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 쿼리를 날리면 shard정보와 cluster&lt;em&gt;info, 그리고 node 정보가 출력이 된다.
각 노드별 assign이 안되는 사유가 출력되고, 그 출력 사유가 실제 usassign에 있어서 얼만큼의 가중치(weight)를 갖는지도 표시된다. 나의 경우 node&lt;/em&gt;version이 문제였고, 새로 세팅한 6.7.1의 버전이 마스터 노드의 버전과 상이하여 샤딩이 되지 않았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;GET /_cluster/allocation/explain
&lt;span class=&quot;token comment&quot;&gt;// 생략&lt;/span&gt;
&lt;span class=&quot;token property&quot;&gt;&quot;nodeuuid2&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;final_decision&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NO&quot;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;decisions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;decider&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node_version&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;decision&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;token property&quot;&gt;&quot;explanation&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;target node version [6.7.0] is older than source node version [6.7.1]&quot;&lt;/span&gt;
                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;weight&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.3&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;해결&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;해결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결&lt;/h1&gt;
&lt;p&gt;버전을 다시 바꾸어서 ES를 실행시키자, 별도의 액션없이 천천히 샤딩이 되면서 서비스가 정상화 되었다.
정상이 된 샤드는 allocation explain쿼리에 다음과 같이 응답한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;GET /_cluster/allocation/explain
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;error&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;root_cause&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;illegal_argument_exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;unable to find any unassigned shards to explain [ClusterAllocationExplainRequest[useAnyUnassignedShard=true,includeYesDecisions?=false]&quot;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;illegal_argument_exception&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;unable to find any unassigned shards to explain [ClusterAllocationExplainRequest[useAnyUnassignedShard=true,includeYesDecisions?=false]&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Docker 로그로 서버 용량이 꽉찼을 때]]></title><description><![CDATA[문제 평소와 같이 logstash에 파이프라인을 추가하려고 서버에 들어갔다가,
자동완성을 하려고 배시에 tab…]]></description><link>https://parkdoyeon.github.io//docker-로그로-서버-용량이-꽉찼을-때</link><guid isPermaLink="false">https://parkdoyeon.github.io//docker-로그로-서버-용량이-꽉찼을-때</guid><category><![CDATA[docker]]></category><category><![CDATA[log]]></category><category><![CDATA[logrotate]]></category><category><![CDATA[container]]></category><pubDate>Mon, 17 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;문제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제&lt;/h1&gt;
&lt;p&gt;평소와 같이 logstash에 파이프라인을 추가하려고 서버에 들어갔다가,
자동완성을 하려고 배시에 tab키를 눌렀더니 다음과 같은 텍스트가 출력됐다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; p-bash: cannot create temp &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; here-document: No space left on device&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;남은 용량이 얼마나 있는지 확인하려고 &lt;code class=&quot;language-text&quot;&gt;du&lt;/code&gt;명령어를 쳤다. 보아하니 도커 디스크로 마운트된 디렉토리에 문제가 있는 것 같았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;df&lt;/span&gt; -h
Filesystem                              Size  Used Avail Use% Mounted on
udev                                    &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /dev
tmpfs                                   798M   79M  720M  &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;% /run
/dev/mapper/&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;HOST이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;--vg-root   90G  &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;.3G   82G   &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;% /
tmpfs                                   &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /dev/shm
tmpfs                                   &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;.0M     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;.0M   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /run/lock
tmpfs                                   &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;.9G   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /sys/fs/cgroup
/dev/sda1                               472M  153M  295M  &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;% /boot
tmpfs                                   798M     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;  798M   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /run/user/1003
overlay                                  90G   90G     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;% /var/lib/docker/overlay2/a5d0d5380f3e692bccb926c9fbf1c07ba6abc73db094b0e526d71aa19fd51537/merged
shm                                      64M     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;   64M   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;% /var/lib/docker/containers/ef5745582de101dddc056068c78e024388169af634315348427a80d59148a324/mounts/shm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;원인&quot;&gt;&lt;a href=&quot;#%EC%9B%90%EC%9D%B8&quot; aria-label=&quot;원인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;원인&lt;/h1&gt;
&lt;p&gt;도커의 컨테이너들로부터 출력되는 모든 로그들은 다 json파일로 파일시스템에 남는다.
즉, &lt;code class=&quot;language-text&quot;&gt;/var/lib/docker/containers/*/*.log&lt;/code&gt;와 같은 경로에 컨테이너의 ID로 된 디렉토리에 개별로 저장된다.
이 파일들은 관리가 되지 않으면 서서히 디스크 용량을 차지해서 disk full현상을 일으킬 수 있다.&lt;/p&gt;
&lt;p&gt;나의 경우, logstash의 모든 파서들이 파싱된 로그를 stdout으로 출력하다보니 며칠만에 약 90G가 넘는 로그파일때문에 3-4일만에 서버 디스크가 꽉 찼었다.
(F.Y.I. 도커로 인한 disk full이 logstash를 운영하는데 별다른 영향을 주진 않았다.)&lt;/p&gt;
&lt;h1 id=&quot;해결&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;해결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결&lt;/h1&gt;
&lt;p&gt;해결방법은 log파일 관리를 자동화 하면 되는데,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;크론으로 json파일을 삭제할수도 있고&lt;/li&gt;
&lt;li&gt;logrotate를 설치해서 실행시킬수도 있다. &lt;/li&gt;
&lt;li&gt;하지만 나는 폐쇄된 네트워크에서 서버세팅을 해야하기때문에, &lt;a href=&quot;https://docs.docker.com/config/containers/logging/configure/&quot;&gt;도커에 내장된 로그 설정&lt;/a&gt;을 통해 로그 관리 세팅을 했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;방법&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방법&lt;/h1&gt;
&lt;p&gt;참고로, 내가 채택한 3번 방법은 도커서비스와 컨테이너를 내렸다가 새로 생성해줘야 적용이 되는 번거로움이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;아래 경로로 다음과 같은 내용의 설정파일을 하나 만든다. 있으면 수정하고, 없으면 새로 만들어주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/docker/daemon.json
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;log-driver&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;json-file&quot;&lt;/span&gt;,
&lt;span class=&quot;token string&quot;&gt;&quot;log-opts&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;max-size&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;100m&quot;&lt;/span&gt;,    
    &lt;span class=&quot;token string&quot;&gt;&quot;max-file&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;3&quot;&lt;/span&gt;    
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;도커 서비스를 재시작한다 (나는 스페이스 4개로 indentation을 구분했고, 이때 쉼표를 더 입력하거나 하면 시스템이 시작하지 않으므로 주의해야한다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ systemctl restart docker&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;컨테이너를 다시 생성한다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;설정이 적용된 컨테이너의 &lt;code class=&quot;language-text&quot;&gt;/var/lib/docker/containers/*&lt;/code&gt; 디렉토리 모습이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;
9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log    checkpoints      &lt;span class=&quot;token function&quot;&gt;hostname&lt;/span&gt;  resolv.conf
9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log.1  config.v2.json   hosts     resolv.conf.hash
9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log.2  hostconfig.json  mounts&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[테스트 자동화 - (1) Appium 서버 실행하기 (+안드로이드 테스트환경 세팅)]]></title><description><![CDATA[Appium Appium은 네이티브/하이브리드/웹앱 모바일 테스트 자동화를 위한 오픈소스로,
HTTP통신을 통해 타겟 디바이스에 요청을 보내는 서버 역할을 한다.
IOS 테스트시에는 애플에서 제공하는 XCUITest Driver…]]></description><link>https://parkdoyeon.github.io//테스트-자동화-1-appium-서버-실행하기-안드로이드-테스트환경-세팅</link><guid isPermaLink="false">https://parkdoyeon.github.io//테스트-자동화-1-appium-서버-실행하기-안드로이드-테스트환경-세팅</guid><category><![CDATA[web]]></category><category><![CDATA[android]]></category><category><![CDATA[appium]]></category><category><![CDATA[test-automation]]></category><pubDate>Tue, 11 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;appium&quot;&gt;&lt;a href=&quot;#appium&quot; aria-label=&quot;appium permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Appium&lt;/h1&gt;
&lt;p&gt;Appium은 네이티브/하이브리드/웹앱 모바일 테스트 자동화를 위한 오픈소스로,
HTTP통신을 통해 타겟 디바이스에 요청을 보내는 서버 역할을 한다.
IOS 테스트시에는 애플에서 제공하는 XCUITest Driver를 통해 요청을 전달하고, Android 테스트시에는 구글에서 제공하는 UIAutomator2를 사용한다.&lt;/p&gt;
&lt;h1 id=&quot;설치&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%B9%98&quot; aria-label=&quot;설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;설치&lt;/h1&gt;
&lt;p&gt;appium은 npm을 통해 간단히 설치할 수 있다.
서비스가 돌아가기위한 환경세팅이 잘 되었는지 확인하기 위해 appium-doctor도 함께 설치하는 것이 좋다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt; npm install -g appium
&amp;gt; npm install -g appium-doctor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;환경-세팅&quot;&gt;&lt;a href=&quot;#%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;환경 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;환경 세팅&lt;/h1&gt;
&lt;p&gt;설치가 다  됐다면 명령창에서 appium-doctor을 실행해보자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; appium-doctor&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아마 몇가지 변수들이 세팅이 안됐다는 에러가 나올 것이다.
(적어도 윈도우환경에서) appium을 실행하려면 다음과 같이 환경변수를 세팅해줘야한다.
환경 세팅과 관해서는 &lt;a href=&quot;https://dejavuqa.tistory.com/222&quot;&gt;이 글&lt;/a&gt;을 참고했다.
아래의 변수 세팅내용이 이해가 어려우면 링크를 타고 들어가 순서대로 세팅하면 된다.
간략하게 정리하면 다음과 같다.&lt;/p&gt;
&lt;h4 id=&quot;시스템-변수-path에-추가해줘야-하는-내용&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B3%80%EC%88%98-path%EC%97%90-%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%98%EC%95%BC-%ED%95%98%EB%8A%94-%EB%82%B4%EC%9A%A9&quot; aria-label=&quot;시스템 변수 path에 추가해줘야 하는 내용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 변수 Path에 추가해줘야 하는 내용&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;%JAVA_HOME%\bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;%ANDROID_HOME%\emulator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;%ANDROID_HOME%\tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;%ANDROID_HOME%\platform-tools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;변수가 잘 설정되었는지 커맨드창에서 확인하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; JAVA_HOME
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; ANDROID_HOME
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; Path&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;혹시 내가 설정한 경로가 출력되지 않는다면 설정창을 확인버튼을 눌러서 잘 껐는지 확인하고,
그래도 안된다면 커맨드창을 종료했다 켜면 잘 나올 것이다.&lt;/p&gt;
&lt;h4 id=&quot;시스템-변수에-새로운-변수로-추가해줘야하는-변수&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B3%80%EC%88%98%EC%97%90-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B3%80%EC%88%98%EB%A1%9C-%EC%B6%94%EA%B0%80%ED%95%B4%EC%A4%98%EC%95%BC%ED%95%98%EB%8A%94-%EB%B3%80%EC%88%98&quot; aria-label=&quot;시스템 변수에 새로운 변수로 추가해줘야하는 변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 변수에 새로운 변수로 추가해줘야하는 변수&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;JAVA_HOME &lt;code class=&quot;language-text&quot;&gt;C:\Program Files\Java\jdk-9.0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ANDROID_HOME &lt;code class=&quot;language-text&quot;&gt;C:\Users\doyeon\AppData\Local\Android\Sdk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;경로 끝에 세미콜론을 붙이면 appium이 인식하지 못하므로, 붙이지 않도록 주의한다.&lt;/p&gt;
&lt;p&gt;각 경로는 서버의 PC환경마다 다를 수 있으므로 확인이 필요하다.
&lt;code class=&quot;language-text&quot;&gt;ANDROID_HOME&lt;/code&gt;의 경우 안드로이드 스튜디오의 &lt;code class=&quot;language-text&quot;&gt;Tools &amp;gt; SDK Manager&lt;/code&gt;에 들어가면 SDK 경로를 확인할 수 있다.
&lt;img src=&quot;/image/web/2019-06-12-appium-android.PNG&quot; alt=&quot;android&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;android-sdk-기본-세팅-설치&quot;&gt;&lt;a href=&quot;#android-sdk-%EA%B8%B0%EB%B3%B8-%EC%84%B8%ED%8C%85-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;android sdk 기본 세팅 설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Android SDK 기본 세팅 설치&lt;/h4&gt;
&lt;p&gt;환경변수가 세팅이 됐다면 안드로이드 테스트를 위해 몇가지 설치해야하는 툴들이 있다.
appium은 &lt;code class=&quot;language-text&quot;&gt;ANDROID_HOME&lt;/code&gt;변수를 통해 필요한 설치툴의 경로를 찾는다.
위 이미지 &lt;code class=&quot;language-text&quot;&gt;Tools &amp;gt; SDK Manager&lt;/code&gt; 하단에 보면 SDK Tools탭이 있다.
탭을 누르고 들어가 아래의 내용을 체크하고 확인버튼을 누르면 설치를 시작한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android Emulator&lt;/li&gt;
&lt;li&gt;Android SDK Platform-Tools&lt;/li&gt;
&lt;li&gt;Android SDK Tools&lt;/li&gt;
&lt;li&gt;Google Play Licensing Library&lt;/li&gt;
&lt;li&gt;Google USB Driver&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;세팅-완료&quot;&gt;&lt;a href=&quot;#%EC%84%B8%ED%8C%85-%EC%99%84%EB%A3%8C&quot; aria-label=&quot;세팅 완료 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세팅 완료&lt;/h3&gt;
&lt;p&gt;정상적으로 설치 되었다면 &lt;code class=&quot;language-text&quot;&gt;appium&lt;/code&gt;명령어를 입력하면 서비스가 실행될 것이다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; appium
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Appium&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Welcome to Appium v1.13.0
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Appium&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Appium REST http interface listener started on &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0:4723&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[hexo에 mathjax 적용하기]]></title><description><![CDATA[머신러닝 공부를 하다보니 수식을 입력해야하는데, 처음에는 직접 cdn을 호출해서 적용했었다. 꽤 간단하게 되는 것 같아 별도로 수정을 안하다가 어느날 로그(\(logx…]]></description><link>https://parkdoyeon.github.io//hexo에-mathjax-적용하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//hexo에-mathjax-적용하기</guid><category><![CDATA[web]]></category><category><![CDATA[hexo]]></category><category><![CDATA[mathjax]]></category><pubDate>Thu, 06 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;머신러닝 공부를 하다보니 수식을 입력해야하는데, 처음에는 직접 cdn을 호출해서 적용했었다. 꽤 간단하게 되는 것 같아 별도로 수정을 안하다가 어느날 로그(\(logx\))입력시 브라켓({})에서 띄워쓰기를 안해주니 다음과 같이 렌더링 에러가 났다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Template render error: &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;unknown path&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Line &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;, Column &lt;span class=&quot;token number&quot;&gt;244&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  expected variable end
    at Object._prettifyError &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/doyeon/Dev/blog/node_modules/nunjucks/src/lib.js:36:11&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    at Template.render &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/doyeon/Dev/blog/node_modules/nunjucks/src/environment.js:542:21&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    at Environment.renderString &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/doyeon/Dev/blog/node_modules/nunjucks/src/environment.js:380:17&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    at Promise.fromCallback.cb &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/doyeon/Dev/blog/node_modules/hexo/lib/extend/tag.js:62:48&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    at tryCatcher &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;/Users/doyeon/Dev/blog/node_modules/bluebird/js/release/util.js:16:23&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# (후략)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;구글링 하다보니 띄워쓰기가 문제가 되는 경우가 있다고 해서 브라켓에 띄워쓰기를 넣었더니 에러가 사라졌다.
이참에 종종 인라인 수식에 적용이 안되는 경우까지 해결해보려고 정석대로 hexo에 mathjax를 적용하도록 하는 글을 찾아봤다.&lt;/p&gt;
&lt;p&gt;정리가 잘 된 글이 있었지만 노드 모듈 스크립트를 직접 수정해야해서 git 저장소를 통해 여러 PC에서 포스트를 작성하는 내 입장에서는 번거로운 구석이 있었다. (node_module이 .gitignore에 있으므로)&lt;/p&gt;
&lt;p&gt;그래서 소스수정이 없는 방식을 찾다가 &lt;a href=&quot;https://linkinpark213.com/2018/04/24/mathjax/&quot;&gt;이 글&lt;/a&gt;을 찾았다.
블로그 디렉토리에 hexo-math를 다운로드 받아 사용하는 글이다. 그런데 무엇이 잘못됐는지 이상하게&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;_config내에 cdn호출 입력해도 페이지에 호출이 안되는데다,&lt;/li&gt;
&lt;li&gt;mathjax를 _config파일 최상위에 정의하는게 deprecate가 되고 있었다.&lt;/li&gt;
&lt;li&gt;게다가 함께 설치되는 hexo-inject 모듈이 더이상 업데이트가 되지 않는다는 안내가 나왔다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;알고보니 인라인에 적용이 안되는 문제는&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$ 이렇게 $ 쓰던걸 \\( 이렇게 \\) 바꾸니까 해결이 됐다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정리하면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;header영역에 cdn 호출 스크립트 직접 추가하고&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sass&quot;&gt;&lt;pre class=&quot;language-sass&quot;&gt;&lt;code class=&quot;language-sass&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;&amp;lt;script src=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML&quot;&lt;/span&gt;&lt;span class=&quot;token selector&quot;&gt;&gt;&amp;lt;/script&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수식입력하기만 바꾸는걸로.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;$$  수식 $$ # 단독입력
\\( 수식 )\\ # 인라인 입력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Deep Learning From Scratch - 2. 신경망 학습]]></title><description><![CDATA[개요 '학습'이란 훈련 데이터로부터 가중치 매개변수의 최적값을 자동으로 획득하는 것을 뜻한다. 매개변수 최적값을 학습할 수 있도록 해주는 지표는 손실함수이다. 왜 정확도가 아닌 손실함수인가? 정확도를 지표료 하면 매개변수의 미분이 대부분의 장소에서…]]></description><link>https://parkdoyeon.github.io//deep-learning-from-scratch-2-신경망-학습</link><guid isPermaLink="false">https://parkdoyeon.github.io//deep-learning-from-scratch-2-신경망-학습</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[deep-learning]]></category><pubDate>Sat, 01 Jun 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;개요&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;개요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개요&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&apos;학습&apos;이란 훈련 데이터로부터 가중치 매개변수의 최적값을 &lt;strong&gt;자동&lt;/strong&gt;으로 획득하는 것을 뜻한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;매개변수 최적값을 학습할 수 있도록 해주는 &lt;strong&gt;지표&lt;/strong&gt;는 손실함수이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;왜 정확도가 아닌 손실함수인가?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정확도를 지표료 하면 매개변수의 미분이 대부분의 장소에서 0이 되기 때문이다. (= 소숫점 단위로 표현되는 연속적인 수치값이 아닌 단절된 숫자값으로 표현되기가 쉽다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;손실함수를 최대한 작게 만들어주도록 하는 기법중 하나로, 함수의 기울기를 활용하는 것이 &apos;경사법&apos;이다.&lt;/li&gt;
&lt;li&gt;입력부터 출력까지 사람의 개입이 없다는 의미에서, 딥러닝을 종단간 기계학습(end-to-end learning)이라고 한다.&lt;/li&gt;
&lt;li&gt;한 데이터셋에만 지나치게 최적화된 상태를 &lt;strong&gt;오버피팅&lt;/strong&gt;이라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-손실함수&quot;&gt;&lt;a href=&quot;#1-%EC%86%90%EC%8B%A4%ED%95%A8%EC%88%98&quot; aria-label=&quot;1 손실함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 손실함수&lt;/h3&gt;
&lt;h4 id=&quot;11-평균-제곱-오차&quot;&gt;&lt;a href=&quot;#11-%ED%8F%89%EA%B7%A0-%EC%A0%9C%EA%B3%B1-%EC%98%A4%EC%B0%A8&quot; aria-label=&quot;11 평균 제곱 오차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.1 평균 제곱 오차&lt;/h4&gt;
&lt;p&gt;$$ E = { { 1\over2 } \sum_ { k } ( y&lt;em&gt;k-t&lt;/em&gt;k)^2 } $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(y&lt;em&gt;k\)는 신경망이 추정한 출력값, \(t&lt;/em&gt;k\)는 실제 정답레이블 값(원-핫 인코딩), k는 차원의 수를 의미한다.&lt;/li&gt;
&lt;li&gt;결과값으로 나타난 손실값의 합들이 높을수록 정답과 멀어지고, 적을수록 정답에 가깝다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;12-교차-엔트로피-오차&quot;&gt;&lt;a href=&quot;#12-%EA%B5%90%EC%B0%A8-%EC%97%94%ED%8A%B8%EB%A1%9C%ED%94%BC-%EC%98%A4%EC%B0%A8&quot; aria-label=&quot;12 교차 엔트로피 오차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.2 교차 엔트로피 오차&lt;/h4&gt;
&lt;p&gt;$$  E = - { \sum_ { k } t&lt;em&gt;k logy&lt;/em&gt;k } $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 \(logy\)는 자연로그 \(log_en\)를 취한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\(t&lt;em&gt;k\)는 원-핫 인코딩 값이므로 실질적으로 \(t&lt;/em&gt;k\)가 1일때의 \(logy_k\)을 계산한 값, 즉 정답 추정값의 자연로그를 계산하는 식이 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;여기서 정답과 거리가 먼 결과가 발생할수록(x가 1에 가까워질수록) 엔트로피 오차(loss)가 더 크게 발생한다.&lt;/li&gt;
&lt;li&gt;\(log&lt;em&gt;ex=y\)의 그래프
![log&lt;/em&gt;ex=y의 그래프](/image/ml/2019-06-02-deep2-1.png)&lt;/li&gt;
&lt;li&gt;가령 신경망 출력이 0.6일때 교차 엔트로피 오차가 \(-log0.6 = 0.51\)이라면, 0.1일때는 \(-log0.1=2.3\)이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;13-미니-배치-함수&quot;&gt;&lt;a href=&quot;#13-%EB%AF%B8%EB%8B%88-%EB%B0%B0%EC%B9%98-%ED%95%A8%EC%88%98&quot; aria-label=&quot;13 미니 배치 함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.3 미니 배치 함수&lt;/h4&gt;
&lt;p&gt;$$  E = - { 1 \over N } \sum { \sum_ { k } t&lt;em&gt;k logy&lt;/em&gt;k } $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;앞서서 구한 교차 엔트로피 오차를 모두 구해서 갯수만큼 나누면 평균 교차 엔트로피값을 구할 수 있다. 이렇게 하면 훈련 데이터 개수와 관계없이 통일된 지표를 구할 수 있다.&lt;/li&gt;
&lt;li&gt;전체 데이터가 수천 수십만개가 되면 교차 엔트로피 값을 구하는것은 무리가 있으므로 데이터 일부를 추려서 근사치로 이용할 수 있다.&lt;/li&gt;
&lt;li&gt;추려진 일부 데이터를 &lt;strong&gt;미니배치&lt;/strong&gt;라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-수치미분&quot;&gt;&lt;a href=&quot;#2-%EC%88%98%EC%B9%98%EB%AF%B8%EB%B6%84&quot; aria-label=&quot;2 수치미분 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 수치미분&lt;/h3&gt;
&lt;h4 id=&quot;21-수치미분과-오차&quot;&gt;&lt;a href=&quot;#21-%EC%88%98%EC%B9%98%EB%AF%B8%EB%B6%84%EA%B3%BC-%EC%98%A4%EC%B0%A8&quot; aria-label=&quot;21 수치미분과 오차 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.1 수치미분과 오차&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;미분방법에는 수치 미분과 해석적 미분이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;수치미분은 실제 변화량을 수치적으로 계산하는 것으로, 변화값인 h에 최대한 작은 값(보통 \(\lim_{h\to0}\)으로 표현된다.)을 대입하여 계산한다.&lt;/li&gt;
&lt;li&gt;해석적 미분은 수식적으로 미분함수를 만들어 미분값을 찾는 것을 의미한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;수치미분을 코드로직에 적용할 때 h의 최솟값을 대입하다보면 아래와 같은 문제가 발생한다.
수치미분을 구하는 파이썬 함수를 예로들면,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;numerical_diff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10e&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래와 같이 소숫점 8자리 이하부터 생략해 최종 계산값에 오차가 발생한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; np.float32&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1e-50&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;때문에 \(10^{-4}\)정도의 값을 사용할 것을 권장한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;수치미분에서 발생하는 오차는 필연적이기 때문에, 변화량이 +h인 미분과 -h인 미분의 중앙값을 구하기도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;22-편미분&quot;&gt;&lt;a href=&quot;#22-%ED%8E%B8%EB%AF%B8%EB%B6%84&quot; aria-label=&quot;22 편미분 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.2 편미분&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;편미분은 변수가 2개 이상인 경우에 사용한다. 3차원으로 그래프가 그려지므로, 미분값을 구할때는 변수 하나에 초점을 맞추고 다른 변수는 값을 고정한다.&lt;/li&gt;
&lt;li&gt;편미분한 기울기 값에 마이너스 부호를 붙이고 2차원 벡터로 표현하면 각 지점에서 낮아지는 방향을 가리킨다. &lt;/li&gt;
&lt;li&gt;이말인 즉, &lt;strong&gt;기울기가 가리키는 곳은 각 장소의 함수에서 함수의 출력 값을 가장 크게 줄이는 방향&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;23-경사법&quot;&gt;&lt;a href=&quot;#23-%EA%B2%BD%EC%82%AC%EB%B2%95&quot; aria-label=&quot;23 경사법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.3 경사법&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;경사법은 경사 하강법이라고 한다. 손실함수가 최소가 되는 값을 찾기위해 기울기를 활용하는 방법이다.&lt;/li&gt;
&lt;li&gt;기울기가 가리키는 곳에 정말 함수의 최솟값이 있는지는 보장할 수 없다. 실제로 최솟값이 없는 경우가 대부분이다.&lt;/li&gt;
&lt;li&gt;다만 그 방향으로 가야 줄일 수 있다는 사실은 확실하므로, 기울어진 방향으로 일정 거리만큼 이동해나가면서 줄이는게 경사법이라고 한다.&lt;/li&gt;
&lt;li&gt;최솟값을 찾으면 경사 하강법, 최댓값을 찾으면 경사 상승법이다. 단순히 기울기에 마이너스를 붙이냐 아니냐의 차이이므로 방법과 내용의 실질적인 차이는 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;231-경사법의-수식&quot;&gt;&lt;a href=&quot;#231-%EA%B2%BD%EC%82%AC%EB%B2%95%EC%9D%98-%EC%88%98%EC%8B%9D&quot; aria-label=&quot;231 경사법의 수식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.3.1 경사법의 수식&lt;/h3&gt;
&lt;p&gt;$$ x&lt;em&gt;0 = x&lt;/em&gt;0 - \eta { \partial f \over \partial x&lt;em&gt;0 },  x&lt;/em&gt;1 = x&lt;em&gt;1 - \eta { \partial f \over \partial x&lt;/em&gt;1 } $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\( \eta \)(eta)기호는 갱신하는 양을 나타낸다. 보통 0.01이나 0.001 등 특정값으로 정해둔다. 신경망 학습에서는 &lt;strong&gt;학습률&lt;/strong&gt;이라고 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;위의 식은 1회의 갱신이 일어나는 식이며, 만족스러운 값이 나타날때까지 갱신을 반복한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# f: 최적화 함수&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# init_x: 초기값&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# learning_rate: 학습률&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# step_num: 경사법에 따른 반복횟수 &lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;gradient_descent&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; init_x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; learning_rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; step_num&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    x&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;init_x

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;step_num&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        grad &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numerical_gradient&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;f&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        x &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; lr&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;grad
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;학습률과 같은 매개변수를 하이퍼파라미터라고 한다. 가중치/편향과 같은 신경망 매개변수와는 성질이 다른 매개변수이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - unassigned shard 문제 해결 (1) shard가 너무 많을 때]]></title><description><![CDATA[문제상황 ELK 스택을 개발하면서 운영 경험이 전무했던 나는 점진적으로 인덱스를 추가하고, 서비스에 지장이 있는 시점부터 확장을 할 계획이었다. 그리고 과거에 잠시 ES용으로 사용했던 서버 2대로 노드를 운영했다. 서버의 스펙은 아래와 같았다. RAM…]]></description><link>https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-1-shard가-너무-많을-때</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-unassigned-shard-문제-해결-1-shard가-너무-많을-때</guid><category><![CDATA[elasticsearch]]></category><category><![CDATA[shards]]></category><category><![CDATA[template]]></category><pubDate>Thu, 30 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;문제상황&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9&quot; aria-label=&quot;문제상황 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제상황&lt;/h3&gt;
&lt;p&gt;ELK 스택을 개발하면서 운영 경험이 전무했던 나는 점진적으로 인덱스를 추가하고, 서비스에 지장이 있는 시점부터 확장을 할 계획이었다. 그리고 과거에 잠시 ES용으로 사용했던 서버 2대로 노드를 운영했다. 서버의 스펙은 아래와 같았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAM: &lt;code class=&quot;language-text&quot;&gt;16G&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CPU: &lt;code class=&quot;language-text&quot;&gt;8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DISK: &lt;code class=&quot;language-text&quot;&gt;/DATA 300G, /ROOT 100G&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그런데 어느순간부터 서비스 추가할때마다 ES가 죽거나, 안정적인 상태로 돌아오기까지 너무 오랜 시간(약 4시간 정도)이 소요됐다. &lt;/p&gt;
&lt;p&gt;RAM이 문제였을까, CPU가 문제였을까(RAM이 &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/guide/current/hardware.html&quot;&gt;이상적인 권장 사양&lt;/a&gt;이 아님은 확실했다). 표면적인 징후는 bulk insert 큐가 가득 차는 문제이지만, 이는 시간이 지나거나 초기에 insert하는 데이터를 조절하면 해소가 되는 문제였다. 진짜 문제는 shard 할당에 있었다. &lt;/p&gt;
&lt;h3 id=&quot;너무-많은-샤드&quot;&gt;&lt;a href=&quot;#%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%80-%EC%83%A4%EB%93%9C&quot; aria-label=&quot;너무 많은 샤드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;너무 많은 샤드?&lt;/h3&gt;
&lt;p&gt;우선 ES에 찍힌 로그를 봤다. 샤드가 너무 많다는 메세지가 있었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#! Deprecation: In a future major version, this request will fail because this action would add [9xx] total shards,
but this cluster currently has [8xxx]/[2000] maximum shards open.
Before upgrading, reduce the number of shards in your cluster or adjust the cluster setting [cluster.max_shards_per_node].&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; ES는 워낙 버전 업이 잦은데다 위의 메세지는 deprecation 경고였기 때문에, 가볍게 여겼다. 하지만 아래의 또 다른 에러 메세지를 보고 shard 문제임을 알 수 있었다. 샤드의 할당과 라우팅이 잘 이뤄지지 않는다는 내용이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[kr-service-2019.05.25], type [index_stats], id [AV9RswFhsIL8o1ZCN3Mi],
message [UnavailableShardsException[[kr-service-2019.05.25][0] Primary shard is not active or isn&amp;#39;t assigned to a known node. Timeout: [1m], request: org.elasticsearch.action.bulk.BulkShardRequest@4f100b34]]]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ES 노드 1개의 최대 샤드의 갯수 기본 설정은 2000개이다. 노드당 샤드를 늘려주면 문제가 해결될까 해서 샤드갯수를 5000까지 늘렸다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;PUT /_cluster/settings
{
    &amp;quot;persistent&amp;quot; : {
        &amp;quot;cluster.max_shards_per_nodes&amp;quot; : 5000
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;메세지는 사라졌지만, unassigned 문제가 해소되진 않았고, ES에 할당된 메모리는 줄어들 생각을 하지 않고 80%이상으로 치고 올라왔다. 부랴부랴 ES 공식사이트에 있는 shard 관리에 대한 &lt;a href=&quot;https://www.elastic.co/kr/blog/how-many-shards-should-i-have-in-my-elasticsearch-cluster&quot;&gt;문서&lt;/a&gt;를 읽었다. 매우 중요한 팁들이 있었는대 아래와 같은 내용이었다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP: 작은 샤드는 작은 세그먼트를 만들며 부하를 증가시킵니다. 평균 샤드 크기를 최소한 수 GB와 수십 GB 사이를 유지하세요. 시간 기반 데이터를 사용한 과거 사례를 보면, 20GB ~ 40GB 정도의 사이즈가 적당합니다.
&lt;br /&gt;
TIP: 각 샤드의 부하는 세그먼트 개수와 크기에 따라 결정됩니다. forcemerge 기능을 사용하여 작은 세그먼트를 큰 세그먼트로 병합시키세요. 이 작업은 이상적으로 인덱스에 더 이상 데이터가 입력되지 않을 때 실행되어야 합니다. 그리고 무척 부하가 큰 작업이니 피크 시간을 피하여 수행해야 하는 것을 명심하세요.
&lt;br /&gt;
TIP: 하나의 노드에 저장할 수 있는 샤드의 개수는 가용한 힙의 크기와 비례하지만, Elasticsearch에서 그 크기를 제한하고 있지는 않습니다. 경험상 하나의 노드에 설정한 힙 1GB 당 20개 정도가 적당합니다. 따라서 30GB 힙을 가진 노드는 최대 600개 정도의 샤드를 가지는 것이 가능하지만, 이 보다는 적게 유지하는 것이 더 좋습니다. 일반적으로 이러한 구성은 클러스터를 건강하게 유지하는데 도움이 됩니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;요약하면 샤드의 갯수와 힙의 크기는 비례하는데, 나는 힙과 사용하는 데이터 크기(한 인덱스당 1~2G정도 사용)에 비해 지나치게 많은 샤드 할당을 하고있었다. 애초에 왜 이런 문제가 생겼는가 보니, Logstash에서 인덱스 생성시 샤드갯수가 5개로 생성되고 있었다. 기본 설정으로. (맙소사)&lt;/p&gt;
&lt;h3 id=&quot;샤드-줄이기&quot;&gt;&lt;a href=&quot;#%EC%83%A4%EB%93%9C-%EC%A4%84%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;샤드 줄이기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;샤드 줄이기&lt;/h3&gt;
&lt;p&gt;우선 생성된 샤드를 일괄로 삭제할수는 없으니, 신규 생성하는 인덱스부터 설정을 바꿔주기로 했다. 방법은 꽤 간단하다. _template 요청으로 인덱스 생성시 샤드 설정을 지정하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;GET _template/kr_shards_control
{
  &amp;quot;index_patterns&amp;quot;: &amp;quot;kr-*&amp;quot;,
  &amp;quot;settings&amp;quot;: {
    &amp;quot;number_of_shards&amp;quot;:   2
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;추가적으로 문제가 있던 시점에 추가했던 인덱스를 전부 삭제하고, 필요가 없는 오래된 인덱스도 일부 삭제했다. 그리고 데이터를 다시 받아 샤드 2개짜리로 생성했다. 30분 정도 지나니 메모리 수치도 점차 가라앉고, CPU도 안정되는 것을 확인할 수 있었다. 그리고 퇴근을 했다. 하지만 &lt;a href=&quot;/elk/elk-2019-06-18-es-version&quot;&gt;다른 문제&lt;/a&gt;가 있었는데...&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Docker/Docker Compose 설치하고 서비스 시작하기]]></title><description><![CDATA[도커 설치하기 [Docker 설치 가이드] 최초 설치시 반드시 저장소 등록(SET UP THE REPOSITORY…]]></description><link>https://parkdoyeon.github.io//docker-docker-compose-설치하고-서비스-시작하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//docker-docker-compose-설치하고-서비스-시작하기</guid><category><![CDATA[docker]]></category><category><![CDATA[install]]></category><pubDate>Wed, 29 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;도커-설치하기&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;도커 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 설치하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository&quot;&gt;Docker 설치 가이드&lt;/a&gt;] 최초 설치시 반드시 저장소 등록(SET UP THE REPOSITORY)부터 할 것!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;설치 후 자동시작이지만 혹시 서비스가 꺼져있다면 배시 통해서 도커 서비스 시작&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; docker start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;도커-서비스가-시작이-안되면--네트워크-확률이-높다&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B0%80-%EC%8B%9C%EC%9E%91%EC%9D%B4-%EC%95%88%EB%90%98%EB%A9%B4--%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%99%95%EB%A5%A0%EC%9D%B4-%EB%86%92%EB%8B%A4&quot; aria-label=&quot;도커 서비스가 시작이 안되면  네트워크 확률이 높다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 서비스가 시작이 안되면 ? 네트워크 확률이 높다&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;로그보기.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;journalctl -xe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;출력되는 로그 자세히 보면 아래와 같은 내용이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Error starting daemon: Error initionalizing network controller&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이럴땐 직접 ip 지정&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root$ &lt;span class=&quot;token function&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; name docker0 &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; bridge
root$ &lt;span class=&quot;token function&quot;&gt;ip&lt;/span&gt; addr &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; dev docker0 &lt;span class=&quot;token number&quot;&gt;172.17&lt;/span&gt;.0.1/16
root$ &lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; docker start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;docker-compose-설치하기&quot;&gt;&lt;a href=&quot;#docker-compose-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0&quot; aria-label=&quot;docker compose 설치하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Docker-Compose 설치하기&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/compose/install/#install-compose&quot;&gt;DockerCompose 설치 가이드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;서비스 시작하기 전에 엉뚱한 곳에 실행 권한을 주진 않았나 확인하자.&lt;/li&gt;
&lt;li&gt;apt install docker-compose명령어로 설치하면 구버전(2.2)이 설치된다. 최신버전인 3.2로 설치하기위해선 설치가이드 따르는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElastAlert - 유용한 규칙 종류]]></title><description><![CDATA[ElastAlert은 조건에 따라 Elasticsearch에서 발생하는 문서에 대한 알럿을 보내주는 오픈소스이다. 각각의 규칙(Rule) yml파일을 생성하면 지정한 Rule 디렉토리에 있는 설정대로 ES…]]></description><link>https://parkdoyeon.github.io//elast-alert-유용한-규칙-종류</link><guid isPermaLink="false">https://parkdoyeon.github.io//elast-alert-유용한-규칙-종류</guid><category><![CDATA[elk]]></category><category><![CDATA[elastalert]]></category><category><![CDATA[elasticsearch]]></category><pubDate>Tue, 28 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/Yelp/elastalert&quot;&gt;ElastAlert&lt;/a&gt;은 조건에 따라 Elasticsearch에서 발생하는 문서에 대한 알럿을 보내주는 오픈소스이다. 각각의 규칙(Rule) yml파일을 생성하면 지정한 Rule 디렉토리에 있는 설정대로 ES에 쿼리하는 구조로,
직접 파일을 생성해서 관리해줄수도 있고, Kibana에 ElastAlert 플러그인을 추가해서 규칙 관리를 할수도 있다. &lt;/p&gt;
&lt;p&gt;규칙은 다양한 타입이 있는데, ELK 로그 스택을 운영하면서 가장 많이 활용했던 Rule타입은 아래와 같다. 전반적인 내용은 &lt;a href=&quot;https://elastalert.readthedocs.io/en/latest/ruletypes.html&quot;&gt;공식문서&lt;/a&gt;를 참조하면된다.&lt;/p&gt;
&lt;h2 id=&quot;cardinality-특정-필드의-값의-종류를-제한하고싶을때&quot;&gt;&lt;a href=&quot;#cardinality-%ED%8A%B9%EC%A0%95-%ED%95%84%EB%93%9C%EC%9D%98-%EA%B0%92%EC%9D%98-%EC%A2%85%EB%A5%98%EB%A5%BC-%EC%A0%9C%ED%95%9C%ED%95%98%EA%B3%A0%EC%8B%B6%EC%9D%84%EB%95%8C&quot; aria-label=&quot;cardinality 특정 필드의 값의 종류를 제한하고싶을때 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cardinality: 특정 필드의 값의 종류를 제한하고싶을때&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; gender alert
&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; cardinality

&lt;span class=&quot;token key atrule&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; customer&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;%Y.%m.%d
&lt;span class=&quot;token key atrule&quot;&gt;use_strftime_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;cardinality_field&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gender&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 제약을 두고싶은 필드&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 종류의 갯수(반대로 최소값을 설정하고싶으면 min_cardinality으로 세팅)&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;max_cardinality&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2  &lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;alert_subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;남/녀 외의 또 다른 필드값 발생!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;metric_aggregation-특정-값의-발생-빈도를-카운팅하고싶을-때&quot;&gt;&lt;a href=&quot;#metric_aggregation-%ED%8A%B9%EC%A0%95-%EA%B0%92%EC%9D%98-%EB%B0%9C%EC%83%9D-%EB%B9%88%EB%8F%84%EB%A5%BC-%EC%B9%B4%EC%9A%B4%ED%8C%85%ED%95%98%EA%B3%A0%EC%8B%B6%EC%9D%84-%EB%95%8C&quot; aria-label=&quot;metric_aggregation 특정 값의 발생 빈도를 카운팅하고싶을 때 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;metric_aggregation: 특정 값의 발생 빈도를 카운팅하고싶을 때&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; sql data
&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; metric_aggregation

&lt;span class=&quot;token key atrule&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inserted&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;%Y.%m.%d
&lt;span class=&quot;token key atrule&quot;&gt;use_strftime_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;metric_agg_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pk-field&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 카운팅 하고싶은 대상 필드의 이름&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;metric_agg_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; value_count &lt;span class=&quot;token comment&quot;&gt;# value가 되는 값의 count를 한다는 것을 의미, 숫자크기와 같은 다른 방식의 카운팅방법 지정도 가능하다.&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;query_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pk-field.keyword&quot;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 대상으로 할 value에 대한 쿼리를 넣어주면 된다 &lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;max_threshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1 &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# 내 경우 중복이 발생하면 무조건 알럿이 와야하므로 최대 갯수는 1개.&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;doc_type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; doc

&lt;span class=&quot;token key atrule&quot;&gt;alert_subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;pk-field에 중복된 값이 있습니다.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;any-어떤-문서든-발생하면-바로&quot;&gt;&lt;a href=&quot;#any-%EC%96%B4%EB%96%A4-%EB%AC%B8%EC%84%9C%EB%93%A0-%EB%B0%9C%EC%83%9D%ED%95%98%EB%A9%B4-%EB%B0%94%EB%A1%9C&quot; aria-label=&quot;any 어떤 문서든 발생하면 바로 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;any: 어떤 문서든 발생하면 바로!&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Fatal Error
&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; any

&lt;span class=&quot;token key atrule&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fatal&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;%Y.%m.%d
&lt;span class=&quot;token key atrule&quot;&gt;use_strftime_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;&quot;log.level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fatal&quot;

&lt;span class=&quot;token key atrule&quot;&gt;alert_subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fatal 에러가 발생했습니다.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;frequency-특정-갯수-이상의-문서가-발생했을때&quot;&gt;&lt;a href=&quot;#frequency-%ED%8A%B9%EC%A0%95-%EA%B0%AF%EC%88%98-%EC%9D%B4%EC%83%81%EC%9D%98-%EB%AC%B8%EC%84%9C%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%96%88%EC%9D%84%EB%95%8C&quot; aria-label=&quot;frequency 특정 갯수 이상의 문서가 발생했을때 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;frequency: 특정 갯수 이상의 문서가 발생했을때&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Web Error Alert
&lt;span class=&quot;token key atrule&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; frequency

&lt;span class=&quot;token key atrule&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; web&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;%Y.%m.%d
&lt;span class=&quot;token key atrule&quot;&gt;use_strftime_index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 10분간 20번의 에러 로그가 발생하면 알럿&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;num_events&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;timeframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;query_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;&quot;fields.level&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; error&quot;

&lt;span class=&quot;token key atrule&quot;&gt;alert_subject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;지속적인 에러가 발생했습니다.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[TDD - Jenkins에 Python 환경세팅하고 테스트 대시보드 Allure Report 연동하기]]></title><description><![CDATA[Jekins에 파이썬 세팅하기 System Configuration > Global Properties > Environment Variables…]]></description><link>https://parkdoyeon.github.io//tdd-jenkins에-python-환경세팅하고-테스트-대시보드-allure-report-연동하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//tdd-jenkins에-python-환경세팅하고-테스트-대시보드-allure-report-연동하기</guid><category><![CDATA[python]]></category><category><![CDATA[jenkins]]></category><category><![CDATA[tdd]]></category><pubDate>Mon, 27 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;jekins에-파이썬-세팅하기&quot;&gt;&lt;a href=&quot;#jekins%EC%97%90-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0&quot; aria-label=&quot;jekins에 파이썬 세팅하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jekins에 파이썬 세팅하기&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;System Configuration &gt; Global Properties &gt; Environment Variables 체크&lt;/li&gt;
&lt;li&gt;이름: &lt;code class=&quot;language-text&quot;&gt;PYTHON_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;값: &lt;code class=&quot;language-text&quot;&gt;C:\Python\Python36;C:\Python\Python36\Scripts;&lt;/code&gt; (젠킨스가 돌아가는 호스트 환경변수에 세팅된 파이썬 경로 입력)&lt;/li&gt;
&lt;li&gt;프로젝트 생성 &gt; 구성 &gt; General 탭 &gt; Build &gt; Add build step&lt;/li&gt;
&lt;li&gt;윈도우라면 Execute Windows Batch Command 선택하고 아래의 스크립트 추가&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패키지 변경감지를 위해 파이썬 가상환경을 세팅하고 pip install 세팅&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;SET &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;%,%PYTHON_PATH%
virtualenv venv
call venv/Scripts/activate.bat
pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -r requirements.txt
py.test --alluredir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;./allure-results &lt;span class=&quot;token comment&quot;&gt;# pytest의 allure report 결과 생성을 위한 디렉토리 설정&lt;/span&gt;
deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;jenkins에-allure-report-세팅&quot;&gt;&lt;a href=&quot;#jenkins%EC%97%90-allure-report-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;jenkins에 allure report 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins에 Allure Report 세팅&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;플러그인 관리 &gt; 설치가능탭 &gt; Allure Jenkins Plugin 설치&lt;/li&gt;
&lt;li&gt;프로젝트 생성 &gt; 구성 &gt; General 탭 &gt; Build &gt; 빌드 후 조치 &gt; 빌드 후 조치 추가&lt;/li&gt;
&lt;li&gt;Allure Report 선택 후, 위의 py.test에 파라미터로 넘긴 allure-results path를 넣어준다.
&lt;img src=&quot;/image/python/2019-05-28-jekins-to-pytest-1.PNG&quot; alt=&quot;jenkins&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;jenkins-빌드-실행하기&quot;&gt;&lt;a href=&quot;#jenkins-%EB%B9%8C%EB%93%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0&quot; aria-label=&quot;jenkins 빌드 실행하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Jenkins 빌드 실행하기&lt;/h1&gt;
&lt;p&gt;빌드를 실행하면 대시보드에 다음과 같은 그래프가 생성된다. 그래프에는 테스트 성공케이스와 실패 케이스가 표시되어있다. 빌드 히스토리에는 케이스별 Allure-Report를 조회할 수 있는 아이콘이 생긴다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/python/2019-05-28-jekins-to-pytest-3.PNG&quot; alt=&quot;jenkins&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;allure-report&quot;&gt;&lt;a href=&quot;#allure-report&quot; aria-label=&quot;allure report permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Allure Report&lt;/h1&gt;
&lt;p&gt;Allure Report 페이지에 들어가면 더 자세한 테스트 현황 그래프가 조회된다. Suites에 들어가면 케이스별 테스트 정보가 확인된다.&lt;/p&gt;
&lt;p&gt;작성했던 테스트 코드 내에서 저장한 스크린샷도 테스트 함수 단위로 함께 첨부된 것을 볼 수 있다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[TDD - 셀레니움과 pytest로 브라우저 테스트 코드 작성하기]]></title><description><![CDATA[디렉토리 구조 pytest 샘플 프로젝트 구조는 이렇다. allure 라이브러리를 연동해서 부가적으로 allure-results 디렉토리가 생성되어있다. pytest 관련 파일을 설명하면 아래와 같다. conftest.py…]]></description><link>https://parkdoyeon.github.io//tdd-셀레니움과-pytest로-브라우저-테스트-코드-작성하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//tdd-셀레니움과-pytest로-브라우저-테스트-코드-작성하기</guid><category><![CDATA[python]]></category><category><![CDATA[selenium]]></category><category><![CDATA[pytest]]></category><category><![CDATA[tdd]]></category><pubDate>Mon, 27 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;디렉토리-구조&quot;&gt;&lt;a href=&quot;#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;디렉토리 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디렉토리 구조&lt;/h1&gt;
&lt;p&gt;pytest 샘플 프로젝트 구조는 이렇다. allure 라이브러리를 연동해서 부가적으로 allure-results 디렉토리가 생성되어있다. pytest 관련 파일을 설명하면 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;D:.
│  conftest.py &lt;span class=&quot;token comment&quot;&gt;# 파이테스트에서 공통적으로 사용할 객체들을 구현한 모듈&lt;/span&gt;
│  inspection_test.py &lt;span class=&quot;token comment&quot;&gt;# 브라우저를 테스트하는 클래스/함수가 구현된 모듈&lt;/span&gt;
│  requirements.txt &lt;span class=&quot;token comment&quot;&gt;# pip으로 설치된 패키지 리스트&lt;/span&gt;
│
├─allure-results
├─bin
│      chromedriver72.exe
│      IEDriverServer.exe
├─venv
└─__pycache__&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;conftestpy-공통-객체-설정하기&quot;&gt;&lt;a href=&quot;#conftestpy-%EA%B3%B5%ED%86%B5-%EA%B0%9D%EC%B2%B4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;conftestpy 공통 객체 설정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;conftest.py: 공통 객체 설정하기&lt;/h1&gt;
&lt;p&gt;pytest는 conftest.py라는 이름을 가진 스크립트에서 터미널 실행시 지정할 옵션값을 설정하거나,
각 테스트 함수에서 공통으로 사용하는 오브젝트(가령 셀레니움에서 사용할 브라우저 엔진같은)를 생성할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pytest
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; allure

&lt;span class=&quot;token comment&quot;&gt;# 터미널 옵션 설정&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pytest_addoption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;parser&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 아래에서 params 값에 세팅해줄 예정이니 패스&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# parser.addoption(&quot;--driver&quot;, action=&quot;store&quot;, default=&quot;chrome&quot;, help=&quot;Type in browser type&quot;)&lt;/span&gt;
    parser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;addoption&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;--url&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; action&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;store&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; default&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://test.website.co.kr&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# @pytest.fixture 데코레이터를 통해 리스트 형식인 파라미터를 넘기면,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# params값이 루프를 돌면서 인자 순서대로 함수가 여러번 호출된다.&lt;/span&gt;
&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fixture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; scope&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;class&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;driver_get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;request&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; webdriver
    
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;param &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        web_driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Chrome&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bin/chromedriver72.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;param &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ie&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        web_driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Ie&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bin/IEDriverServer.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    
    request&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cls&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; web_driver
    &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# yield 예약어를 통해 web_driver사용을 일시적으로 브라우저 엔진을 반환한다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;inspection_testpy-테스트-함수를-만드는-클래스-모듈&quot;&gt;&lt;a href=&quot;#inspection_testpy-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%AA%A8%EB%93%88&quot; aria-label=&quot;inspection_testpy 테스트 함수를 만드는 클래스 모듈 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;inspection_test.py: 테스트 함수를 만드는 클래스 모듈&lt;/h1&gt;
&lt;p&gt;pytest를 실행하면 conftest.py에서 설정을 읽은 후 test가 접두어로 붙은 함수를 차례대로 호출한다.
이때, 호출 데코레이터에 파라미터를 지정해놓으면, 앞에서 설명한 conftest.py의 fixture 파라미터 처럼 값을 순차적으로 순회하면서 함수를 여러번 실행시킨다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; pytest
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; selenium
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; allure
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;support&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ui &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; WebDriverWait
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;support &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; expected_conditions &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; EC
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;webdriver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;by &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; By
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; selenium&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;common &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; exceptions &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; ex

&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; dao

@pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;usefixtures&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;driver_get&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestInspection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_targets&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 타겟에 해당하는 튜플값을 반환하는 함수&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;# 데코레이터에서 직접 호출해도 된다.&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; targets
        
    @pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parametrize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;url, title&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; get_targets&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;test_search_inspection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; url&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        wait &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; WebDriverWait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;# 해당 ID값을 가진 태그가 화면에 등장하지 않으면 pytest의 결과를 통해 확인할 익셉션을 발생시킨다&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; pytest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;raises&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ex&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TimeoutException&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
            wait&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;until&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;EC&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;visibility_of_element_located&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;By&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ID&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alertSiteInspection&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;token comment&quot;&gt;# allure report에 화면 스크린샷을 남긴다.&lt;/span&gt;
        screenshot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;data/&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.png&quot;&lt;/span&gt;
        self&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;save_screenshot&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;screenshot&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        allure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attach&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;screenshot&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; title&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.png&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; attachment_type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;allure&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;attachment_type&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PNG&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ssms 사용할때 자주쓰는 명령어 정리]]></title><description><![CDATA[SP 내용 보기 특정 구문이 포함되어있는 SP 찾기 (특정 테이블이나 컬럼을 사용하는 SP를 찾을때 유용하다) 프로파일러 잡을때 DB ID…]]></description><link>https://parkdoyeon.github.io//ssms-사용할때-자주쓰는-명령어-정리</link><guid isPermaLink="false">https://parkdoyeon.github.io//ssms-사용할때-자주쓰는-명령어-정리</guid><category><![CDATA[mssql]]></category><category><![CDATA[insert]]></category><pubDate>Sun, 26 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;SP 내용 보기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;sp_helptext &lt;span class=&quot;token string&quot;&gt;&apos;[sp 이름]&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;특정 구문이 포함되어있는 SP 찾기 (특정 테이블이나 컬럼을 사용하는 SP를 찾을때 유용하다)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; sys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;procedures p &lt;span class=&quot;token keyword&quot;&gt;join&lt;/span&gt; sys&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;syscomments s &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;object_id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;%[문자열]%&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;프로파일러 잡을때 DB ID 확인이 필요한경우&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;select&lt;/span&gt; db_id&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;[db 이름]&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;도구 &gt; 옵션 &gt; 키보드 &gt; 쿼리 바로가기에서 아래처럼 키보드 단축키로 설정하고 사용하면 좋다.
&lt;img src=&quot;/image/sql/2019-05-27-ssms-1.png&quot; alt=&quot;옵션&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sp_lock : sp들의 점유상태를 보고싶을 때&lt;/li&gt;
&lt;li&gt;sp_who : DB 로그인 정보와 호스트 확인&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Deep Learning From Scratch - 1. 퍼셉트론과 신경망]]></title><description><![CDATA[1. 퍼셉트론 뉴런에서 보내온 신호 총합이 정해진 한계(임계값)를 넘어서면 1, 아니면 0을 출력하는게 기본 원리. 신호는 가중치값 \(w…]]></description><link>https://parkdoyeon.github.io//deep-learning-from-scratch-1-퍼셉트론과-신경망</link><guid isPermaLink="false">https://parkdoyeon.github.io//deep-learning-from-scratch-1-퍼셉트론과-신경망</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[deep-learning]]></category><pubDate>Sun, 26 May 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-퍼셉트론&quot;&gt;&lt;a href=&quot;#1-%ED%8D%BC%EC%85%89%ED%8A%B8%EB%A1%A0&quot; aria-label=&quot;1 퍼셉트론 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 퍼셉트론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;뉴런에서 보내온 신호 총합이 정해진 한계(임계값)를 넘어서면 1, 아니면 0을 출력하는게 기본 원리.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;신호는 가중치값 \(w\)와 곱한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전류에서 말하는 저항을 생각하면 된다.&lt;/li&gt;
&lt;li&gt;가중치가 높으면 신호가 크고, 가중치가 낮으면 신호가 낮다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;활성화를 조정하는 상수 편향값 \(b\)를 더한다.&lt;/li&gt;
&lt;li&gt;한계: AND, NAND(Not And: And의 반대 진리표), OR의 연산 구현이 가능하지만, XOR 게이트는 구현할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-다층-퍼셉트론&quot;&gt;&lt;a href=&quot;#2-%EB%8B%A4%EC%B8%B5-%ED%8D%BC%EC%85%89%ED%8A%B8%EB%A1%A0&quot; aria-label=&quot;2 다층 퍼셉트론 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 다층 퍼셉트론&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;선형구조인 퍼셉트론의 대안으로, 다층적으로 구현하는 퍼셉트론을 말한다.&lt;/li&gt;
&lt;li&gt;다층 퍼셉트론의 NAND 연산만으로 컴퓨터를 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-신경망&quot;&gt;&lt;a href=&quot;#3-%EC%8B%A0%EA%B2%BD%EB%A7%9D&quot; aria-label=&quot;3 신경망 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 신경망&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;입력층, 은닉층, 출력층으로 구성되어있다.&lt;/li&gt;
&lt;li&gt;두개의 신호 \(w&lt;em&gt;1\), \(w&lt;/em&gt;2\)와 편향값 b가 있다고 가정할때, 다음과 같이 표현할 수 있다.
$$ y= h(b+w&lt;em&gt;1x&lt;/em&gt;1+w&lt;em&gt;2x&lt;/em&gt;2) $$&lt;/li&gt;
&lt;li&gt;여기서 출력값 y를 도출하는 h(a)로 표현되는 함수는 활성화 함수라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;31-활성화-함수&quot;&gt;&lt;a href=&quot;#31-%ED%99%9C%EC%84%B1%ED%99%94-%ED%95%A8%EC%88%98&quot; aria-label=&quot;31 활성화 함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.1 활성화 함수&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;활성화 함수는 신호의 총합을 출력의 신호로 변환하는 함수를 말한다.&lt;/li&gt;
&lt;li&gt;신경망은 활성화 함수를 통해 신호를 변환하고, 그 변환된 신호를 다음 뉴런에 전달한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;책에서는 활성화 함수로 세 가지를 소개한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;계단함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력이 0을 넘으면 1을, 그 외에는 0을 출력하는 함수이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시그모이드 함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시그모이드 함수는 아래의 공식을 나타내며, e는 자연상수이다.
$$ h(x)= {1 \over 1+exp(-x)}$$
$$  exp(-x) = e^{-x}, e=2.7182... $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ReLU 함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력이 0을 넘으면 그 입력을 그대로 출력하고, 0이하면 0을 출력하는 함수이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;세 함수는 공통적으로 비선형 함수이고, 신경망에서는 활성화 함수로 비선형 함수를 사용해야한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선형함수를 이용하면 미분값이 값이 상수가 되며, 변화량이 상수면 신경망 층을 깊게하는 의미가 없어지기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;32-출력층-설계하기&quot;&gt;&lt;a href=&quot;#32-%EC%B6%9C%EB%A0%A5%EC%B8%B5-%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;32 출력층 설계하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.2 출력층 설계하기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기계학습은 분석(classification, 입력데이터를 구분), 회귀(regression, 입력데이터에서 연속적인 수치 예측)따라 활성화 함수를 달리쓴다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;두가지를 소개한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;항등함수&lt;/li&gt;
&lt;li&gt;회귀에서 주로 사용한다. 입력을 그대로 출력함.&lt;/li&gt;
&lt;li&gt;소프트맥스&lt;/li&gt;
&lt;li&gt;분류에서 주로 사용한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;분자는 입력신호의 지수함수, 분모는 n개의 모든 입력신호의 지수함수의 합으로 구성된다
$$  y&lt;em&gt;k = {exp(a&lt;/em&gt;k) \over \sum_ {i=0}^n exp(a_i)} $$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;분모의 값을 보면 모든 출력층의 뉴런이 모든 신호로부터 영향을 받는 것을 알 수 있다.&lt;/li&gt;
&lt;li&gt;소프트 맥스 함수는 코드 구현시 지수값으로 인한 오버플로 문제가 있다. 이를 개선하기 위해 입력신호중 최대값을 뺀다.&lt;/li&gt;
&lt;li&gt;아래의 식을 보면 어떤값을 더하거나 뺴도 결과값은 동일하다는 것을 보여준다.
$$  y&lt;em&gt;k = {exp(a&lt;/em&gt;k) \over \sum_ {i=0}^n exp(a&lt;em&gt;i)} = {Cexp(a&lt;/em&gt;k) \over C\sum_ {i=0}^n exp(a&lt;em&gt;i)}  $$
\(exp(n)\)는 지수함수이므로 C를 지수식에 밑이 e인 자연로그($log&lt;/em&gt;e$)으로 취하면 덧셈식에 넣을 수 있다.
$$  = {exp(a&lt;em&gt;k+logC) \over \sum&lt;/em&gt; {i=0}^n exp(a&lt;em&gt;i+logC)} = {exp(a&lt;/em&gt;k+C&apos;) \over \sum_ {i=0}^n exp(a_i+C&apos;)}$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;소프트 맥스 함수의 출력은 0부터 1사이의 실수이며, 그렇기 때문에 출력을 확률로 해석할 수 있다.&lt;/li&gt;
&lt;li&gt;\(y=exp(x)\)형식의 단조 증가함수이므로 원소간의 대소관계가 바뀌지는 않는다.&lt;/li&gt;
&lt;li&gt;그렇기 떄문에 지수함수 계산에 드는 자원 낭비를 줄이기 위해 현업에서는 출력층의 소프트맥스 함수를 생략하기도 한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Hyper-V - 네트워크 환경세팅하기]]></title><description><![CDATA[네트워크를 설정할 가상컴퓨터를 누르고 오른쪽 작업란에 가상 스위치 관리자버튼 클릭 외부/내부/개인 중에 '내부'로 두가지 생성 외부: 호스트PC와 동위선상에서 네트워킹 내부: 호스트PC…]]></description><link>https://parkdoyeon.github.io//hyper-v-네트워크-환경세팅하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//hyper-v-네트워크-환경세팅하기</guid><category><![CDATA[hyper-v]]></category><category><![CDATA[network]]></category><pubDate>Sun, 28 Apr 2019 15:00:00 GMT</pubDate><content:encoded>&lt;ol&gt;
&lt;li&gt;네트워크를 설정할 가상컴퓨터를 누르고 오른쪽 작업란에 가상 스위치 관리자버튼 클릭&lt;/li&gt;
&lt;li&gt;외부/내부/개인 중에 &apos;내부&apos;로 두가지 생성&lt;/li&gt;
&lt;li&gt;외부: 호스트PC와 동위선상에서 네트워킹&lt;/li&gt;
&lt;li&gt;내부: 호스트PC 네트워크를 타고 분기&lt;/li&gt;
&lt;li&gt;외부/내부 두가지 방법으로 설정 다 가능하다. 다만 사내망 정책에 따라 외부로 설정하면 간혹 안되는 경우가 있으니 안전하게 내부로 설정하자&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여러개의 Hyper V 가상 PC가 있다면 &apos;내부용 스위치&apos;로 외부통신을 위한 공유네트워크 카드 하나, 호스트통신 전용으로 하나 해서 스위치 두개를 만든다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/network/interfaces&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/image/dev-env/2019-04-29-hyperv1.jpeg&quot; alt=&quot;설정 화면&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;제어판&gt;네트워크 및 인터넷&gt;네트워크 연결에 들어가서 이더넷(호스트PC의 네트워크)의 속성&gt;공유 클릭&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다른네트워크 사용자가 연결할수 있도록 허용체크, 홈네트워킹으로 &quot;공유네트워크&quot;를 설정해준다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/dev-env/2019-04-29-hyperv2.png&quot; alt=&quot;설정 화면2&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가상머신의 터미널에서 ifconfig를 입력하면 eith0(공유네트워크)는 DHCP를 통해 자동으로 IP가 생성되는 한편, eith1은 아직 IP를 할당받지 못한 상태&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/dev-env/2019-04-29-hyperv3.jpeg&quot; alt=&quot;IP Table&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래의 명령어로 네트워크 설정 파일에 eth1의 고정ip를 다음과 같이 입력해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; /etc/network/interfaces&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/image/dev-env/2019-04-29-hyperv4.png&quot; alt=&quot;IP Table2&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네트워크 재시작 하면 끝~&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; systemctl restart networking.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Python 독립실행환경 virtualenv 만들기]]></title><description><![CDATA[virtaulenv를 통해 활상화된 가상환경 아래에서 개발하면,
파이썬 실행환경을 독립적으로 관리할 수 있는 것은 물론이고, 모듈관리를 체계적으로 할 수 있다. pip 인스톨을 통해 virtualenv…]]></description><link>https://parkdoyeon.github.io//python-독립실행환경-virtualenv-만들기</link><guid isPermaLink="false">https://parkdoyeon.github.io//python-독립실행환경-virtualenv-만들기</guid><category><![CDATA[python]]></category><category><![CDATA[venv]]></category><category><![CDATA[pip]]></category><pubDate>Wed, 17 Apr 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;virtaulenv를 통해 활상화된 가상환경 아래에서 개발하면,
파이썬 실행환경을 독립적으로 관리할 수 있는 것은 물론이고, 모듈관리를 체계적으로 할 수 있다.&lt;/p&gt;
&lt;p&gt;pip 인스톨을 통해 virtualenv를 설치하고,
해당 프로젝트 경로에서 virtualenv 명령어를 통해 가상환경 이름을 명명하면
해당 디렉토리에 가상환경 디렉토리가 생성된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; virtualenv
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;프로젝트 폴더&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
virtualenv venv&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;가상환경-활성화하기&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%98%EA%B8%B0&quot; aria-label=&quot;가상환경 활성화하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상환경 활성화하기&lt;/h1&gt;
&lt;p&gt;윈도우와 리눅스 활성화 방식이 조금씩 다르다. 위에가 윈도우고 아래가 리눅스 실행 명령어이다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;venv/scripts/activate
&lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; venv/bin/activate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;비활성화-하기&quot;&gt;&lt;a href=&quot;#%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;비활성화 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비활성화 하기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;deactivate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;패키지-정리-파일-만들기&quot;&gt;&lt;a href=&quot;#%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%A0%95%EB%A6%AC-%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;패키지 정리 파일 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;패키지 정리 파일 만들기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;pip freeze &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; requirement.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Git - 실수로 용량이 큰 파일을 커밋했을 때]]></title><description><![CDATA[회사에서 gitlab을 쓰면서 쾌적한 git life를 즐기다가 github에서는 100MB이상의 파일이 푸시가 안된다는 것을 알았다.
R…]]></description><link>https://parkdoyeon.github.io//git-실수로-용량이-큰-파일을-커밋했을-때</link><guid isPermaLink="false">https://parkdoyeon.github.io//git-실수로-용량이-큰-파일을-커밋했을-때</guid><category><![CDATA[git]]></category><category><![CDATA[filter-branch]]></category><pubDate>Sat, 06 Apr 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;회사에서 gitlab을 쓰면서 쾌적한 git life를 즐기다가 github에서는 100MB이상의 파일이 푸시가 안된다는 것을 알았다.
R 스터디 할때 써놓은 코드를 기록하려고 데이터와 함께 커밋을 해버렸는데, 커밋때 경고가 한번 떴(던거같은데)다가 푸시할때도 아래와 같은 에러를 뱉으며 push fail이 일어났다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--force 명령어에도 푸시가 안돼서 찾아보니, filter-branch를 통해 커밋 히스토리에서 삭제해야한다고.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; filter-branch --tree-filter &lt;span class=&quot;token string&quot;&gt;&apos;rm -f path/to/bigRdata/biggy.sav&apos;&lt;/span&gt; HEAD
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; push origin master --force&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;필터 브랜치 명령어에서 삭제할 데이터의 path는 git bash에서 접근한 경로기준으로 (보통은 git의 루트디렉토리) 입력하면 된다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - 도커를 이용해 인덱스 주기적으로 삭제하기]]></title><description><![CDATA[로그를 끊임없이 ES에 저장하다보면 디스크 용량이 부족한 문제가 발생한다. 수동으로 인덱스를 삭제하다보면 단순히 번거로울 뿐만이 아니라 삭제하지 않으려고 했던 인덱스도 삭제될 수 있기 때문에, 삭제 자동화는 ES 운영에 반드시 필요하다. curator…]]></description><link>https://parkdoyeon.github.io//elastic-search-도커를-이용해-인덱스-주기적으로-삭제하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-도커를-이용해-인덱스-주기적으로-삭제하기</guid><category><![CDATA[elasticsearch]]></category><category><![CDATA[docker]]></category><category><![CDATA[curator]]></category><category><![CDATA[index]]></category><pubDate>Mon, 01 Apr 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;로그를 끊임없이 ES에 저장하다보면 디스크 용량이 부족한 문제가 발생한다.&lt;br&gt;
수동으로 인덱스를 삭제하다보면 단순히 번거로울 뿐만이 아니라 삭제하지 않으려고 했던 인덱스도 삭제될 수 있기 때문에, 삭제 자동화는 ES 운영에 반드시 필요하다.&lt;br&gt;
curator는 elasticsearch의 인덱스를 관리를 위한 어플리케이션으로, ES와 격리된 환경에서 http 통신으로 동작이 가능하다.&lt;/p&gt;
&lt;p&gt;여기에는 인덱스 삭제만 나와있지만, 샤드의 삭제나 엘라스틱서치의 스냅샷 삭제, 샤드 라우팅 변경도 가능하다.
나의 경우 curator를 세팅할 서버는 폐쇄된 환경이었기 때문에,
로컬에서 curator 공식사이트의 dockerfile을 받아 이미지를 빌드한 다음,
이미지를 파일로 압축해 서버에 세팅하고 cronjob을 통해 매일 인덱스 삭제작업을 진행하도록 했다.&lt;/p&gt;
&lt;h4 id=&quot;docker-image-빌드&quot;&gt;&lt;a href=&quot;#docker-image-%EB%B9%8C%EB%93%9C&quot; aria-label=&quot;docker image 빌드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;docker image 빌드&lt;/h4&gt;
&lt;p&gt;github에 올라와있는 dockerfile을 다운받아 빌드한다 &lt;a href=&quot;https://github.com/elastic/curator&quot;&gt;https://github.com/elastic/curator&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker build &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;큐레이터-기본-설정파일-생성하기-curatoryml&quot;&gt;&lt;a href=&quot;#%ED%81%90%EB%A0%88%EC%9D%B4%ED%84%B0-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0-curatoryml&quot; aria-label=&quot;큐레이터 기본 설정파일 생성하기 curatoryml permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;큐레이터 기본 설정파일 생성하기: curator.yml&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; elasticsearch
  &lt;span class=&quot;token key atrule&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9200&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;url_prefix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;use_ssl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;certificate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;client_cert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;client_key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;ssl_no_validate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;token key atrule&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;http_auth&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;master_only&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;token key atrule&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;loglevel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; INFO
  &lt;span class=&quot;token key atrule&quot;&gt;logfile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; /volume/curator.log &lt;span class=&quot;token comment&quot;&gt;#로그 디렉토리 설정, 어플리케이션 수행 &lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;logformat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; default
  &lt;span class=&quot;token key atrule&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;elasticsearch&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;urllib3&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;인덱스-삭제-규칙파일-생성하기-delete-indicesyml&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EB%8D%B1%EC%8A%A4-%EC%82%AD%EC%A0%9C-%EA%B7%9C%EC%B9%99%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0-delete-indicesyml&quot; aria-label=&quot;인덱스 삭제 규칙파일 생성하기 delete indicesyml permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인덱스 삭제 규칙파일 생성하기: delete-indices.yml&lt;/h4&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token key atrule&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; delete_indices
    &lt;span class=&quot;token key atrule&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;ignore_empty_list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;True&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;disable_action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean important&quot;&gt;False&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;filtertype&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pattern
       &lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; prefix
       &lt;span class=&quot;token key atrule&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; kr&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;*&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;
     &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;filtertype&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; age
       &lt;span class=&quot;token key atrule&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; name
       &lt;span class=&quot;token key atrule&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; older
       &lt;span class=&quot;token key atrule&quot;&gt;timestring&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;%Y.%m.%d&apos;&lt;/span&gt;
       &lt;span class=&quot;token key atrule&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; days
       &lt;span class=&quot;token key atrule&quot;&gt;unit_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8 &lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;#생성한지 8일이 된 데이터는 삭제한다&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;도커-컴포즈-설정&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EC%BB%A4-%EC%BB%B4%ED%8F%AC%EC%A6%88-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;도커 컴포즈 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도커 컴포즈 설정&lt;/h4&gt;
&lt;p&gt;빌드된 이미지의 entrypoint는 아무 옵션 없이 단순히 어플리케이션을 실행하는 &apos;curator/curator&apos;이다.
때문에 설정파일이나 규칙들을 정의해주고싶다면 아래와 같이 entrypoint override를 해야한다.
또한, 어떤 인덱스가 삭제될지 확인하고싶다면 dry run 옵션을 통해 위의 curator.yml에 지정한 log파일에서 리스트확인이 가능하다.
최초 실행시 반드시 dry run을 통해 curator.log에 삭제 대상이 되는 인덱스들을 확인하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;3.3&apos;&lt;/span&gt;

  &lt;span class=&quot;token key atrule&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token key atrule&quot;&gt;curator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; curator&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5.6&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; curator
      &lt;span class=&quot;token key atrule&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $USER
      &lt;span class=&quot;token key atrule&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; /data/volume/curator&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;/volume
  &lt;span class=&quot;token comment&quot;&gt;# 테스트시 주석 해제 후 실행&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;#    entrypoint: [&quot;curator/curator&quot;, &quot;--config&quot;, &quot;/volume/config/curator.yml&quot;, &quot;--dry-run&quot;, &quot;/volume/config/delete-indices.yml&quot;]&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;entrypoint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;curator/curator&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;--config&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/volume/config/curator.yml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/volume/config/delete-indices.yml&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;token key atrule&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; esmaster &lt;span class=&quot;token comment&quot;&gt;#엘라스틱 서치가 있는 네트워크와 맞춰주기&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;큐레이터로-도커컴포즈-실행하기&quot;&gt;&lt;a href=&quot;#%ED%81%90%EB%A0%88%EC%9D%B4%ED%84%B0%EB%A1%9C-%EB%8F%84%EC%BB%A4%EC%BB%B4%ED%8F%AC%EC%A6%88-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0&quot; aria-label=&quot;큐레이터로 도커컴포즈 실행하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;큐레이터로 도커컴포즈 실행하기&lt;/h4&gt;
&lt;p&gt;도커 컨테이너는 규칙 실행후 exit code 0을 반환하며 종료된다.
정기적으로 실행되도록 설정하려면 리눅스 cronjob 등록을 해줘야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;도커 컴포즈 실행 스크립트 만들기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /path/to/docker-compose
docker-compose up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;2. 크론탭 에디터 열기
``` bash
crontab -e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;규칙 추가
매일 17시에 실행되고, cronjob 작업 수행 이력이 crontab.log에 남는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;17&lt;/span&gt; * * * /data/volume/curator-run.sh &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /data/crontab.log &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;완료후 반영은 wq를 통해 하면 된다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[docker-compose up에서 네트워크 생성이 되지 않을 때]]></title><description><![CDATA[발단 어떤 환경에서 발생하는지는 정확히 알 수 없지만, 회사의 서버에 도커를 설치하면 기본 ip 대역 생성이 되지않아 아래의 메세지와 함께 도커 실행이 되지 않았다. 그래서 아래의 명령어로 직접 bridge ip를 추가해줬었다. 문제 default…]]></description><link>https://parkdoyeon.github.io//docker-compose-up에서-네트워크-생성이-되지-않을-때</link><guid isPermaLink="false">https://parkdoyeon.github.io//docker-compose-up에서-네트워크-생성이-되지-않을-때</guid><category><![CDATA[docker]]></category><category><![CDATA[docker-compose]]></category><pubDate>Thu, 28 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h1 id=&quot;발단&quot;&gt;&lt;a href=&quot;#%EB%B0%9C%EB%8B%A8&quot; aria-label=&quot;발단 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;발단&lt;/h1&gt;
&lt;p&gt;어떤 환경에서 발생하는지는 정확히 알 수 없지만, 회사의 서버에 도커를 설치하면 기본 ip 대역 생성이 되지않아 아래의 메세지와 함께 도커 실행이 되지 않았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Error starting daemon: Error initionalizing network controller&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그래서 아래의 명령어로 직접 bridge ip를 추가해줬었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;root$ &lt;span class=&quot;token function&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; name docker0 &lt;span class=&quot;token builtin class-name&quot;&gt;type&lt;/span&gt; bridge
root$ &lt;span class=&quot;token function&quot;&gt;ip&lt;/span&gt; addr &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; dev docker0 &lt;span class=&quot;token number&quot;&gt;172.17&lt;/span&gt;.0.1/16
root$ &lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; docker start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;문제&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;문제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제&lt;/h1&gt;
&lt;p&gt;default 네트워크로 bridge를 사용하는 환경에서 컨테이너를 실행해서 잘 사용해오다가,
근래에 서버 점검할때마다 컨테이너가 한꺼번에 종료되는 일이 왕왕 발생해서 docker-compose로 정리를 했다.
알파에서 테스트를 마치고 라이브 서버에서 docker-compose up 명령을 실행하니,
다음과 같은 에러가 발생하면서 어떤 컨테이너도 실행되지 않았다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ERROR: could not &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; an available, non-overlapping IPv4 address pool among the defaults to assign to the network”&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&apos;docker network prune&apos;으로 사용하지 않는 네트워크를 정리를 하면 해결된단 얘기가 있었으나 이 상황은 그렇지않았다.
검색해보니 보통은 컨테이너에 너무 많은 ip가 할당되면 이런 문제가 발생한다고 하는데,
내게는 이런 문제가 해당되지 않으니까 사용하지 않는 ip를 정리한다고 문제가 해결될것이 아니었다.&lt;/p&gt;
&lt;h1 id=&quot;해결&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;해결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결&lt;/h1&gt;
&lt;p&gt;그래서 생각하기를, 이 서버는 도커 네트워크 환경을 조성하려면 IP설정을 내가 직접 해줬어야 했으니까,
도커컴포즈도 대역 할당을 직접 해줘야하나? 싶어서 네트워크를 생성했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker network create --driver&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;bridge &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
--subnet&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.72&lt;/span&gt;.0.0/16 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
--ip-range&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.72&lt;/span&gt;.0.0/24 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
--gateway&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;172.72&lt;/span&gt;.0.1 &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
esmaster&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그리고 docker-compose파일에도 각 서비스별로 network_mode: esmaster를 추가해줬더니, 서비스가 잘 올라왔다!&lt;/p&gt;
&lt;p&gt;도커는 아.. 이젠 정말 네트워크 공부를 제대로 해야하나...싶게 만들다가도
약간의 직감으로 생각보다 빨리 문제가 해결되는 경우가 있어서 당혹스럽다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Docker 이미지/컨테이너 파일로 저장하고 불러오기]]></title><description><![CDATA[…]]></description><link>https://parkdoyeon.github.io//docker-이미지-컨테이너-파일로-저장하고-불러오기</link><guid isPermaLink="false">https://parkdoyeon.github.io//docker-이미지-컨테이너-파일로-저장하고-불러오기</guid><category><![CDATA[docker]]></category><category><![CDATA[image]]></category><category><![CDATA[container]]></category><pubDate>Thu, 28 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;도커의 장점을 폐쇄된 네트워크 환경에서 활용하기란 쉽지가 않다.
그나마 도커를 사용하니까 폐쇄된 리눅스 환경에서 이만큼의 편의를 가질수 있기도 하고.
암튼 매번 업데이트마다 자꾸 여러명의 결재를 거쳐야하는 네트워크인가를 통해 서버를 열기가 껄그러워서, 이미지를 파일로 만들어서 사용하게되었다. 용량때문에 ftp서버 통해서 옮기는데 시간이 조금 걸리지만 그런대로 쓸만하다. 퇴근시간쯤에 이미지를 날려서 처음 이 명령어를 써봤는데, 덕분에 일찍 집에갈 수 있었다.&lt;/p&gt;
&lt;h1 id=&quot;이미지-저장하기&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;이미지 저장하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이미지 저장하기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker save &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;option&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;image:tag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; -o &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;저장할파일명.tar&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;이미지-불러오기&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;이미지 불러오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이미지 불러오기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker load &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tar파일 이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;컨테이너-저장하기&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;컨테이너 저장하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨테이너 저장하기&lt;/h1&gt;
&lt;p&gt;이미지 말고도 컨테이너도 저장하고 불러올 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker &lt;span class=&quot;token builtin class-name&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;container name&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;저장할파일명.tar&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;컨테이너-불러오기&quot;&gt;&lt;a href=&quot;#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;컨테이너 불러오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컨테이너 불러오기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker &lt;span class=&quot;token function&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;tar파일 이름&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Linux - 리눅스 용량, 메모리 정보 확인하기]]></title><description><![CDATA[리눅스 환경에서 도커로 ELK 스택 서비스를 운영 사용하다보면 로그관리때문에 메모리나 디스크정보 확인을 할 일이 많은데,
자주 사용하게 되는 기능들 위주로 정리해보았다. 메모리 전체 메모리 정보 확인하기 사용중인 메모리 확인하기 CPU…]]></description><link>https://parkdoyeon.github.io//linux-리눅스-용량-메모리-정보-확인하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//linux-리눅스-용량-메모리-정보-확인하기</guid><category><![CDATA[linux]]></category><category><![CDATA[disk]]></category><pubDate>Mon, 25 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;리눅스 환경에서 도커로 ELK 스택 서비스를 운영 사용하다보면 로그관리때문에 메모리나 디스크정보 확인을 할 일이 많은데,
자주 사용하게 되는 기능들 위주로 정리해보았다.&lt;/p&gt;
&lt;h1 id=&quot;메모리&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC&quot; aria-label=&quot;메모리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전체 메모리 정보 확인하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /proc/meminfo &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; MemTotal&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사용중인 메모리 확인하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;free&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;cpu-확인하기&quot;&gt;&lt;a href=&quot;#cpu-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;cpu 확인하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU 확인하기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /proc/cpuinfo &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;more&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;디스크&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%8A%A4%ED%81%AC&quot; aria-label=&quot;디스크 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디스크&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전체 디스크, 파티션 용량 확인하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;df&lt;/span&gt; -h&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;디렉토리 기준 용량 확인하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;du&lt;/span&gt; -hsx * &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; -rh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;head&lt;/span&gt; -10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;: 경로위치, 생략시 현재 폴더
du -h : 용량을 읽기좋은 포멧으로 정리 ex)1K, 200M, 3G ..
du -s : 요약
du -x : 디렉토리 하위 스킵
sort -r : 비교 결과 역순
sort -h : 읽기좋은 포멧 형식으로 비교
head -10 : 상위 10개까지 보여주기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고 페이지
&lt;a href=&quot;https://www.cyberciti.biz/faq/how-do-i-find-the-largest-filesdirectories-on-a-linuxunixbsd-filesystem/&quot;&gt;https://www.cyberciti.biz/faq/how-do-i-find-the-largest-filesdirectories-on-a-linuxunixbsd-filesystem/&lt;/a&gt;&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[SVM - 2. svm 사이의 최대 거리값 찾기]]></title><description><![CDATA[그래프 다시 그래프로 돌아오자.
svm의 가장 기본적인 목표는 경계(decision boundary)에 가장 가까운 서로 다른 클래스 두 점의 '거리 최대값'을 찾는 것이다.
위 그래프에서 초록색 선은 x-클래스 벡터, 하늘색 선은 x…]]></description><link>https://parkdoyeon.github.io//svm-2-svm-사이의-최대-거리값-찾기</link><guid isPermaLink="false">https://parkdoyeon.github.io//svm-2-svm-사이의-최대-거리값-찾기</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[svm]]></category><pubDate>Mon, 18 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm2-1.jpeg&quot; alt=&quot;그래프&quot;&gt;&lt;/p&gt;
&lt;p&gt;다시 그래프로 돌아오자.
svm의 가장 기본적인 목표는 경계(decision boundary)에 가장 가까운 서로 다른 클래스 두 점의 &apos;거리 최대값&apos;을 찾는 것이다.
위 그래프에서 초록색 선은 x-클래스 벡터, 하늘색 선은 x+클래스 벡터이다.
뺄셈으로 두 벡터의 거리를 찾고, 벡터값을 스칼라로 바꾸기 위해 w벡터의 단위벡터값을 내적해준다. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm2-2.png&quot; alt=&quot;수식&quot;&gt;&lt;/p&gt;
&lt;p&gt;왜 하필 w벡터일까? SVM 조건식을 통해 도출한 X와 W의 내적값을 1과 b에 대한 상수식으로 치환하면,
아래와 같이 아주 깔끔한 식이 도출된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm2-3.png&quot; alt=&quot;수식&quot;&gt;&lt;/p&gt;
&lt;p&gt;||w||가 분모에 있다는 것은 다시말해 최대값을 찾기위해서는 가장 작은 w를 찾아야한다는 얘기가 된다.
수학적 편의에 차원에서 w의 최솟값을 찾기 위해 아래와같이 식을 변형한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm2-4.png&quot; alt=&quot;수식&quot;&gt;&lt;/p&gt;
&lt;p&gt;&apos;왜 이렇게 변형해야 하는가&apos;는 또 다른 문제이기 때문에 우선 차치하더라도,
2차원 그래프에서 2차원 함수는 최솟값을 찾기에 아주 적절한 형태를 갖추고 있다.
이와같은 변형을 2차원 함수의 볼록한 그릇같은 모양을 따서 convex optimization problem이라고 한다.
svm의 최적화 문제는 매우 다양한데, 우선 이것말고도 또 다른 최적화 방식이 있다는 것만 알아두자.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;도움이 됐던 자료/강의&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIT 6.034 Artificial Intelligence, Fall 2010:  &lt;a href=&quot;https://www.youtube.com/watch?v=_PwhiWxHK8o&quot;&gt;https://www.youtube.com/watch?v=_PwhiWxHK8o&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chapter 3: Support Vector machine with Math: &lt;a href=&quot;https://medium.com/deep-math-machine-learning-ai/chapter-3-support-vector-machine-with-math-47d6193c82be&quot;&gt;https://medium.com/deep-math-machine-learning-ai/chapter-3-support-vector-machine-with-math-47d6193c82be&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;초짜 대학원생의 입장에서 이해하는 Support Vector Machine (1): &lt;a href=&quot;http://jaejunyoo.blogspot.com/2018/01/support-vector-machine-1.html&quot;&gt;http://jaejunyoo.blogspot.com/2018/01/support-vector-machine-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;서포트 벡터 머신 (Support Vector Machine): &lt;a href=&quot;https://ratsgo.github.io/machine%20learning/2017/05/23/SVM/&quot;&gt;https://ratsgo.github.io/machine%20learning/2017/05/23/SVM/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[SVM - 1. yi(x·w+b) >= 1 도출하기]]></title><description><![CDATA[그래프 위 그래프는 두개의 그룹을 나누는 가장 최단의 경계가 되는 서포트 벡터 라인 두개와,
두 그룹의 경계가 되는 점선라인(dicision boundary)을 표현하고 있다.  여기서  dicision boundary를 통과하는 범선 벡터 w…]]></description><link>https://parkdoyeon.github.io//svm-1-yi-x-w-b-1-도출하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//svm-1-yi-x-w-b-1-도출하기</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[svm]]></category><pubDate>Mon, 18 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-1.jpeg&quot; alt=&quot;그래프&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 그래프는 두개의 그룹을 나누는 가장 최단의 경계가 되는 서포트 벡터 라인 두개와,
두 그룹의 경계가 되는 점선라인(dicision boundary)을 표현하고 있다. &lt;/p&gt;
&lt;p&gt;여기서  dicision boundary를 통과하는 범선 벡터 w와(파란색), 특정할 수 없는 어떤 벡터 u(주황색)가 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-2.png&quot; alt=&quot;정의&quot;&gt;&lt;/p&gt;
&lt;p&gt;이 둘의 내적(dot product) 값은 상수 c보다 크다고 할 수 있다고 했을때,
c를 이항하여 b(c=-b)로 치환하면 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-3.png&quot; alt=&quot;수식1&quot;&gt;
&lt;img src=&quot;/image/ml/2019-03-19-svm-4.png&quot; alt=&quot;수식2&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기서 벡터 u가 decision boundary에 위치한 벡터 X중 하나라고 했을 때,
w와 X의 정의에 따라 직교하는 벡터의 내적은 0이 되므로, 아래와 같다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-5.png&quot; alt=&quot;수식3&quot;&gt;&lt;/p&gt;
&lt;p&gt;나아가, w와 X의 내적과 좌표계상의 위치를 조정하는 편향값(bias, Decision Boundary 그래프가 원점에서 이동한 거리)인 상수 b를 더하고,&lt;/p&gt;
&lt;p&gt;그 합이 0이되면 벡터 X는 decision boundary에 해당하는 좌표 (x, y)값이라고 할 수 있다.
(다시말해, 상수 b가 0이라면 decision boundary는 원점을 지나는 그래프가 된다.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-6.png&quot; alt=&quot;수식4&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기에 두가지 가정을 추가한다.
두가지 값이 1 이상이면 positive class로, -1 이하이면 negative vector class로 분류한다는 것이다.
값이 0이되는 식이 decision boundary의 조건식이라면,
값이 1, 혹은 -1이 되는 식은 각 클래스의 값과 최단거리 그래프가 되는 support vector 조건식이 된다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-7.png&quot; alt=&quot;가정&quot;&gt;&lt;/p&gt;
&lt;p&gt;그러나 이런 가정만으로 어떤 수학적인 법칙을 찾기에는 어려움이 있다. 이를 해소하기위해 각 항에 class값(+1, -1)인 yi를 곱한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/ml/2019-03-19-svm-8.jpeg&quot; alt=&quot;정의&quot;&gt;&lt;/p&gt;
&lt;p&gt;이렇게 곱셈을 하면 두개의 다른 식이 하나의 부등식으로 도출된다. (마이너스 곱을 하면 우항의 값이 플러스로 변형되고 부등호의 방향이 바뀐다)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;도움이 됐던 자료/강의&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIT 6.034 Artificial Intelligence, Fall 2010:  &lt;a href=&quot;https://www.youtube.com/watch?v=_PwhiWxHK8o&quot;&gt;https://www.youtube.com/watch?v=_PwhiWxHK8o&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chapter 3: Support Vector machine with Math: &lt;a href=&quot;https://medium.com/deep-math-machine-learning-ai/chapter-3-support-vector-machine-with-math-47d6193c82be&quot;&gt;https://medium.com/deep-math-machine-learning-ai/chapter-3-support-vector-machine-with-math-47d6193c82be&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;초짜 대학원생의 입장에서 이해하는 Support Vector Machine (1): &lt;a href=&quot;http://jaejunyoo.blogspot.com/2018/01/support-vector-machine-1.html&quot;&gt;http://jaejunyoo.blogspot.com/2018/01/support-vector-machine-1.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;서포트 벡터 머신 (Support Vector Machine): &lt;a href=&quot;https://ratsgo.github.io/machine%20learning/2017/05/23/SVM/&quot;&gt;https://ratsgo.github.io/machine%20learning/2017/05/23/SVM/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[기존 테이블에 PK키 추가하기]]></title><description><![CDATA[mssql에서 PK를 추가하려면 기존의 PK를 삭제해주고 재생성해줘야한다. 
mytable에 PK을 하나 더 추가하려고 PK…]]></description><link>https://parkdoyeon.github.io//기존-테이블에-pk키-추가하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//기존-테이블에-pk키-추가하기</guid><category><![CDATA[mssql]]></category><category><![CDATA[pk]]></category><category><![CDATA[insert]]></category><pubDate>Wed, 13 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;mssql에서 PK를 추가하려면 기존의 PK를 삭제해주고 재생성해줘야한다.
mytable에 PK을 하나 더 추가하려고 PK 추가 구문을 아래와 같이 호출하면,
아래와 같이 이미 기본키가 정의되었다는 에러메세지가 나오면서 실패한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;dbo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mytable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PK_mytable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CLUSTERED&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;otherPKColumn&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PAD_INDEX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; STATISTICS_NORECOMPUTE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SORT_IN_TEMPDB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; IGNORE_DUP_KEY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ONLINE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ALLOW_ROW_LOCKS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ALLOW_PAGE_LOCKS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
GO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;메시지 &lt;span class=&quot;token number&quot;&gt;1779&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 수준 &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상태 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 줄 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
테이블 &lt;span class=&quot;token string&quot;&gt;&apos;mytable&apos;&lt;/span&gt;에 이미 기본 키가 정의되어 있습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
메시지 &lt;span class=&quot;token number&quot;&gt;1750&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 수준 &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 상태 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 줄 &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;
제약 조건을 만들 수 없습니다&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; 이전 오류를 참조하십시오&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;때문에 아래 호출을 통해 기본키를 정의한 PK 테이블 이름을 확인한다음, &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;sp_helpconstraint &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mytable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;constraint_type constraint_name delete_action   update_action   status_enabled  status_for_replication  constraint_keys
&lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;clustered&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  PK_mytable  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; Seq&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Drop문으로 날려주고 재생성해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; dbo&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;mytable &lt;span class=&quot;token keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; PK_mytable
&lt;span class=&quot;token keyword&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;dbo&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;mytable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ADD&lt;/span&gt;  &lt;span class=&quot;token keyword&quot;&gt;CONSTRAINT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;PK_mytable&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CLUSTERED&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Seq&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;otherPKColumn&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ASC&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PAD_INDEX &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; STATISTICS_NORECOMPUTE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; SORT_IN_TEMPDB &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; IGNORE_DUP_KEY &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ONLINE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ALLOW_ROW_LOCKS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ALLOW_PAGE_LOCKS &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
GO&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[insert into select 사용하기]]></title><description><![CDATA[다음과 같은 상황이 있다. table1의 특정 컬럼값(Coupon)을 table2에 인서트하고 싶을때. table_2에 다른 컬럼(RegDate)이 있어서 고정된 값('2019-03-04')을 넣어줘야 할때. 인서트하는 pk 컬럼(AccountNo…]]></description><link>https://parkdoyeon.github.io//insert-into-select-사용하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//insert-into-select-사용하기</guid><category><![CDATA[mssql]]></category><category><![CDATA[insert]]></category><pubDate>Wed, 13 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;다음과 같은 상황이 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;table&lt;em&gt;1의 특정 컬럼값(Coupon)을 table&lt;/em&gt;2에 인서트하고 싶을때.&lt;/li&gt;
&lt;li&gt;table_2에 다른 컬럼(RegDate)이 있어서 고정된 값(&apos;2019-03-04&apos;)을 넣어줘야 할때.&lt;/li&gt;
&lt;li&gt;인서트하는 pk 컬럼(AccountNo)이 있어서 인서트 row마다 값을 임의로 지정해줘야 할때. (table_2 인덱스 넘버에서 1씩 추가 하는 것으로지정)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이때 서브쿼리처럼 조회 쿼리를 생성해서 insert할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;table_2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;AccountNo&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    Coupon&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    RegDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MAX&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Seq&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;table_2&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ROW_NUMBER&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OVER&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; @&lt;span class=&quot;token variable&quot;&gt;@identity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        Coupon&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;2019-03-04&apos;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; table_1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - 403 index read-only 에러가 발생했을 때]]></title><description><![CDATA[어느날 ElasticSearch index에 데이터가 제대로 들어오지 않는 것같아서 logstash의 log를 열어보니 다음과 같은 로그가 여러개 발생해 있었다. 그래서 찾아보니 이런 내용의 글이 있었다. (원문 페이지: https://discuss…]]></description><link>https://parkdoyeon.github.io//elastic-search-403-index-read-only-에러가-발생했을-때</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-403-index-read-only-에러가-발생했을-때</guid><category><![CDATA[elasticsearch]]></category><category><![CDATA[err]]></category><pubDate>Sat, 09 Mar 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;어느날 ElasticSearch index에 데이터가 제대로 들어오지 않는 것같아서 logstash의 log를 열어보니 다음과 같은 로그가 여러개 발생해 있었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;logstash.outputs.elasticsearch&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; retrying failed action with response code: &lt;span class=&quot;token number&quot;&gt;403&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cluster_block_exception&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&quot;blocked by: &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;FORBIDDEN/12/index read-only / allow delete &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;api&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그래서 찾아보니 이런 내용의 글이 있었다.&lt;/p&gt;
&lt;p&gt;(원문 페이지: &lt;a href=&quot;https://discuss.elastic.co/t/forbidden-12-index-read-only-allow-delete-api/110282&quot;&gt;https://discuss.elastic.co/t/forbidden-12-index-read-only-allow-delete-api/110282&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Edit: i think my problem is low storage. just check your storage first.&lt;/p&gt;
&lt;p&gt;when it&apos;s low, kibana auto changes its config to read-only mode. to deal with it, go to your dev tools console and run below command:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;PUT .kibana/_settings
{
    &amp;quot;index&amp;quot;: {
        &amp;quot;blocks&amp;quot;: {
        &amp;quot;read_only_allow_delete&amp;quot;: &amp;quot;false&amp;quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;즉, ES에 용량대비 데이터가 지나치가 많이 쌓이면 키바나에서 데이터를 read-only모드로 바꾼다는 내용이다.
실제로 쿼리를 날리니까 문제는 해결됐다. 원문을 잘 읽어보면 &apos;.kibana&apos; 인덱스 자체를 날리고 해결했다는 사람도 있는데,
대시보드 세팅이 매우 많이 진행 되었기 때문에 그럴순 없었다. (문제를 해결하는 적절한 방법 같지도 않다.)&lt;/p&gt;
&lt;p&gt;찜찜한 마음에 더 찾아보니,
kibana가 설치가 되어있지 않은 ES에서도 디스크 용량이 가득차면 ES내부 옵션에서 read-only로 바뀐다고한다.
이럴땐 .kibana 인덱스 말고 전체(_all) 혹은 특정 인덱스 대상으로 아래와 같이 쿼리를 날리면 해결된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;PUT _all/_settings
{
    &amp;quot;index&amp;quot;: {
        &amp;quot;blocks&amp;quot;: {
        &amp;quot;read_only_allow_delete&amp;quot;: &amp;quot;false&amp;quot;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;kibana 내부 옵션만으로도 데이터 전달이 되지 않는 것을 보면, ES의 insert과정에서 키바나 설정과 동기화되는 요소가 있는 것 같다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[ElasticSearch - mapping 데이터 타입 설정하기]]></title><description><![CDATA[ES는 인덱스를 자동생성된 방식 그대로 사용하기를 권장하지 않는다. 키바나를 올바르게 활용하기 위해서는 템플릿을 통해 인덱스의 데이터 타입 가공이 필요하다.  가령 키바나에서 1초 이상의 요청시간이 필요한 로그(time:>100…]]></description><link>https://parkdoyeon.github.io//elastic-search-mapping-데이터-타입-설정하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//elastic-search-mapping-데이터-타입-설정하기</guid><category><![CDATA[elasticsearch]]></category><category><![CDATA[mapping]]></category><pubDate>Tue, 26 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;ES는 인덱스를 자동생성된 방식 그대로 사용하기를 권장하지 않는다. 키바나를 올바르게 활용하기 위해서는 템플릿을 통해 인덱스의 데이터 타입 가공이 필요하다. &lt;/p&gt;
&lt;p&gt;가령 키바나에서 1초 이상의 요청시간이 필요한 로그(time:&gt;1000)를 검색하고 싶다면 해당 데이터의 타입은 string이 아닌 integer여야한다.
자동생성되는 매핑타입은 일반적으로 string keyword 이므로, 템플릿 추가를 통해 인덱스 생성 전에 integer로 타입 지정하도록 설정할 수 있다. &lt;/p&gt;
&lt;p&gt;내가 변경하고자 두 필드는 time_taken과 logdate인데, 이 데이터의 자동으로 생성된 매핑은 아래와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;mapping&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;doc&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//다른 데이터들 생략&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;logdate&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;ignore_above&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;&quot;time_taken&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;keyword&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;token property&quot;&gt;&quot;ignore_above&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;256&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;text타입인 위 데이터를 본래의 자료타입과 맞게 integer와 date로 동록하도록 템플릿을 생성하자.&lt;/p&gt;
&lt;p&gt;참고로 &quot;yyyy-MM-dd hh:mm:ss&quot;형식인 ISO standard(8601) 시간표기랑 조금 다른 iis 로그(yy-MM-dd hh:mm:ss.SSSS)&quot;는 년도를 2개까지만 입력하므로, 필드 타입이 없으면 에러가 나기때문에 별도로 형식을 지정해줬다.
또 소숫점이 없는 경우 insert 에러가 발생할 수 있으므로, malformed 이벤트가 발생해도 인서트가 되도록 &quot;ignore_malformed&quot;옵션을 true로 지정해줬다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;GET _template/kr_change_to_integer
{
  &amp;quot;index_patterns&amp;quot;: &amp;quot;kr-*&amp;quot;,
  &amp;quot;mappings&amp;quot;: {
    &amp;quot;doc&amp;quot;: {
      &amp;quot;properties&amp;quot;: {
        &amp;quot;time_taken&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;integer&amp;quot;
        },
        &amp;quot;logdate&amp;quot;: {
          &amp;quot;type&amp;quot;: &amp;quot;date&amp;quot;,
          &amp;quot;fields&amp;quot;: &amp;quot;yy-MM-dd HH:mm:ss.SSS&amp;quot;,
          &amp;quot;ignore_malformed&amp;quot;: true
        }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GET 요청을 통해 등록된 템플릿 내용들을 확인할 수 있다. 내가 직접 등록해놓은 것 말고도 여러가지가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;GET /_template&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;단순히 리스트만 확인하고싶다면 _cat 쿼리로 확인하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;GET /_cat/templates
name                        index_patterns                order      version
.data-frame-notifications-1 [.data-frame-notifications-*] 0          7020099
.ml-state                   [.ml-state*]                  0          7020099
.ml-config                  [.ml-config]                  0          7020099
.logstash-management        [.logstash]                   0          
logstash                    [logstash-*]                  0          60001
.monitoring-alerts          [.monitoring-alerts-6]        0          6070299
.monitoring-es              [.monitoring-es-7-*]          0          7000199
.monitoring-alerts-7        [.monitoring-alerts-7]        0          7000199
.watch-history-9            [.watcher-history-9*]         2147483647 
.monitoring-kibana          [.monitoring-kibana-7-*]      0          7000199
.monitoring-beats           [.monitoring-beats-7-*]       0          7000199
.monitoring-logstash        [.monitoring-logstash-7-*]    0          7000199
security-index-template     [.security-*]                 1000       
.data-frame-internal-1      [.data-frame-internal-1]      0          7020099
.watches                    [.watches*]                   2147483647 
metricbeat-7.0.1            [metricbeat-7.0.1-*]          1          
.triggered_watches          [.triggered_watches*]         2147483647 
.ml-meta                    [.ml-meta]                    0          7020099
.ml-notifications           [.ml-notifications]           0          7020099
.management-beats           [.management-beats]           0          70000
kr_template                 [kr-*]                        0          
.kibana_task_manager        [.kibana_task_manager]        0          7010199
.ml-anomalies-              [.ml-anomalies-*]             0          7020099&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;삭제를 하고싶다면 아래와 같이 하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;curl&quot;&gt;&lt;pre class=&quot;language-curl&quot;&gt;&lt;code class=&quot;language-curl&quot;&gt;DELETE /_template/kr_change_to_integer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;참고로 템플릿이 등록되면 기존의 매핑이 변경되지 않는다. 새롭게 생성되는 인덱스부터 적용된다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Git - gitignore 즉시 적용하기]]></title><description><![CDATA[gitignore 파일 생성 후에 즉시 적용하고싶다면 아래의 명령어로 캐싱된 history들을 삭제하자.]]></description><link>https://parkdoyeon.github.io//git-gitignore-즉시-적용하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//git-gitignore-즉시-적용하기</guid><category><![CDATA[git]]></category><category><![CDATA[gitignore]]></category><pubDate>Tue, 26 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;gitignore 파일 생성 후에 즉시 적용하고싶다면 아래의 명령어로 캐싱된 history들을 삭제하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -r --cached &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; commit -m &lt;span class=&quot;token string&quot;&gt;&quot;캐싱된 히스토리 삭제!&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# - list, array, arraylist의 차이?]]></title><description><![CDATA[…]]></description><link>https://parkdoyeon.github.io//c-list-array-arraylist의-차이</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-list-array-arraylist의-차이</guid><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Tue, 19 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사실 성능이 강조되지 않는 개발이라면 세가지의 엄밀한 차이를 알 필요가 있을까 할수도 있지만,
그래도 알지 못한채로 세 자료타입을 사용하는건 영 찜찜한 일이기 때문에 한번 정리를 하기로 했다.
가장 명쾌하게 정리된 글이 스택오버플로우에 올라와있다.&lt;/p&gt;
&lt;p&gt;참고글 &lt;a href=&quot;https://stackoverflow.com/questions/32020000/what-is-the-difference-between-an-array-arraylist-and-a-list/32020072&quot;&gt;https://stackoverflow.com/questions/32020000/what-is-the-difference-between-an-array-arraylist-and-a-list/32020072&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; safelist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt; item &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt; list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위에서부터 순서대로 각 객체의 선언 방법이다. &lt;/p&gt;
&lt;p&gt;참고글을 번역/정리하면 아래와 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Array&lt;/th&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;th&gt;List&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;- 고정된 배열 크기를 갖는다. (선언시 크기를 지정해주고, 삭제및 추가와 같은 변형이 불가능하다.)&lt;/td&gt;
&lt;td&gt;- 고정되지 않는, 추가/삭제의 변형이 가능한 객체타입이다.&lt;/td&gt;
&lt;td&gt;- 마찬가지로 고정되지 않는 가변 객체 타입이다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 같은 타입만 저장가능하다. (type safe하다)&lt;/td&gt;
&lt;td&gt;- 제네릭 타입으로서 서로 다른 타입의 데이터가 배열에 저장가능하다. 때문에 데이터를 가져올때 박싱, 언박싱이 발생하며, type-safe하지 못한 이슈가 있다.&lt;/td&gt;
&lt;td&gt;- ArrayList의 단점을 보완하여 컴파일시 배열의 타입추론을 한다. 즉, 같은 타입만 저장가능하고, 때문에 박싱/언박싱이 발생하지않는다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- 다차원 배열 입력이 가능하다.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;array와 arraylist는 같은 배열이지만 서로 다른 특성을 갖고있고, 두 배열 타입의 정반합이 list라고 이해하면 될 것 같다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# - .NET Standard에서 Linq to sql 파일 생성하기]]></title><description><![CDATA[참고원문 https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20 .Net Standard로 프로젝트를 생성하면 .Net…]]></description><link>https://parkdoyeon.github.io//c-net-standard에서-linq-to-sql-파일-생성하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-net-standard에서-linq-to-sql-파일-생성하기</guid><category><![CDATA[csharp]]></category><category><![CDATA[dotnet]]></category><pubDate>Sun, 17 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;참고원문 &lt;a href=&quot;https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20&quot;&gt;https://weblog.west-wind.com/posts/2017/Jun/22/MultiTargeting-and-Porting-a-NET-Library-to-NET-Core-20&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.Net Standard로 프로젝트를 생성하면 .Net Core와 .Net Framework에서 사용될 수 있는 특성들을 함께 적용할 수 있다.&lt;/p&gt;
&lt;p&gt;닷넷 스탠다드 프로젝트를 생성하면 Linq to Sql class가 추가가 안되는데, 이 때 타겟 프레임워크를 csproj의 targetframework 태그를 수정하면 된다.
(properties에서 표시되는 ui로는 .net framwork로 타겟 프레임워크를 변경할 수 없다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TargetFrameworks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;net45;net40;netstandard2.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;TargetFrameworks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;복수의 타깃을 지정하고 싶으면 세미콜론으로 구분하면 된다.
타깃별 설정을 지정하고 싶다면 조건식을 사용할수도 있다.
위의 링크에서 가져온 개략적인 사용법을 담은 전체 설정파일&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- common NuGet package refs that affect all projects --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;TargetFrameworks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;net45;net40;netstandard2.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;TargetFrameworks&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Newtonsoft.Json&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10.0.2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- .NET Standard 2.0 references, compilation flags and build options --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PropertyGroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;$(TargetFramework)&apos; == &apos;netstandard2.0&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DefineConstants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;NETCORE;NETSTANDARD;NETSTANDARD2_0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;DefineConstants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ItemGroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;$(TargetFramework)&apos; == &apos;netstandard2.0&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PackageReference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Data.SqlClient&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4.4.0-preview1-25305-02&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;


&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- .NET 4.5 references, compilation flags and build options --&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ItemGroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;$(TargetFramework)&apos; == &apos;net45&apos; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;		
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;mscorlib&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Core&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Microsoft.CSharp&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;		
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Data&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Web&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Drawing&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Security&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Reference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;System.Configuration&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;PropertyGroup&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Condition&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&apos;&lt;/span&gt;$(TargetFramework)&apos; == &apos;net45&apos;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DefineConstants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;NET45;NETFULL&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;DefineConstants&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;PropertyGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Facebook - 공유하기 스크립트 만들기]]></title><description><![CDATA[객체를 통해 쏴주면 된다.]]></description><link>https://parkdoyeon.github.io//facebook-공유하기-스크립트-만들기</link><guid isPermaLink="false">https://parkdoyeon.github.io//facebook-공유하기-스크립트-만들기</guid><category><![CDATA[web]]></category><category><![CDATA[facebook]]></category><pubDate>Tue, 12 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;d&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; s&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; js&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fjs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    js &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; d&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; js&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    js&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;//connect.facebook.net/en_US/sdk.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    fjs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;parentNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;js&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fjs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;script&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;facebook-jssdk&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;fbAsyncInit&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token constant&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        appId&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;appid 고유 번호&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        xfbml&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        version&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;버전&apos;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체를 통해 쏴주면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;FB&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    method&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;feed&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
     link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;전달할 링크 url&apos;&lt;/span&gt;
 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[PWA - 사파리 브라우저의 동영상 리퀘스트방식]]></title><description><![CDATA[pwa에 mp4 동영상 캐싱이 안돼서 구글링을 하다 스택오버플로우와 모질라의 설명을 종합해보니 아래와 같다. 사파리는 영상 로드시 byte-range 리퀘스트를 지원한다.
byte-range리퀘스트는 처음에 영상을 로드할때 헤드에 range에 102…]]></description><link>https://parkdoyeon.github.io//pwa-사파리-브라우저의-동영상-리퀘스트방식</link><guid isPermaLink="false">https://parkdoyeon.github.io//pwa-사파리-브라우저의-동영상-리퀘스트방식</guid><category><![CDATA[safari]]></category><category><![CDATA[pwa]]></category><pubDate>Mon, 11 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;pwa에 mp4 동영상 캐싱이 안돼서 구글링을 하다 스택오버플로우와 모질라의 설명을 종합해보니 아래와 같다.&lt;/p&gt;
&lt;p&gt;사파리는 영상 로드시 byte-range 리퀘스트를 지원한다.
byte-range리퀘스트는 처음에 영상을 로드할때 헤드에 range에 1024바이트 확인한다는 요청을 한다. (해당 리퀘스트가 지원되지 않는 서버 영상은 재생되지 않을수도 있다.) 서버는 성공적인 range 리스폰스이면 206코드를 던지면서 전체 리소스 사이즈가 어떤지를 보낸다.&lt;br&gt;
사파리 브라우저는 이를 바탕으로 각 파일의 바이트 길이를 계산한다. 여기서 요청한 것보다 데이터가 크면 이후의 리퀘스트를 중단한다.&lt;/p&gt;
&lt;p&gt;safari의 mp4영상지원 설명: &lt;a href=&quot;https://stackoverflow.com/questions/52087208/pwa-cached-video-will-not-play-in-mobile-safari-11-4&quot;&gt;https://stackoverflow.com/questions/52087208/pwa-cached-video-will-not-play-in-mobile-safari-11-4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;byte-range 설명: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests&lt;/a&gt;&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[id값 인서트하기]]></title><description><![CDATA[인서트 전에 테이블 id 인서트 옵션을 on 해줘야한다]]></description><link>https://parkdoyeon.github.io//id값-인서트하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//id값-인서트하기</guid><category><![CDATA[mssql]]></category><category><![CDATA[insert]]></category><pubDate>Mon, 11 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;인서트 전에 테이블 id 인서트 옵션을 on 해줘야한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;IDENTITY_INSERT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;IDX&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; COL1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; COL2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;IDENTITY_INSERT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;OFF&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[데이터별 갯수 확인 쿼리]]></title><description><![CDATA[집계 데이터중에서 특정갯수만큼의 열을 갖고있는 데이터를 확인하고싶으면 having을 통해 확인하면된다 group by 인자가 여러개일경우 순서에 따라서 집계된다.]]></description><link>https://parkdoyeon.github.io//데이터별-갯수-확인-쿼리</link><guid isPermaLink="false">https://parkdoyeon.github.io//데이터별-갯수-확인-쿼리</guid><category><![CDATA[mssql]]></category><category><![CDATA[select]]></category><pubDate>Mon, 11 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;집계 데이터중에서 특정갯수만큼의 열을 갖고있는 데이터를 확인하고싶으면 having을 통해 확인하면된다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;varchar_col&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;GROUP&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;varchar_col&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;HAVING&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;group by 인자가 여러개일경우 순서에 따라서 집계된다.&lt;/p&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[R - 인코딩 옵션 추론 및 한글 변환하기]]></title><description><![CDATA[맥에서 설치하는 R은 기본 utf8설정인경우로 데이터 변환을 할 필요가 없지만, 윈도우는 그렇지 않을 수 있기 때문에 데이터 타입 추론과 변환이 필요한 경우가 있다. 이때 readr라이브러리의 guess_encoding…]]></description><link>https://parkdoyeon.github.io//r-인코딩-옵션-추론-및-한글-변환하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//r-인코딩-옵션-추론-및-한글-변환하기</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[R]]></category><pubDate>Mon, 11 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;맥에서 설치하는 R은 기본 utf8설정인경우로 데이터 변환을 할 필요가 없지만, 윈도우는 그렇지 않을 수 있기 때문에 데이터 타입 추론과 변환이 필요한 경우가 있다. 이때 readr라이브러리의 guess_encoding 함수를 호출하면 데이터타입 추론이 아래와 같은 결과로 나온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;library&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;readr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
guess_encoding&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someday&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# A tibble: 1 x 2&lt;/span&gt;
  encoding confidence
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; ASCII             &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이때, 한국어 데이타의 경우 kormaps2014 라이브러리의 changeCode 함수를 통해 타입을 쉽게 변환할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;library&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;kormaps2014&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
encoded &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; changeCode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;someday&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ASCII&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; `&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;CP949&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[R - factor 자료형에 대하여]]></title><description><![CDATA[Factor는 인덱스와 같은 제한된 숫자값을 갖고있는 자료형이다. 통계적 모델링(그래프 요소의 순서처리 등)을 위해 주로 사용되고, 같은 value…]]></description><link>https://parkdoyeon.github.io//r-factor-자료형에-대하여</link><guid isPermaLink="false">https://parkdoyeon.github.io//r-factor-자료형에-대하여</guid><category><![CDATA[machine-learning]]></category><category><![CDATA[R]]></category><pubDate>Mon, 11 Feb 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Factor는 인덱스와 같은 제한된 숫자값을 갖고있는 자료형이다. 통계적 모델링(그래프 요소의 순서처리 등)을 위해 주로 사용되고, 같은 value값을 지닌 데이터간의 안정성이 보장되는 이점이 있다. 또, 그만큼 데이터 복사/처리 등이 쉽게 이뤄지지 않으므로 일반적으로 가공과정에서는 사용하지 말것을 권장한다.&lt;/p&gt;
&lt;p&gt; csv, excel등의 데이터를 R데이터 타입으로 변환하거나 생성할때 stringAsFactors 옵션을 통해 해당 데이터를 Factor로 다룰것인지 옵션을 줄 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;credit_rating &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;BB&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
bond_owners &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; c&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Dan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
bonds &lt;span class=&quot;token operator&quot;&gt;&amp;lt;-&lt;/span&gt; data.frame&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;credit_rating&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bond_owners&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stringsAsFactors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; T&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bonds 데이터프레임을 생성하고 열어 보면 아래와 같은 결과가 나온다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bonds
  credit_rating bond_owners
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;             A         Dan
&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;             A         Tom
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;            BB         Joe
bonds 데이터프레임을 열어보면 credit_rating은 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;개의 레벨을 갖고있는 Factor자료형&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bond_owners는 &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;개의 레벨을 갖고있는 Factor자료형임을 알 수 있다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;r&quot;&gt;&lt;pre class=&quot;language-r&quot;&gt;&lt;code class=&quot;language-r&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; str&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bonds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&apos;data.frame&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;	&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; obs. of  &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; variables&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; credit_rating&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Factor w&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; levels &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;BB&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
 &lt;span class=&quot;token operator&quot;&gt;$&lt;/span&gt; bond_owners  &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Factor w&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; levels &lt;span class=&quot;token string&quot;&gt;&quot;Dan&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Joe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Tom&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[effective c# - 4. LINQ 활용]]></title><description><![CDATA[…]]></description><link>https://parkdoyeon.github.io//effective-c-4-linq-활용</link><guid isPermaLink="false">https://parkdoyeon.github.io//effective-c-4-linq-활용</guid><category><![CDATA[effectivec#]]></category><category><![CDATA[c#]]></category><category><![CDATA[linq]]></category><category><![CDATA[enumerator]]></category><category><![CDATA[yield]]></category><pubDate>Wed, 23 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;컬렉션을-반환하기보다-이터레이터를-반환하는-것이-낫다&quot;&gt;&lt;a href=&quot;#%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EA%B8%B0%EB%B3%B4%EB%8B%A4-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%82%AB%EB%8B%A4&quot; aria-label=&quot;컬렉션을 반환하기보다 이터레이터를 반환하는 것이 낫다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컬렉션을 반환하기보다 이터레이터를 반환하는 것이 낫다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;지연평가로 인해 파라미터의 유효성 확인이 늦어질 경우 다른 메소드에 유효성 확인 로직을 넣고, 통과하면 이터레이터를 리턴으로 호출하는 방식을 쓸 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;루프보다-쿼리-구문이-낫다&quot;&gt;&lt;a href=&quot;#%EB%A3%A8%ED%94%84%EB%B3%B4%EB%8B%A4-%EC%BF%BC%EB%A6%AC-%EA%B5%AC%EB%AC%B8%EC%9D%B4-%EB%82%AB%EB%8B%A4&quot; aria-label=&quot;루프보다 쿼리 구문이 낫다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;루프보다 쿼리 구문이 낫다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;쿼리 구문을 사용하면 프로그램 논리를 명령형 방식에서 선언적인 방식으로 전환할 수 있다.&lt;/li&gt;
&lt;li&gt;이렇게 하면 한번의 순회 단계 내에서 여러 작업을 결합하여 단번에 수행할 수 있고&lt;/li&gt;
&lt;li&gt;원래의 의도도 더 명확하게 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;시퀀스에-사용할-수-있는-조합가능한-api를-사용해라&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%ED%80%80%EC%8A%A4%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A1%B0%ED%95%A9%EA%B0%80%EB%8A%A5%ED%95%9C-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%9D%BC&quot; aria-label=&quot;시퀀스에 사용할 수 있는 조합가능한 api를 사용해라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시퀀스에 사용할 수 있는 조합가능한 API를 사용해라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;yield return 문을 사용하면 시퀀스를 반환하는 메서드를 쉽게 만들 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이를 사용하면 매서드 내에서 시퀀스 내의 개별요소를 저장하기 위해 별도의 저장소를 마련할 필요가 없다.&lt;/li&gt;
&lt;li&gt;왜냐하면 정확히 값이 필요한 시점에 입력 시퀀스 상에서 다음 요소를 가져오고, 출력결과가 반드시 필요한 시점에 출력 시퀀스로 결과를 보내기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;action-function-predicate와-순회방식을-분리하라&quot;&gt;&lt;a href=&quot;#action-function-predicate%EC%99%80-%EC%88%9C%ED%9A%8C%EB%B0%A9%EC%8B%9D%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC&quot; aria-label=&quot;action function predicate와 순회방식을 분리하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Action, Function, Predicate와 순회방식을 분리하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;시퀀스를 순회하는 것과, 개별요소에 대해 작업을 수행하는 것(조건식 확인)을 분리해야한다. 이렇게 하면 시퀀스에 대해 다양한 작업을 구현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;필요한-시점에-필요한-요소를-생성하라&quot;&gt;&lt;a href=&quot;#%ED%95%84%EC%9A%94%ED%95%9C-%EC%8B%9C%EC%A0%90%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%9D%BC&quot; aria-label=&quot;필요한 시점에 필요한 요소를 생성하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;필요한 시점에 필요한 요소를 생성하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;시퀀스를 생성하는 메서드의 참조가 여러군데에서 일어나면 일관성 문제가 발생할 수 있다.&lt;/li&gt;
&lt;li&gt;때문에 이터레이터 메소드(ex .TakeWhile(delegate actionfunc))를 통해 값이 필요한 순간에 요소를 생성할 수 있도록 하면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;함수를-매개변수로-사용하여-결합도를-낮춰라&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B2%B0%ED%95%A9%EB%8F%84%EB%A5%BC-%EB%82%AE%EC%B6%B0%EB%9D%BC&quot; aria-label=&quot;함수를 매개변수로 사용하여 결합도를 낮춰라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수를 매개변수로 사용하여 결합도를 낮춰라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스를 작성하고 이를 구현하도록 구조를 가져가면 베이스클래스에 의존하는 방식(부모-자식 상속관계)보다 더 느슨한 결합을 만들 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;상속 기법을 엄밀하게 정의하지 않고 델리게이트를 사용한다 하더라도, 델리게이트에 대한 참조가 필요하므로 런타임에 결합관계는 여전히 발생한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;만약 어떤 객체가 델리게이트를 나중에 다시사용하기위해 그 복사본을 저장해두면 이 객체는 델리게이트의 생명주기에 영향을 미치게 된다. 즉, 참조하는 델리게이트가 이전보다 오랜기간 살아있게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[effective c# - 3. 제네릭 활용]]></title><description><![CDATA[반드시 필요한 제약조건만 설정하라 제너릭 타입을 활용할때 타입 조건을 넣고싶다면 제약조건 예약어 where를 사용하는 것이 좋다 그러나 기본값을 할당하는데 있어서 default()와 new()는 분명한 차이가 있으므로, 제약조건에 new…]]></description><link>https://parkdoyeon.github.io//effective-c-3-제네릭-활용</link><guid isPermaLink="false">https://parkdoyeon.github.io//effective-c-3-제네릭-활용</guid><category><![CDATA[effectivec#]]></category><category><![CDATA[c#]]></category><pubDate>Wed, 02 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;반드시-필요한-제약조건만-설정하라&quot;&gt;&lt;a href=&quot;#%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4%EB%A7%8C-%EC%84%A4%EC%A0%95%ED%95%98%EB%9D%BC&quot; aria-label=&quot;반드시 필요한 제약조건만 설정하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반드시 필요한 제약조건만 설정하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;제너릭 타입을 활용할때 타입 조건을 넣고싶다면 제약조건 예약어 &lt;a href=&quot;parkdoyeon.github.io/csharp/2018-12-05-csharp-2.0-Generic&quot;&gt;where&lt;/a&gt;를 사용하는 것이 좋다&lt;/li&gt;
&lt;li&gt;그러나 기본값을 할당하는데 있어서 default()와 new()는 분명한 차이가 있으므로, 제약조건에 new()를 넣을땐 이용자가 구현에 어려움을 겪을수도 있다는 것을 생각해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;런타입에-타입을-확인하여-최적의-알고리즘을-사용하라&quot;&gt;&lt;a href=&quot;#%EB%9F%B0%ED%83%80%EC%9E%85%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EC%97%AC-%EC%B5%9C%EC%A0%81%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;런타입에 타입을 확인하여 최적의 알고리즘을 사용하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;런타입에 타입을 확인하여 최적의 알고리즘을 사용하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;제약조건을 사용하지 않고 제너릭 타입을 사용하게되면 런타임에 타입확인이 이뤄진다.&lt;/li&gt;
&lt;li&gt;이때, 런타임 환경을 최대한 고려하여 최적화된 타입별 생성자/메소드 오버로드등을 작성하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;icomparablet와-icomparert를-이용하여-객체의-선후관계를-정의하라&quot;&gt;&lt;a href=&quot;#icomparablet%EC%99%80-icomparert%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%84%A0%ED%9B%84%EA%B4%80%EA%B3%84%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot; aria-label=&quot;icomparablet와 icomparert를 이용하여 객체의 선후관계를 정의하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IComparable&lt;T&gt;와 IComparer&lt;T&gt;를 이용하여 객체의 선후관계를 정의하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ICompareable&lt;T&gt;는 현재 객체의 비교대상을 지정해 리턴하고, IComparer&lt;T&gt;는 T타입의 모든 객체의 비교 함수를 정의한다. &lt;a href=&quot;https://stackoverflow.com/questions/9316918/what-is-the-difference-between-iequalitycomparert-and-iequatablet&quot;&gt;참조&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IComparable&lt;/strong&gt; - Defines an interface for an object with a CompareTo() method that takes another object of the same type and compares &lt;strong&gt;the current object&lt;/strong&gt; to the passed one. It internalizes the comparison to the object, allowing for a more inline comparison operation, and is useful when there&apos;s only one logical way, or an overwhelmingly common default way, to compare objects of a type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IComparer&lt;/strong&gt; - Defines an interface with a Compare() method that &lt;strong&gt;takes two objects of another type&lt;/strong&gt; (which don&apos;t have to implement IComparable) and compares them. This externalizes the comparison, and is useful when there are many feasible ways to compare two objects of a type, or when the type doesn&apos;t implement IComparable (or the IComparable implementation compares a different way than what you want) and you don&apos;t have control over that type&apos;s source.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이때 제네릭 타입이 구현안된 IComparable, ICompar er도 하위 호환(.NET 2.0 이전버전)을 위해 구현하면 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;타입-매개변수가-idisposable을-구현한-경우를-대비하여-제네릭-클래스를-작성하라&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-idisposable%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%9C-%EA%B2%BD%EC%9A%B0%EB%A5%BC-%EB%8C%80%EB%B9%84%ED%95%98%EC%97%AC-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC&quot; aria-label=&quot;타입 매개변수가 idisposable을 구현한 경우를 대비하여 제네릭 클래스를 작성하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타입 매개변수가 IDisposable을 구현한 경우를 대비하여 제네릭 클래스를 작성하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;타입 매개변수가 IDisposable을 구현했을때 using(a as IDisposable) 구문을 사용하여 dispose 호출이 가능하다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;만약 a가 IDisposable을 구현하지 않았다면 null이 리턴되고 dispose 호출을 하지 않기때문에, 깔끔한 코드 작성이 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
public void GetThingsDone()
{
    T driver = new T();
    using(driver as IDisposable)
    {
        driver.DoWork();
    }
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;공변성과-반공변성을-지원하라-고민해볼-것&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EB%B3%80%EC%84%B1%EA%B3%BC-%EB%B0%98%EA%B3%B5%EB%B3%80%EC%84%B1%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%9D%BC-%EA%B3%A0%EB%AF%BC%ED%95%B4%EB%B3%BC-%EA%B2%83&quot; aria-label=&quot;공변성과 반공변성을 지원하라 고민해볼 것 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공변성과 반공변성을 지원하라 (고민해볼 것)&lt;/h3&gt;
&lt;h3 id=&quot;타입-매개변수에-대해-메서드-제약-조건을-서정하려면-델리게이트를-사용하라&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EB%8C%80%ED%95%B4-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%9C%EC%A0%95%ED%95%98%EB%A0%A4%EB%A9%B4-%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;타입 매개변수에 대해 메서드 제약 조건을 서정하려면 델리게이트를 사용하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타입 매개변수에 대해 메서드 제약 조건을 서정하려면 델리게이트를 사용하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특정 메서드를 구현하기위해서 인터페이스를 설정하기보다, 해당 메서드를 호출부에서 구현하는 것이 더 편리할때가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정 매개변수를 받는 생성자 시퀀스 함수를 호출할 때, 타입 제약조건으로 &apos;매개변수가 있는&apos; 생성자를 설정할 순 없다. 여기서 델리게이트를 사용하면 제약을 둘 수 있다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
List&amp;lt;Point&amp;gt; values = new List&amp;lt;Point&amp;gt;(
    Utilities.Zip(xValues, yValues, (x, y) -&amp;gt; new Point(x, y))
)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;인터페이스 구현시 다양한 타입이 전달되면 타입별로 오버라이드를 해야할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;베이스-클래스나-인터페이스에-대해서-제네릭을-특화하지-말라&quot;&gt;&lt;a href=&quot;#%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%82%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%8A%B9%ED%99%94%ED%95%98%EC%A7%80-%EB%A7%90%EB%9D%BC&quot; aria-label=&quot;베이스 클래스나 인터페이스에 대해서 제네릭을 특화하지 말라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;베이스 클래스나 인터페이스에 대해서 제네릭을 특화하지 말라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;오버로드된 메서드가 여러개인 경우, 컴파일러가 이 중 하나를 어떻게 선택하는지 정확히 알고있어야 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;잘못된 오버라이드 함수가 선택되었을때 메서드 내에서 타입확인을 하여 런타임에러를 방지할 수 있겠지만,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;제네릭은 본래 런타임에 타입확인을 수행하지 않기 위해 만들어졌다.&lt;/li&gt;
&lt;li&gt;박싱/언박싱을 통한 런타임 오버헤드도 문제가 될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;타입-매개변수로-인스턴스-필드를-만들-필요가-없다면-제네릭-메서드를-정의하라&quot;&gt;&lt;a href=&quot;#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4%EB%A9%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC&quot; aria-label=&quot;타입 매개변수로 인스턴스 필드를 만들 필요가 없다면 제네릭 메서드를 정의하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타입 매개변수로 인스턴스 필드를 만들 필요가 없다면 제네릭 메서드를 정의하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;제너릭&apos;클래스&apos;의 경우 호출시마다 타입을 명시적으로 지정해야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이렇게하면 우선 귀찮은 문제가 있고&lt;/li&gt;
&lt;li&gt;해당 클래스마다 제네릭 클래스가 구현되었는지 확인해봐야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반면 일반 클래스내에서 오버로딩을 통해 제네릭 함수를 구현하면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;캐스팅을 통한 문제(박싱/언박싱 오버헤드, 런타임 에러)가 발생하지 않는다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;제네릭-인터페이스와-논제네릭-인터페이스를-함께-구현하라&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EB%85%BC%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%ED%95%A8%EA%BB%98-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC&quot; aria-label=&quot;제네릭 인터페이스와 논제네릭 인터페이스를 함께 구현하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제네릭 인터페이스와 논제네릭 인터페이스를 함께 구현하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;버전문제!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터페이스는-간략히-정의하고-기능의-확장은-확장메서드를-사용하라&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B0%84%EB%9E%B5%ED%9E%88-%EC%A0%95%EC%9D%98%ED%95%98%EA%B3%A0-%EA%B8%B0%EB%8A%A5%EC%9D%98-%ED%99%95%EC%9E%A5%EC%9D%80-%ED%99%95%EC%9E%A5%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;인터페이스는 간략히 정의하고 기능의 확장은 확장메서드를 사용하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터페이스는 간략히 정의하고 기능의 확장은 확장메서드를 사용하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스를 통해 기능추가를 하면 기존에 인터페이스를 구현하고 있는 클래스를 수정해야한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;반면에 확장메서드를 사용하면&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 구현부의 모든 클래스에서 호출이 가능하고&lt;/li&gt;
&lt;li&gt;이용자에게 메소드의 구현방식에대한 가이드가 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;물론 동일한 이름의 확장메서드 명이 이미 구현이 되어있는경우 확장메서드가 호출되는 문제가 있을 수 있지만, 이경우 이름을 바꾸거나 완벽하게 동일한 기능을 하도록 작성하여 피할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;확장-메서드를-이용하여-구체화된-제네릭-타입을-개선하라&quot;&gt;&lt;a href=&quot;#%ED%99%95%EC%9E%A5-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B5%AC%EC%B2%B4%ED%99%94%EB%90%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%84-%EA%B0%9C%EC%84%A0%ED%95%98%EB%9D%BC&quot; aria-label=&quot;확장 메서드를 이용하여 구체화된 제네릭 타입을 개선하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;확장 메서드를 이용하여 구체화된 제네릭 타입을 개선하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;확장메서드를 사용하지 않으면 구체화된 제네릭타입을 상속해서 새로운 타입을 만들어야 하는데,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이렇게 하면 상속타입에 대한 제약이 발생한다.&lt;/li&gt;
&lt;li&gt;가령 이터레이터 확장메서드를 통해 메서드 구현을 하면될것을 List타입을 상속받아 클래스 내에서 구현하면 다른 이터레이터 형태의 메서드 구현이 어려워진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[effective c# - 1. 언어요소]]></title><description><![CDATA[지역변수를 선언할때는 var를 사용하는 것이 낫다 c#은 익명함수를 지원하면서 타입을 암시적으로 선언하는 방법을 제공한다. 정확한 타입을 알지 못하는 상태에서 명시적으로 선언할경우 득보다 실이 많다 예1 잘못된 형변환: IEnumerable…]]></description><link>https://parkdoyeon.github.io//effective-c-1-언어요소</link><guid isPermaLink="false">https://parkdoyeon.github.io//effective-c-1-언어요소</guid><category><![CDATA[effectivec#]]></category><category><![CDATA[c#]]></category><category><![CDATA[is]]></category><category><![CDATA[as]]></category><category><![CDATA[delegate]]></category><category><![CDATA[var]]></category><pubDate>Mon, 17 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;지역변수를-선언할때는-var를-사용하는-것이-낫다&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%84%A0%EC%96%B8%ED%95%A0%EB%95%8C%EB%8A%94-var%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%82%AB%EB%8B%A4&quot; aria-label=&quot;지역변수를 선언할때는 var를 사용하는 것이 낫다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지역변수를 선언할때는 var를 사용하는 것이 낫다&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;c#은 익명함수를 지원하면서 타입을 암시적으로 선언하는 방법을 제공한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정확한 타입을 알지 못하는 상태에서 명시적으로 선언할경우 득보다 실이 많다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예1 잘못된 형변환: IEnumerable&lt;T&gt;를 상속받는 IQueryable&lt;T&gt;을 IEnumerable 타입으로 선언하는 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IQueryable&lt;T&gt; 타입은 원격 데이터를 참조할 경우, 여러단계에서 수행되는 LINQ 쿼리식을 SQL쿼리로 합한 후 그 값을 순회하는 시점까지 SQL쿼리 수행을 연기한다. (=네트워크 트래픽을 적게 씀)&lt;/li&gt;
&lt;li&gt;반면 IEnumerable&lt;T&gt;는 단계별로 모두 원격에 SQL쿼리를 전달하고 로컬에 반환한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;예2 숫자 형변환: 특정 숫자값을 반환하는 메서드를 var 변수를 통해 통해 호출해오면 예상치 못한 결과에 대한 디버깅이 어려울 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;const보다-readonly&quot;&gt;&lt;a href=&quot;#const%EB%B3%B4%EB%8B%A4-readonly&quot; aria-label=&quot;const보다 readonly permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;const보다 readonly&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;const는 값이 컴파일시에 평가되는 컴파일 상수, readonly는 값이 런타임에 평가되는 런타임 상수다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;const는 성능이 약간 더 낫지만 유연성이 떨어져 사용이 제한적이다&lt;/li&gt;
&lt;li&gt;const/readonly 값을 참조하는 코드를 작성할경우 const는 직접 값을 대입하지만 readonly 는 참조코드를 넣는다.&lt;/li&gt;
&lt;li&gt;const와 readonly가 있는 클래스의 값을 바꾼 dll로 교체하면 const는 호출값이 바뀌지 않지만 readonly는 값이 바뀐다. 즉 const는 전체를 빌드해야한다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;캐스트보다는-is-as가-좋다&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8A%A4%ED%8A%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-is-as%EA%B0%80-%EC%A2%8B%EB%8B%A4&quot; aria-label=&quot;캐스트보다는 is as가 좋다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐스트보다는 is, as가 좋다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;캐스트 연산의 경우 형변환 실패시 &lt;code class=&quot;language-text&quot;&gt;InvalidCastException&lt;/code&gt;이 발생한다. 따라서 안전한 캐스팅을 위해서는 실패시 null 리턴을 반환하는 is/as를 적극 활용하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;foreach구문에서는 참조형식과 값형식 모두 형변환이 가능해야해서 캐스팅 형변환이 일어나기때문에 캐스팅 익셉션이 발생할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;다만 컴파일 단계에서 IEnumerator.Current로 변환가능한지(System.Object), 또 다시 for문 앞에 루프변수로 변환가능한지만 확인한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//foreach 구문&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UseCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;/span&gt; theCollection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyType&lt;/span&gt; t &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; theCollection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//실제 foreach가 동작하는 구문&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;UseCollection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;/span&gt; theCollection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IEnumerator&lt;/span&gt; it &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; theCollection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MoveNext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token class-name&quot;&gt;MyType&lt;/span&gt; t &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;MyType&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;it&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Current&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        t&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoStuff&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;시퀀스 요소를 특정한 타입으로 형변환해주는 IEnumerator.Cast&lt;T&gt;()함수가 있는데, 이 또한 변환 타입에 제약이 발생하므로 캐스팅 연산을 수행한다. 다만, 제너릭타입 컬렉션에 대해서는 호출이 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;델리게이트를-이용하여-콜백을-표현하라&quot;&gt;&lt;a href=&quot;#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BD%9C%EB%B0%B1%EC%9D%84-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC&quot; aria-label=&quot;델리게이트를 이용하여 콜백을 표현하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;델리게이트를 이용하여 콜백을 표현하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스가 아닌 델리게이트를 통해 콜백을 표현하면 클래스간의 결합도를 낮춰준다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다만 델리게이트는 한번만 호출해도 델리게이트에 추가된 모든 대상함수가 호출되므로&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;반환값이 멀티캐스트 체인의 마지막으로 호출된 함수 반환값이 되며, 이전 함수의 반환값은 무시된다는 무시된다는 문제가 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;때문에 아래와 같은 루프연산을 통해 반환값을 전체 받을 수 있도록 해야한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LengthyOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; pred&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; bContinue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ture&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ComplicatedClass&lt;/span&gt; cl &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; container&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        cl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;DoLengthyOperation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Func&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; pr &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; pred&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetInvocationList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            bContinue &lt;span class=&quot;token operator&quot;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;bContinue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;이벤트-호출시에는-null-연산자를-사용하라&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%98%B8%EC%B6%9C%EC%8B%9C%EC%97%90%EB%8A%94-null-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;이벤트 호출시에는 null 연산자를 사용하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트 호출시에는 null 연산자를 사용하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다른 스레드로 전환이 된 다음 이벤트 해제가 일어나는 경우가 있을 수 있으므로, 다른 변수에 이벤트 객체를 할당하여 주소복사를 해놓거나 ? 연산자를 통해 nullcheck을 하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;박싱과-언박싱을-최소화-하라&quot;&gt;&lt;a href=&quot;#%EB%B0%95%EC%8B%B1%EA%B3%BC-%EC%96%B8%EB%B0%95%EC%8B%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EB%9D%BC&quot; aria-label=&quot;박싱과 언박싱을 최소화 하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;박싱과 언박싱을 최소화 하라&lt;/h3&gt;
&lt;h3 id=&quot;베이스-클래스가-업그레이드-된-경우에만-new-한정자를-사용하라&quot;&gt;&lt;a href=&quot;#%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C-%EB%90%9C-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%A7%8C-new-%ED%95%9C%EC%A0%95%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC&quot; aria-label=&quot;베이스 클래스가 업그레이드 된 경우에만 new 한정자를 사용하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;베이스 클래스가 업그레이드 된 경우에만 new 한정자를 사용하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상속받은 메서드에 new 한정자를 사용하면 그 기능에 있어서 개발자에게 혼란을 줄 수 있으므로 다른 이름을 사용해야한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[effective c# - 2. 리소스 관리]]></title><description><![CDATA[.NET 리소스 관리의 이해 finalizer/IDisposable 닷넷은 가비지 수집기가 있기 때문에 개발자가 메모리 해제/누수와 같은 문제를 직접적으로 처리할 필요가 없다. 그러나 비관리 리소스의 경우 관리가 필요하며, 이를 위해 finalizer…]]></description><link>https://parkdoyeon.github.io//effective-c-2-리소스-관리</link><guid isPermaLink="false">https://parkdoyeon.github.io//effective-c-2-리소스-관리</guid><category><![CDATA[effectivec#]]></category><category><![CDATA[c#]]></category><category><![CDATA[finalizer]]></category><category><![CDATA[IDisposable]]></category><category><![CDATA[virtual]]></category><category><![CDATA[constructor]]></category><pubDate>Mon, 17 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;net-리소스-관리의-이해-finalizeridisposable&quot;&gt;&lt;a href=&quot;#net-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EA%B4%80%EB%A6%AC%EC%9D%98-%EC%9D%B4%ED%95%B4-finalizeridisposable&quot; aria-label=&quot;net 리소스 관리의 이해 finalizeridisposable permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;.NET 리소스 관리의 이해 finalizer/IDisposable&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;닷넷은 가비지 수집기가 있기 때문에 개발자가 메모리 해제/누수와 같은 문제를 직접적으로 처리할 필요가 없다.&lt;/li&gt;
&lt;li&gt;그러나 비관리 리소스의 경우 관리가 필요하며, 이를 위해 finalizer와 IDisposable 라는 두가지 메커니즘을 제공한다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;finalizer의 경우 가비지로 간주된 이후에도 메모리 점유시간이 길어져(언제 해제될지도 알 수 없다) 둘 중 IDisposable이 더 권장된다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가바지로 간주된 객체는 다음 가비지 수집세대에서 삭제되지만&lt;/li&gt;
&lt;li&gt;finalizer를 갖고있는 객체는 가비지로 판단되더라도 finalizer를 호출하기 전까지 공간이 해제가 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;할당구문보다-멤버-초기화-구문이-좋다&quot;&gt;&lt;a href=&quot;#%ED%95%A0%EB%8B%B9%EA%B5%AC%EB%AC%B8%EB%B3%B4%EB%8B%A4-%EB%A9%A4%EB%B2%84-%EC%B4%88%EA%B8%B0%ED%99%94-%EA%B5%AC%EB%AC%B8%EC%9D%B4-%EC%A2%8B%EB%8B%A4&quot; aria-label=&quot;할당구문보다 멤버 초기화 구문이 좋다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;할당구문보다 멤버 초기화 구문이 좋다.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;생성자에서 초기화 코드를 누락하는 경우가 많으므로 변수를 선언하는 곳에서 초기화를 해주는 것이 좋다.&lt;/li&gt;
&lt;li&gt;초기화를 하지 않으면 예외가 발생할 위험이 있기 때문이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다만 초기화가 필요없는 경우가 있는데, 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null이나 0으로 초기화를 하는 경우&lt;/li&gt;
&lt;li&gt;저수준에서 CPU 명령이 메모리블록을 0으로 설정하기때문.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래 코드는 동일한 0 초기화 구문이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
  MyValType myVal1;
  MyValType myVal2 = new MyValType();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;객체를 생성하는 방식이 다를경우 ex) list 객체의 size를 생성자마자 달리 설정하는 것&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;정적-클래스-멤버를-올바르게-초기화하라&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%A4%EB%B2%84%EB%A5%BC-%EC%98%AC%EB%B0%94%EB%A5%B4%EA%B2%8C-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EB%9D%BC&quot; aria-label=&quot;정적 클래스 멤버를 올바르게 초기화하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적 클래스 멤버를 올바르게 초기화하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정적생성자는 타입 내에 정의된 모든 변수/메서드/속성에 접근하기전에 최초로 접근하는 메서드이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;복잡한 초기화가 이뤄지는 경우 그 대안으로 사용되기도 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령 일반적인 멤버초기화는 예외발생 가능성이 있으면 잡기가 어려운데, 정적생성자의 catch 구문을 통해 복구를 시도할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;때문에 private 메서드 사용등의 잘못된 초기화에 유의해야한다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;만일 잘못된 초기화가 이뤄지면 CLR 단계에서 초기화 익셉션이 발생하며,&lt;/li&gt;
&lt;li&gt;만약 예외가 발생할 가능성이 있는 정적생성자의 예외를 호출부에서 catch로 잡아버리면 해당 AppDomain이 unload하지 않는 한 해당 객체 생성이 불가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;초기화가-중복되는-것을-최소화-하라&quot;&gt;&lt;a href=&quot;#%EC%B4%88%EA%B8%B0%ED%99%94%EA%B0%80-%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-%EA%B2%83%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EB%9D%BC&quot; aria-label=&quot;초기화가 중복되는 것을 최소화 하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;초기화가 중복되는 것을 최소화 하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;생성자를 초기화하는 구문을 두는 방법은 크게 두가지가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;다양한 변수를 인자로 받는 생성자 오버로딩 + 초기화 할당 메서드 호출&lt;/li&gt;
&lt;li&gt;기본값을 매개변수로 하는 생성자 작성 + this(params) 혹은 base(params) 호출 구문을 통해 상속&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 두번쨰 방법을 사용하는 것이 좋다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전자의 방식을 사용할 경우 생성자 초기화 후에 다시 재 할당이 이뤄지므로 가비지가 생성되며&lt;/li&gt;
&lt;li&gt;readonly 예약어가 적용된 변수는 메서드에서 초기화가 불가능하다.&lt;/li&gt;
&lt;li&gt;또한 코드가 멤버가 많을수록 오버로드의 경우의 수가 많아져 코드가 장황해질 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;참고) 초기화 우선순위&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;정적변수 저장공간 0으로 초기화 -&gt; 변수 초기화&lt;/li&gt;
&lt;li&gt;베이스 클래스의 정적 생성자 수행&lt;/li&gt;
&lt;li&gt;정적 생성자 수행&lt;/li&gt;
&lt;li&gt;인스턴스 변수 저장공간 0으로 초기화 -&gt; 변수 초기화&lt;/li&gt;
&lt;li&gt;베이스 클래스의 인스턴스 생성자 수행&lt;/li&gt;
&lt;li&gt;인스턴스 생성자 수행&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;불필요한-객체를-만들지-말라&quot;&gt;&lt;a href=&quot;#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%A7%80-%EB%A7%90%EB%9D%BC&quot; aria-label=&quot;불필요한 객체를 만들지 말라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;불필요한 객체를 만들지 말라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;자주 사용되는 지역변수의 경우 멤버 변수로 선언하고 사용해야한다.&lt;/li&gt;
&lt;li&gt;string 객체의 경우 문자열이 추가될때마다 string 객체가 다시 생성되므로 StringBuilder를 사용할것을 권장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;생성자-내에서는-절대로-가상함수-호출을-하지-말라더-고민해볼것&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EC%9E%90-%EB%82%B4%EC%97%90%EC%84%9C%EB%8A%94-%EC%A0%88%EB%8C%80%EB%A1%9C-%EA%B0%80%EC%83%81%ED%95%A8%EC%88%98-%ED%98%B8%EC%B6%9C%EC%9D%84-%ED%95%98%EC%A7%80-%EB%A7%90%EB%9D%BC%EB%8D%94-%EA%B3%A0%EB%AF%BC%ED%95%B4%EB%B3%BC%EA%B2%83&quot; aria-label=&quot;생성자 내에서는 절대로 가상함수 호출을 하지 말라더 고민해볼것 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성자 내에서는 절대로 가상함수 호출을 하지 말라(더 고민해볼것)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;런타임에서는 멤버변수가 초기화 된 다음에 생성자가 수행되는것이 전제되므로, 멤버변수를 사용하는 가상함수가 null 포인터 예외를 방지하기위해 일관성이 없어질 확률(즉 가상메서드가 구현된 메서드를 호출할 위험)이 있다.&lt;/li&gt;
&lt;li&gt;이를 극복하려면 베이스 클래스에서 추상함수를 선언하고 파생클래스에서 오버라이드 하면된다. 그러나 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;표준-dispose패턴을-구현하라&quot;&gt;&lt;a href=&quot;#%ED%91%9C%EC%A4%80-dispose%ED%8C%A8%ED%84%B4%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC&quot; aria-label=&quot;표준 dispose패턴을 구현하라 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;표준 Dispose패턴을 구현하라&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dispose 패턴 구현시에 인터페이스 상속을 받는 클래스 멤버중 비관리 리소스가 있으면, 반드시 finalizer를 구현해야한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;이용자가 비관리 리소스 정리를 하지 못하는 경우를 대비하기 위한 방어적 코딩이다.&lt;/li&gt;
&lt;li&gt;하지만 멤버에 비관리리소스가 없다면 절대 사용하지 말아야한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Dispose나 finalizer에서 다른 작업을 수행하면 GC도, Dispose나 finalizer도 닿지 못하는 객체가 생길 수 있다. 이미 정리된 리소스라고 판단되기 때문이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 4.0: dynamic]]></title><description><![CDATA[4.0 주요변화 이전까지는 닷넷 1.0~3.5용으로 빌드되는 모든 어셈블리가 GAC(Global Assembly Cache)에 추가되는 경우 단일하게 였지만 4.0부터는로 변경되었다. 같은동작을 하는 어셈블리를 .NET 2.0, .NET 4.…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-4-0-dynamic</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-4-0-dynamic</guid><category><![CDATA[c#]]></category><category><![CDATA[c#4.0]]></category><category><![CDATA[dynamic]]></category><category><![CDATA[reflection]]></category><pubDate>Thu, 06 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;40-주요변화&quot;&gt;&lt;a href=&quot;#40-%EC%A3%BC%EC%9A%94%EB%B3%80%ED%99%94&quot; aria-label=&quot;40 주요변화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4.0 주요변화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;이전까지는 닷넷 1.0~3.5용으로 빌드되는 모든 어셈블리가 GAC(Global Assembly Cache)에 추가되는 경우 단일하게 &lt;code class=&quot;language-text&quot;&gt;%windir%\assembly&lt;/code&gt;였지만&lt;/li&gt;
&lt;li&gt;4.0부터는&lt;code class=&quot;language-text&quot;&gt;%windir%\Microsoft.NET\assembly&lt;/code&gt;로 변경되었다.&lt;/li&gt;
&lt;li&gt;같은동작을 하는 어셈블리를 .NET 2.0, .NET 4.0으로 각각 빌드해서 제공해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;선택적-매개변스와-명명된-인자&quot;&gt;&lt;a href=&quot;#%EC%84%A0%ED%83%9D%EC%A0%81-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%8A%A4%EC%99%80-%EB%AA%85%EB%AA%85%EB%90%9C-%EC%9D%B8%EC%9E%90&quot; aria-label=&quot;선택적 매개변스와 명명된 인자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;선택적 매개변스와 명명된 인자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;파라미터 값이 없을때 초기값을 주고싶다면 다음과 같이 기재하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public void Output(string name, int age = 0)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이때 ref, out 예약어는 함께 사용할 수 없고&lt;/li&gt;
&lt;li&gt;선택 매개변수가 시작되면 필수 매개변수를 사용할 수 없으며&lt;/li&gt;
&lt;li&gt;선택 매개변수가 시작되어도 params 유형의 매개변수를 정의할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;주의할 점은 선택적 매개변수에 전달되는 인자 역시 차례대로 대응되며, 중간에 생략될 수 없다는 점이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;이는 다음과같이 명명을 통해 해결할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;Output(age: 26, name: &amp;quot;박도연&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dynamic-예약어&quot;&gt;&lt;a href=&quot;#dynamic-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;dynamic 예약어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dynamic 예약어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4.0부터 python이나 ruby같은 동적언어와도 연동이 쉽도록 dynamic 예약어를 추가했다.&lt;/li&gt;
&lt;li&gt;c#은 정적언어이기 때문에 &lt;strong&gt;컴파일 시점&lt;/strong&gt;에 초깃값과 대응되는 타입으로 치환하지만,&lt;/li&gt;
&lt;li&gt;dynamic 예약어는 그렇게 하지않고 &lt;strong&gt;실행시점&lt;/strong&gt;에 치환을 한다.&lt;/li&gt;
&lt;li&gt;Object 타입으로 선언해도 동작하지만, dynamic을 쓰는게 가독성측면에서 낫다. 결국 간편표기의 한 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dynamic을-통한-리플렉션-개선&quot;&gt;&lt;a href=&quot;#dynamic%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98-%EA%B0%9C%EC%84%A0&quot; aria-label=&quot;dynamic을 통한 리플렉션 개선 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dynamic을 통한 리플렉션 개선&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;*12/5일자 글에 리플렉션에 대한 설명이 있다&lt;/li&gt;
&lt;li&gt;기존에 리플렉션을 사용하려면 메소드 정보를 호출한 다음 invoke 메소드를 통해 인자를 넘겨줘야하는데,&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dynamic 예약어를 사용하면 아래정도의 코드로 간단하게 해결가능하다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;dynamic txt = &amp;quot;test func&amp;quot;
bool result = txt.Contains(&amp;quot;test&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;덕타이핑&quot;&gt;&lt;a href=&quot;#%EB%8D%95%ED%83%80%EC%9D%B4%ED%95%91&quot; aria-label=&quot;덕타이핑 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;덕타이핑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;공통되는 상속없이 이름만 동일한 메서드나 속성을 호출하는 경우 맥락에 따라 적절한 객체를 실행시켜준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;int DuckTypingCall(dynamic target, dynamic item) {
    return target.IndexOf(item);
}

string txt = &amp;quot;test func&amp;quot;
List&amp;lt;int&amp;gt; list = new List&amp;lt;int&amp;gt;();

DuckTypingCall(txt, &amp;quot;text&amp;quot;); // 0
DuckTypingCall(list, 3); // 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 6.0: 간편표기법]]></title><description><![CDATA[6.0 주요변화 간편 표기법정도의 변화가 있었다. 때문에 빌드할때는 c# 6.0이 필요하지만 빌드 결과를 실행하기위해선 .NET framework 2.0(c# 2.…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-6-0-간편표기법</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-6-0-간편표기법</guid><category><![CDATA[c#]]></category><category><![CDATA[c#6.0]]></category><category><![CDATA[lambda]]></category><category><![CDATA[using]]></category><category><![CDATA[questionmark]]></category><category><![CDATA[dictionary]]></category><category><![CDATA[when]]></category><category><![CDATA[task]]></category><pubDate>Thu, 06 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;60-주요변화&quot;&gt;&lt;a href=&quot;#60-%EC%A3%BC%EC%9A%94%EB%B3%80%ED%99%94&quot; aria-label=&quot;60 주요변화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6.0 주요변화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;간편 표기법정도의 변화가 있었다.&lt;/li&gt;
&lt;li&gt;때문에 빌드할때는 c# 6.0이 필요하지만 빌드 결과를 실행하기위해선 .NET framework 2.0(c# 2.0)만 있으면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;초기화-구문-추가&quot;&gt;&lt;a href=&quot;#%EC%B4%88%EA%B8%B0%ED%99%94-%EA%B5%AC%EB%AC%B8-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;초기화 구문 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;초기화 구문 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;멤버 초기값을 부여하기 위해 생성자를 추가할 필요 없이, 부호입력만으로 초기값 입력을 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public string Name { get; set; } = &amp;quot;Jane&amp;quot;;
//여기서 set;을 없애면 읽기전용으로 만들 수 있다.
//즉, set;을 없애고 빌드하면 내부적으로 readonly 예약어를 추가한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;람다식을-이용한-메서드-속성-정의&quot;&gt;&lt;a href=&quot;#%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%86%8D%EC%84%B1-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;람다식을 이용한 메서드 속성 정의 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;람다식을 이용한 메서드, 속성 정의&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메서드 코드가 한줄이면 람다로 간편하게 정의가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public void PrintIt() =&amp;gt; Console.WriteLine(&amp;quot;프린트&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인덱서나 속성 정의도 가능한데, 이 경우 get만 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public double x;
public double y;
public double Angle =&amp;gt; Math.Atan2(y, x);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;속성과 인덱서 전부 7.0부터 set도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;using-static-타입-생략&quot;&gt;&lt;a href=&quot;#using-static-%ED%83%80%EC%9E%85-%EC%83%9D%EB%9E%B5&quot; aria-label=&quot;using static 타입 생략 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;using static 타입 생략&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;상단에 using static 전체 타입을 선언해주면 정적멤버를 타입명 없이 바로 호출할 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;enum멤버나 const 속성을 갖는 클래스도 마찬가로 적용 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;using static MyDay;
using static BitMode;

public enum MyDay
{
    Saturday, Sunday
}

public class BitMode
{
    public const int ON = 1;
    public const int OFF = 2;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;단, c# 3.0에 도입된 확장메서드는 using static 적용을 받지 않는다. 동일 메서드명간의 충돌이 있을 수 있기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;null-조건-연산자-&quot;&gt;&lt;a href=&quot;#null-%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90-&quot; aria-label=&quot;null 조건 연산자  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;null 조건 연산자: ?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;참조형 변수의 멤버접근이나 배열 인덱스접근을 할때 null check대신 간편하게 쓸 수 있다. 단독으로 쓸 수 없다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;int count = list?.Count ?? 0;

//위 코드는 아래와 동일하다.
if(list != null) {
    if(list.Count == null)
        count = 0;
    else
        count = list.Count;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;하나의 참조변수에 대해 다중으로 사용할 경우 효율성이 떨어지므로 주의해서 쓸 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문자열-내에-식expression-포함&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%82%B4%EC%97%90-%EC%8B%9Dexpression-%ED%8F%AC%ED%95%A8&quot; aria-label=&quot;문자열 내에 식expression 포함 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 내에 식(expression) 포함&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;string.Format의 활용도때문에 더 간편하고 쉽게 $&quot;&quot;표기법이 추가되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nameof-추가&quot;&gt;&lt;a href=&quot;#nameof-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;nameof 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nameof 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;사용된 식별자(메서드, 속성 등)의 이름을 그대로 출력할때 사용한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단, 식별자의 마지막 이름만 반환되므로 주의.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;string txt = nameof(System.Console);
//txt == &amp;quot;Console&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;리플렉션을 통해서도 가능하지만(712p 참조), 리플렉션은 코드 실행되어야 이름이 구해지는 반면 nameof는 컴파일시에 치환되므로 실행시점에는 부하가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dictionary-타입의-초기화&quot;&gt;&lt;a href=&quot;#dictionary-%ED%83%80%EC%9E%85%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94&quot; aria-label=&quot;dictionary 타입의 초기화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary 타입의 초기화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dictionary의 간편한 초기화 방식을 지원한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;//기존에 지원하던 초기화 방식
var people = new Dictionary&amp;lt;string, int&amp;gt;
{
    { &amp;quot;Anders&amp;quot;, 7 },
    { &amp;quot;Sam&amp;quot;, 10 },
    { &amp;quot;Sam&amp;quot;, 7 } //에러발생!
    //위 방식은 컴파일 후 Add()메서드를 호출하는 코드로 변경되므로 키값 중복 에러가 발생한다.
}

//반면에 인덱서를 통한 접근방식은
var people = new Dictionary&amp;lt;string, int&amp;gt;
{
    [&amp;quot;Anders&amp;quot;] = 7,
    [&amp;quot;Sam&amp;quot;] = 10,
    [&amp;quot;Sam&amp;quot;] = 7 //기존 키값에 덮어쓰기도 가능하다
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;예외필터&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%ED%95%84%ED%84%B0&quot; aria-label=&quot;예외필터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외필터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;catch 옆에 when 조건식을 통해 해당 조건에 맞는 예외가 발생하면 예외처리기가 선택된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특이한 점은 예외 필터 조건식이 실행되는 시점은 예외 핸들러가 실행되는 시점이 아니므로 호출스택(call stack)이 그대로 보존된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건식에 특정 작업을 수행하고 무조건 false를 리턴하게 하면 예외 처리 구조에 영향을 주지 않고 부가적인 작업을 할 수 있다. (로그 무조건 남기게 하는등)&lt;/li&gt;
&lt;li&gt;exception 전부를 받는 catch 문에 구현하는 수가 있지만, when을 통한 구문은 Intermediate Language수준에서 지원하므로 예외필터의 IL코드로 직접 변경된다는 차이가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;같은 예외를 여러번 호출할수도 있지만 동일한 예외에서 실제로 실행되는것은 한개이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;trycatch에서-await-사용-가능&quot;&gt;&lt;a href=&quot;#trycatch%EC%97%90%EC%84%9C-await-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;trycatch에서 await 사용 가능 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;try/catch에서 await 사용 가능&lt;/h3&gt;
&lt;h3 id=&quot;pragma의-cs접두사-지원&quot;&gt;&lt;a href=&quot;#pragma%EC%9D%98-cs%EC%A0%91%EB%91%90%EC%82%AC-%EC%A7%80%EC%9B%90&quot; aria-label=&quot;pragma의 cs접두사 지원 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;#pragma의 &quot;CS&quot;접두사 지원&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특정 경고를 끄려면 기존에는 경고코드의 숫자만 입력해야 했지만 이제는 전체를 사용해도 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;//코드 상단부에 선언
#pragma warning disable CS0168
#pragma warning disable 0168
// 둘다 가능&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;재정의된-메서드의-선택-정확도-향상&quot;&gt;&lt;a href=&quot;#%EC%9E%AC%EC%A0%95%EC%9D%98%EB%90%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%84%A0%ED%83%9D-%EC%A0%95%ED%99%95%EB%8F%84-%ED%96%A5%EC%83%81&quot; aria-label=&quot;재정의된 메서드의 선택 정확도 향상 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;재정의된 메서드의 선택 정확도 향상&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;기존에는 nullable 타입을 받는 메서드가 여러 타입으로 오버로드가 됐을때, null을 파라미터로 받는 경우 컴파일 에러가 발생했다.&lt;/li&gt;
&lt;li&gt;그러나 6.0부턴 무조건 int? 인자를 받는 메서드로 실행된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;null을 리턴하는 Task 메서드를 Task.Run메서드에 넣는 경우도 Run(Func&lt;Task&gt; function)을 선택해서 실행하도록 하게 되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public static Task Run(Func&amp;lt;Task&amp;gt; function);
public static Task Run(Action function);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 5.0: async, await]]></title><description><![CDATA[호출자 정보 c/c++에서 갖고오는 , 와 같은 매크로 상수를 불러올 수 있게됐다. c#에서는 함수 파라미터에 attribute 형식으로 입력하면 된다. 특성 설명 CallerMemberName…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-5-0-async-await</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-5-0-async-await</guid><category><![CDATA[c#]]></category><category><![CDATA[c#5.0]]></category><category><![CDATA[async]]></category><category><![CDATA[await]]></category><category><![CDATA[Task]]></category><category><![CDATA[Task<TResult>]]></category><category><![CDATA[호출자정보]]></category><pubDate>Thu, 06 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;호출자-정보&quot;&gt;&lt;a href=&quot;#%ED%98%B8%EC%B6%9C%EC%9E%90-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;호출자 정보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;호출자 정보&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;c/c++에서 갖고오는 &lt;code class=&quot;language-text&quot;&gt;__LINE__&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__FILE__&lt;/code&gt;와 같은 매크로 상수를 불러올 수 있게됐다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c#에서는 함수 파라미터에 attribute 형식으로 입력하면 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static void LogMessage([CallerMemberName] string memberName = &amp;quot;&amp;quot;, [CallerFilePath] string filePath = &amp;quot;&amp;quot;, [CallerLineNumber] int lineNumber = 0)
{
    //코드
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;특성&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CallerMemberName&lt;/td&gt;
&lt;td&gt;호출자 정보가 명시된 메서드를 호출한 측의 메서드 이름&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CallerFilePath&lt;/td&gt;
&lt;td&gt;호출자 정보가 명시된 메서드를 호출한 측의 소스파일 경로&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CallerLineNumber&lt;/td&gt;
&lt;td&gt;호출자 정보가 명시된 메서드를 호출한 측의 소스코드 라인 번호&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where T: struct&lt;/td&gt;
&lt;td&gt;값 형식만&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;async-await&quot;&gt;&lt;a href=&quot;#async-await&quot; aria-label=&quot;async await permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;async, await&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;비동기 호출을 동기호출처럼 사용할 수 있는 예약어&lt;/li&gt;
&lt;li&gt;FileRead()같은 함수는 비동기 함수가 별개로 있지만, 비동기로 호출할경우 콜백 함수를 쓰는등 복잡해지는 문제가 있었다.&lt;/li&gt;
&lt;li&gt;사용 방법은 함수 앞에 await를 붙이고, 그 아래에 있는 코드를 콜백함수처럼 동기적으로 작성하면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;async는 await이라는 단어를 예약어로 인식하게 하도록 메소드 앞에 붙이는 예약어이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하위호환을 위해 추가된 개념이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;비동기-반환-타입-task-tasktresult&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85-task-tasktresult&quot; aria-label=&quot;비동기 반환 타입 task tasktresult permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비동기 반환 타입: Task, Task&lt;TResult&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비동기 메서드는 반환값이 있는 경우 Task&lt;TResult&gt;, 없는경우 Task 반환한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;await예약어를 사용하지 않고 async 예약어를 사용할 경우 void 리턴도 가능한데, 이때 예외가 발생하면 처리되지 않은 채로 프로세스가 비정상적으로 종료되므로 권장되지 않는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그럼에도 불구하고 async void가 있는 경우는 EventHandler 타입때문이다. 아래를 제시한 타입외에는 사용하지 말자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public delegate void EventHandler(object sender, EventArgs e);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task만 ThreadPool.QueueUserWorkItem대용으로 사용할수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;//동일한 코드이다
ThreadPool.QueueWorkItem(
    (obj) =&amp;gt;
    {
        //코드
    }
, null)

Task task1 = new Task(
    () =&amp;gt;
    {
        //코드
    }
, null)

Task task2 = new Task(
    () =&amp;gt;
    {
        //코드
    }
, null)

task1.Start();
task1.Wait();
//차이점이라면 Task가 좀 더 세밀하게 제어할 수 있다. ThreadPool은 EventWaitHandle 타입을 통해 제어해야하는데, Wait();호출을 통해 작업완료까지 스레드 대기를 할 수있다.

//Task.WaitAll(task1, task2)
//두개의 스레드를 동시에 실행하고 대기할 수 있다.

//await Task.WaitAll(task1, task2)
//두개의 스레드를 동시에 실행하고 대기하지 않고 다음작업을 진행한다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Task.Factory.StartNew(Action&lt;T&gt; func)이라는 정적 속성을 통해 Start()호출 없이 바로 시작할수도 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task&lt;TResult&gt;를 사용해 반환값을 처리할수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;Task&amp;lt;int&amp;gt; task1 = new Task&amp;lt;int&amp;gt;(
    () =&amp;gt;
    {
        Random rand = new Random((int))
    }
, null)
task1.Start();
task1.Wait();
Console.WriteLine(task1.Result);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비동기를 지원하지 않는 동기메서드를 비동기메서드처럼 구현할수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static Task&amp;lt;string&amp;gt; ReadAllTextAsync(string filePath)
{
    return TaskFactory.StartNew(() =&amp;gt; 
    {
        File.ReadAllText(filePath);
    })
}
private static async Task AwaitFileRead(string filePath)
{
    string fileText = await ReadAllTextAsync(filePath);
    // Task 반환타입을 갖지만 Async예약어가 있으므로 return 문이 필요없다.
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 7.1: Tuple, ValueTuple, async, is]]></title><description><![CDATA[defalut 리터럴 형식 추가 2.0에 추가된 default는 (T)를 인자로 받았다. 문자 그대로 T를 인자로 받으면 컴파일시 기본값을 추측하는데, 7.0부터 어차피 타입추론이 이뤄지므로 지정이 필요없다고 판단하고 리터럴로 사용하게 됐다. Main…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-7-1-tuple-value-tuple-async-is</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-7-1-tuple-value-tuple-async-is</guid><category><![CDATA[c#]]></category><category><![CDATA[c#7.1]]></category><category><![CDATA[default]]></category><category><![CDATA[ValueTuple]]></category><category><![CDATA[async]]></category><category><![CDATA[is]]></category><pubDate>Thu, 06 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;defalut-리터럴-형식-추가&quot;&gt;&lt;a href=&quot;#defalut-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%98%95%EC%8B%9D-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;defalut 리터럴 형식 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;defalut 리터럴 형식 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.0에 추가된 default는 (T)를 인자로 받았다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문자 그대로 T를 인자로 받으면 컴파일시 기본값을 추측하는데,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.0부터 어차피 타입추론이 이뤄지므로 지정이 필요없다고 판단하고 리터럴로 사용하게 됐다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;main메서드에-async-예약어-허용&quot;&gt;&lt;a href=&quot;#main%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-async-%EC%98%88%EC%95%BD%EC%96%B4-%ED%97%88%EC%9A%A9&quot; aria-label=&quot;main메서드에 async 예약어 허용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Main메서드에 async 예약어 허용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;어차피 우회가 가능했기 때문에 부자연스러운 코드가 발생한다고 판단하고 허용되었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;튜플-변수명-자동지정&quot;&gt;&lt;a href=&quot;#%ED%8A%9C%ED%94%8C-%EB%B3%80%EC%88%98%EB%AA%85-%EC%9E%90%EB%8F%99%EC%A7%80%EC%A0%95&quot; aria-label=&quot;튜플 변수명 자동지정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;튜플 변수명 자동지정&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;item1, item2 등의 형식의 변수명을 사용하지 않으려면 명시적으로 이름을 지정해줘야했지만&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.1부터는 변수명을 타입 추론(타입을 확인해서 할당될 때 적용된 이름사용) 을 통해 알수있게됐다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;물론 추론이 불가능할 땐 item형식의 이름을 쓴다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
int age = 20;
string name = &amp;quot;Kevin Arnold&amp;quot;;
var t = (age, name);
Console.WriteLine($&amp;quot;{t.age}, {t.Name}&amp;quot;)

var person = new { Age = 30, Name = &amp;quot;Winnie Copper&amp;quot;};
var t = (25, person.Name);
Console.WriteLine($&amp;quot;{t.Item1}, {t.Name}&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이와 같은 변화는 LINQ에서 훨씬 간결한 표현을 할 수 있도록 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{  
    //익명 타입활용
    var dateList = from person in people
                    select { Name = person.Name, Year = DateTime.Now.AddYears(-person.Age).Year
    
    //이전 버전에서 튜플 이름을 반드시 지정해주고싶을때
    var dateList = from person in people
                    select (Name: person.Name, Year: DateTime.Now.AddYears(-person.Age).Year);

    //7.1에서 튜플 자동지정 활용
    var dateList = from person in people
                    select (person.Name, DateTime.Now.AddYears(-person.Age).Year);

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;is의-제너릭-패턴매칭-허용&quot;&gt;&lt;a href=&quot;#is%EC%9D%98-%EC%A0%9C%EB%84%88%EB%A6%AD-%ED%8C%A8%ED%84%B4%EB%A7%A4%EC%B9%AD-%ED%97%88%EC%9A%A9&quot; aria-label=&quot;is의 제너릭 패턴매칭 허용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;is의 제너릭 패턴매칭 허용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;T타입으로 명시된 변수의 경우 is문 혹은 case문을 통해 패턴매칭이 불가능했으나, 7.1부터 가능해졌다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 7.0: 예약어와 ValueTask/ValueTuple]]></title><description><![CDATA[7.0 주요변화 c# 7.0출시시 닷넷 버전은 4.6.2였다, 현재 7.0에 대응되는 프레임워크는 4.7이다.  타입이 추가되었다. 그러나 4.6.2 닷넷 프레임워크에는 없으므로 nuget…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-7-0-예약어와-value-task-value-tuple</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-7-0-예약어와-value-task-value-tuple</guid><category><![CDATA[c#]]></category><category><![CDATA[c#7.0]]></category><category><![CDATA[tuple]]></category><category><![CDATA[out]]></category><category><![CDATA[ref]]></category><category><![CDATA[lambda]]></category><category><![CDATA[ValueTask]]></category><category><![CDATA[is]]></category><category><![CDATA[when]]></category><category><![CDATA[switch/case]]></category><pubDate>Thu, 06 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;70-주요변화&quot;&gt;&lt;a href=&quot;#70-%EC%A3%BC%EC%9A%94%EB%B3%80%ED%99%94&quot; aria-label=&quot;70 주요변화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7.0 주요변화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;c# 7.0출시시 닷넷 버전은 4.6.2였다, 현재 7.0에 대응되는 프레임워크는 4.7이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ValueTuple&lt;/code&gt; 타입이 추가되었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그러나 4.6.2 닷넷 프레임워크에는 없으므로 nuget패키지를 통해 &lt;code class=&quot;language-text&quot;&gt;System.ValueTuple&lt;/code&gt;을 직접 설치해야한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;System.Threading.Tasks.ValueTask&lt;/code&gt;가 추가되었는데, 마찬가지로 지원하지 않으므로 &lt;code class=&quot;language-text&quot;&gt;System.Threading.Tasks.Extensions.dll&lt;/code&gt;을 참조추가해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;out-매개변수-쉽게-사용하기&quot;&gt;&lt;a href=&quot;#out-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%89%BD%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;out 매개변수 쉽게 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;out 매개변수 쉽게 사용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본에는 out매개변수 사용을 위해서는 따로 선언을 해줬어야했지만, 이제는 타입을 함께 입력해주면 선언이 필요없다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;int.TryParse(&amp;quot;5&amp;quot;, out int result);
int.TryParse(&amp;quot;6&amp;quot;, out int result); //컴파일시 6.0코드로 변환 하기때문에 같은 변수명으로 입력하면 컴파일 에러발생!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;반환값로컬변수에-ref-사용&quot;&gt;&lt;a href=&quot;#%EB%B0%98%ED%99%98%EA%B0%92%EB%A1%9C%EC%BB%AC%EB%B3%80%EC%88%98%EC%97%90-ref-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;반환값로컬변수에 ref 사용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;반환값/로컬변수에 ref 사용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메서드를 통해 배열의 특정 요소만 반환하는 등의 사용이 가능하다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가독성 문제가 있지만 메서드의 값 설정과 할당이 동시에 가능해진다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class MyMetrix
{
    int[,] _matrix = new int[100, 100]
    public ref int Put(int c, int r)
    {
        return ref _matrix[c, r];
    }
}
{
    MyMetrix m = new MyMetrix();
    int result = Matrix.Put(1, 1) = 1;
    Console.WriteLine(result) //1
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;주의할 점은 메서드 내부에서 선언한 지역변수와 같은 경우 실행 후 호출측으로 넘어갈 때 스택이 해제되어 return ref으로 반환된 인스턴스가 남아있을거라는 보장이 없다.&lt;/li&gt;
&lt;li&gt;또한, ref 예약어를 지정한 지역변수는 다시 다른 변수를 가리키도록 변경할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;valuetuple-도입-이유-dynamic-systemtuple의-한계&quot;&gt;&lt;a href=&quot;#valuetuple-%EB%8F%84%EC%9E%85-%EC%9D%B4%EC%9C%A0-dynamic-systemtuple%EC%9D%98-%ED%95%9C%EA%B3%84&quot; aria-label=&quot;valuetuple 도입 이유 dynamic systemtuple의 한계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueTuple 도입 이유: dynamic, System.Tuple의 한계&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;튜플은 기본적으로 여러개의 요소를 반환해야하지만 일일히 클래스를 만들기가 번거로울 때 사용된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;물론 아래와같이 c# 3.0의 익명 타입과 4.0의  dynamic 예약어를 이용할수도 있지만, 런타임시 리스크가 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
dynamic result = ParseInteger(&amp;quot;20&amp;quot;); //dynamic
Console.WriteLine(result.Parsed);
Console.WriteLine(result.Number);
//정적 형식검사가 안돼 나중이 필드 이름이 바뀌어도 컴파일시 문제를 알아낼 수 없는 문제가 있다.
}
dynamic ParseInteger(string text)
{
int number = 0;
try
{
    number = Int32.Parse(text);
    return new { Number = number, Parsed = true }; //익명 타입
}
catch
{
    return new { Number = number, Parsed = false };
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System.Tuple을 이용해 문제를 해결할수도 있지만&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 이름이 무조건 Item1, 2.. 와같이 정해지며&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파이썬과같은 언어랑 비교했을 때 상대적으로 복잡하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
Tuple&amp;lt;bool, int&amp;gt; result = pg.ParseInteger(&amp;quot;40&amp;quot;);
}
Tuple&amp;lt;bool, int&amp;gt; ParseInteger(string text)
{
int number = 0;
bool result = false;
try
{
    number = Int32.Parse(text);
    result = true
}
catch { }
return Tuple.create(result, number);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;valuetuple의-도입&quot;&gt;&lt;a href=&quot;#valuetuple%EC%9D%98-%EB%8F%84%EC%9E%85&quot; aria-label=&quot;valuetuple의 도입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueTuple의 도입&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Return 타입에 직접 이름을 지정하거나, 호출하는 측에서 강제로 이름을 지정할수도 있다.&lt;/li&gt;
&lt;li&gt;item1, item2 .. 과같은 방식의 호출도 가능하다.&lt;/li&gt;
&lt;li&gt;out 매개변수 처리에서 지원했던 생략기호도 반환값 분해 구문에 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 튜플은 제너릭 타입으로 변경해서 처리한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;닷넷 4에서 제공하는 System.Tuple은 class 타입으로 정의된 반면&lt;/li&gt;
&lt;li&gt;4.7의 ValueTuple은 struct로 정의되어있다는 차이가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deconstruct라는 특별한 이름을 지정한 메서드를 정의해서 out 파라미터를 받아 직접 튜플을 구현할수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;{
    var result = pg.ParseInteger(&amp;quot;40&amp;quot;);
    Console.WriteLine(result.Parsed);
    Console.WriteLine(result.Number);

    (bool success, int n) caller = pg.ParseInteger(&amp;quot;40&amp;quot;);
    Console.WriteLine(caller.success);
    Console.WriteLine(caller.n);

    (bool ret, int num) = pg.ParseInteger(&amp;quot;40&amp;quot;);
    Console.WriteLine(ret);
    Console.WriteLine(num);

    (var _, var _) = pg.ParseInteger(&amp;quot;40&amp;quot;); //2개값 모두 생략
    (var _, var n) = pg.ParseInteger(&amp;quot;40&amp;quot;); //마지막 값만 n으로 받음
}
(bool Parsed, int Number) ParseInteger(string text) //Return 타입에 이름 지정
{
    //생략
    return (result, number)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;lambda-메서드-정의-확대&quot;&gt;&lt;a href=&quot;#lambda-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98-%ED%99%95%EB%8C%80&quot; aria-label=&quot;lambda 메서드 정의 확대 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lambda 메서드 정의 확대&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아래의 메서드에대한 lambda 정의가 7.0부터 가능해졌다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;생성자/소멸자&lt;/li&gt;
&lt;li&gt;이벤트 클래스의 add/remove&lt;/li&gt;
&lt;li&gt;속성/인덱서의 set&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;지역함수&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%97%AD%ED%95%A8%EC%88%98&quot; aria-label=&quot;지역함수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지역함수&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메서드 내에서만 활용할 수 있는 지역함수 문법이 추가되었다.&lt;/li&gt;
&lt;li&gt;익명함수 표기도 가능하며, 단일식이면 람다로도 표현가능하다.&lt;/li&gt;
&lt;li&gt;표기는 자유롭지만, c# 컴파일러는 internal 접근자를 가진 메서드로 정의해 타입 내에 자동으로 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;valuetaskt-async메서드-반환타입으로-사용자-정의-task타입을-반환할-수-있게됨&quot;&gt;&lt;a href=&quot;#valuetaskt-async%EB%A9%94%EC%84%9C%EB%93%9C-%EB%B0%98%ED%99%98%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-task%ED%83%80%EC%9E%85%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%8C%EB%90%A8&quot; aria-label=&quot;valuetaskt async메서드 반환타입으로 사용자 정의 task타입을 반환할 수 있게됨 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ValueTask&lt;T&gt;: async메서드 반환타입으로 사용자 정의 Task타입을 반환할 수 있게됨&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;async 예약어가 붙는 메서드는 반환타입이 void, Task, Task&lt;T&gt; 중에 하나여야한다&lt;/li&gt;
&lt;li&gt;문제는 메서드 내에서 await호출이 되지 않아 비동기 처리가 필요 없을때도 Task 객체가 생성되어 성능상 불이익이 발생한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;여기서 반환 타입을 ValueTask&lt;T&gt;형식으로 바꿔주면 비동기 처리를 하지 않을 경우에는 Task 객체 생성이 일어나지 않는다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static string _filecontents = string.Empty;
private static async Task&amp;lt;(string, int)&amp;gt; FileReadAsync(string filePath)
{
    if (string.IsNullOrEmpty(_filecontents) == false)
            return (_filecontents, Thread.CurrentThread.ManagedThreadId);
    
    _filecontents = await ReadAllTextAsync(filePath);
    return (_filecontents, Thread.CurrentThread.ManagedThreadId);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;자유로운-throw-사용&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9C%A0%EB%A1%9C%EC%9A%B4-throw-%EC%82%AC%EC%9A%A9&quot; aria-label=&quot;자유로운 throw 사용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자유로운 throw 사용&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;throw는 식(expression)이 아닌 문(statement)에 해당한다.&lt;/li&gt;
&lt;li&gt;즉 &apos;항&apos;의 개념이 아니므로 삼항연산자에 사용되려면 메서드를 별개로 만들어 우회해서 사용해야 했었다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;7.0부터는 직접 사용이 가능하며,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그렇다해서 모든 구문이 사용한것은 아니고 사용이 안되는 맥락에서는 컴파일 에러를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리터럴의-가독성-상승을-위한-표현방식-개선&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%98-%EA%B0%80%EB%8F%85%EC%84%B1-%EC%83%81%EC%8A%B9%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%91%9C%ED%98%84%EB%B0%A9%EC%8B%9D-%EA%B0%9C%EC%84%A0&quot; aria-label=&quot;리터럴의 가독성 상승을 위한 표현방식 개선 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리터럴의 가독성 상승을 위한 표현방식 개선&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;7.0부터 숫자 내의 임의의 위치에 밑줄을 추가할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10,000,000 와 같은 표현을 위해 int number = 10&lt;em&gt;000&lt;/em&gt;000 형식으로 표기 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;숫자뿐만이 아니라 16진수 표현도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;패턴-매칭상수-null-참조타입-값타입-var-등-is-연산&quot;&gt;&lt;a href=&quot;#%ED%8C%A8%ED%84%B4-%EB%A7%A4%EC%B9%AD%EC%83%81%EC%88%98-null-%EC%B0%B8%EC%A1%B0%ED%83%80%EC%9E%85-%EA%B0%92%ED%83%80%EC%9E%85-var-%EB%93%B1-is-%EC%97%B0%EC%82%B0&quot; aria-label=&quot;패턴 매칭상수 null 참조타입 값타입 var 등 is 연산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;패턴 매칭(상수, null, 참조타입, 값타입, var 등...): is 연산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;is는 as와 기본적으로 동일한 기능을 수행한다.&lt;/li&gt;
&lt;li&gt;차이점은 as는 변수에 캐스팅 결과가 담기지만,&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;is는 구문자체로는 True/False를 반환하고, 비교 타입 뒤에 변수명을 입력하면 해당 변수에 캐스팅된 값이 할당된다는 차이점이 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;object obj = new List&amp;lt;string&amp;gt;();
if(obj is List&amp;lt;string&amp;gt; list)
    list.ForEach(e =&amp;gt; Console.WriteLine(e));

object[] object = new object[] { 100, null, DateTime.Now, new ArrayList() };
foreach(object item in objList)
{
    if (item is 100) {
        //item 사용
    } else if (item is null) { 
        //item 사용
    } else if (item is DateTime dt) {
        //dt 사용
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;var도 가능하지만 사실상 의미가 없다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단 var 타입뒤에 변수명 반드시 써줘야하며, 이것도 의미가 없으면 언더바(_)로 입력하면된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;패턴-매칭-switchcase-연산&quot;&gt;&lt;a href=&quot;#%ED%8C%A8%ED%84%B4-%EB%A7%A4%EC%B9%AD-switchcase-%EC%97%B0%EC%82%B0&quot; aria-label=&quot;패턴 매칭 switchcase 연산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;패턴 매칭: switch/case 연산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;case 예약어 다음에 &quot;[타입] [변수명]&quot;을 넣으면 is 예약어처럼 사용 가능하다&lt;/li&gt;
&lt;li&gt;case 구문 뒤에 when 예약어를 추가하면 조건을 한번 더 검사할 수 있다. 예외필터의 when과 사용법이 동일하다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;튜플타입과 같은 복잡한 인자를 받을 때 var와 when 구문을 사용하면 훨씬 간결하게 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;Action&amp;lt;(int, int)&amp;gt; detectZeroOr = (arg) =&amp;gt;
{
    switch (arg)
    {
        case var r when r.Equals(0, 0):
        case var r1 when r1.Item == 0:
        case var r2 when r2.Item == 0:
            return;
    }
    Console.WriteLine(&amp;quot;both nonzero&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 3.0: LINQ]]></title><description><![CDATA[LINQ IEnumerable를 인자로 받는다 IEnumerable, IOrderedEnumerable를 상속받아 정의하면 LINQ를 사용할 수 있다 IEnumerate, IOrderedEnumerable…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-3-0-linq</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-3-0-linq</guid><category><![CDATA[c#]]></category><category><![CDATA[c#3.0]]></category><category><![CDATA[LINQ]]></category><pubDate>Wed, 05 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;linq&quot;&gt;&lt;a href=&quot;#linq&quot; aria-label=&quot;linq permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LINQ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IEnumerable&lt;T&gt;를 인자로 받는다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IEnumerable&lt;T&gt;, IOrderedEnumerable&lt;TElement&gt;를 상속받아 정의하면 LINQ를 사용할 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEnumerate&lt;T&gt;, IOrderedEnumerable&lt;TElement&gt;를 반환한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;두 요소를 반환하지 않는 형식의 메서드를 사용하면 메서드가 즉시 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;select 예약어: Select 확장 메서드호출하는 또 다른 문법에 불과하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;var all = from person in people
    select person;
people.Select((elem) =&amp;gt; elem );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;orderby: IComparable 인터페이스가 구현된 타입에 사용할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;var all = from person in people
    orderby person.Age descending //디폴트가 ascending
    select person;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;group ... by: select ... by와 의미적으로 같으므로 (실제 select ... by는 없음) select가 올 수 없다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;그렇기 때문에 select에서 가능한 형변환 작업이 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;var addrGroup = from person in people
group person by person.Address;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//아래와 같이도 가능하다
var changedGroup = from person in people
group new { Name = person.Name, Age = person.Age } by person.Address;&lt;/p&gt;
&lt;p&gt;foreach(var itemGroup in addrGroup) //컬렉션 요소 분류
{
Console.WriteLine(itemGroup.Key) &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;foreach(var item in itemGroup) //컬렉션 반환
    Console.WriteLine(item.Name);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;join: 이런게 가능하다 정도만?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;//만족하는 레코드만 삽입시키는 inner join의 유형
//on ... equals ...가 사용됐다.
var nameToLangList = from person in people
    join language in languages on person.Name equals language.Name

//누락시키지 않고 전부 삽입하는 outer join의 유형
//빈값에 대한 후처리
var nameToLangAllList = from person in people
    join language in languages on person.Name equals language.Name into lang
    from language in lang.DefaultIfEmpty(new MainLanguage())
    select new { Name=person.Name, Age=person.Age, Language=language.Language }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 3.0: Lambda, 확장메서드]]></title><description><![CDATA[Lambda Expression 람다 대수는 수학에서 함수를 표기하는 방식에서 착안했다. 프로그래밍에서는 두가지 의미를 갖는다. 코드로서 람다: 익명메서드의 간편표기법 가령 수학에서 f(x, y) = x + y인 식을 람다로 치면 (x, y) => x…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-3-0-lambda-확장메서드</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-3-0-lambda-확장메서드</guid><category><![CDATA[c#]]></category><category><![CDATA[c#3.0]]></category><category><![CDATA[Lambda]]></category><category><![CDATA[extensionMethod]]></category><category><![CDATA[this]]></category><pubDate>Wed, 05 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;lambda-expression&quot;&gt;&lt;a href=&quot;#lambda-expression&quot; aria-label=&quot;lambda expression permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lambda Expression&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;람다 대수는 수학에서 함수를 표기하는 방식에서 착안했다. 프로그래밍에서는 두가지 의미를 갖는다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;코드로서 람다: 익명메서드의 간편표기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령 수학에서 f(x, y) = x + y인 식을 람다로 치면 (x, y) =&gt; x + y 로 표현하는 것과 같다.&lt;/li&gt;
&lt;li&gt;위를 부연하면, 기본적으로 값이 반환된다는 가정하에 return문을 생략할 수 있으며, 이경우 람다식의 연산자인 &apos;=&gt;&apos; 기호 다음에 오는 중괄호도 생략 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터로서 람다: 식자체가 데이터가 되어 구문분석의 대상이 되는 것들. 별도로 컴파일 가능하며 메서드로도 실행 가능하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;익명메서드의-간편표기법으로서의-람다-actiont-functresult&quot;&gt;&lt;a href=&quot;#%EC%9D%B5%EB%AA%85%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EA%B0%84%ED%8E%B8%ED%91%9C%EA%B8%B0%EB%B2%95%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-%EB%9E%8C%EB%8B%A4-actiont-functresult&quot; aria-label=&quot;익명메서드의 간편표기법으로서의 람다 actiont functresult permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;익명메서드의 간편표기법으로서의 람다: Action&lt;T&gt;, Func&lt;TResult&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;익명메서드에서는 delegate 정의를 별도로 해줘야하는 문제가 있었다. (이전 글 익명메서드 예제 참조) 이를 위해 별개로 정의된 함수표현이 있는데, 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;public delegate void Action&lt;T&gt;(T obj) : 반환값이 없는 델리게이트, T형식 매개변수는 입력될 매개 인자 1개의 타입지정&lt;/li&gt;
&lt;li&gt;public delegate void Func&lt;TResult&gt;() : 반환값이 있는 델리게이트, TResult는 반환될 타입지정&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2가지 함수 다 인자가 16개까지 확장 가능하며&lt;/li&gt;
&lt;li&gt;Func&lt;TResult&gt;()가 인자가 있는 경우에는 마지막 타입지정에 TResult만 있으면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;actiont-functresult-활용과-확장-매서드&quot;&gt;&lt;a href=&quot;#actiont-functresult-%ED%99%9C%EC%9A%A9%EA%B3%BC-%ED%99%95%EC%9E%A5-%EB%A7%A4%EC%84%9C%EB%93%9C&quot; aria-label=&quot;actiont functresult 활용과 확장 매서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Action&lt;T&gt;, Func&lt;TResult&gt; 활용과 확장 매서드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;List&lt;T&gt;에 정의된 ForEach는 다음과 Action&lt;T&gt;를 인자로 받는다. 이를 다음과 같이 표현 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;list.ForEach((elem) =&amp;gt; { Console.WriteLine(elem + &amp;quot; * 2 == &amp;quot;+ (elem*2)); }); //list의 요소 수만큼 델리게이트가 실행된다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;List&lt;T&gt;의 FindAll()은 Predicate&lt;T&gt;로 표기되는 Func&amp;#x3C;T, bool&gt;을 인자로 받는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FindAll과 유사한 기능을 가진 Where()의 경우 iEnumerable&lt;TSource&gt;의 확장 메서드로, 열거자를 통해 직접 요소를 순회할때서야 람다식이 하나씩 실행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;//확장 메서드: 기존 클래스의 내부구조를 바꾸지 않고 새로운 인스턴스 메서드를 정의하는 것처럼 추가하는 것. static클래스에 static 메서드로 확장하려는 타입의 매개변수를 this 예약와함께 명시하는 식.
public static IEnumerable&amp;lt;TSource&amp;gt; Where&amp;lt;TSource&amp;gt;(this IEnumerable&amp;lt;TSource&amp;gt; source, Func&amp;lt;TSoucem bool&amp;gt; predicate)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;이를 지연된 평가(lazy evaluation)이라고 하며,&lt;/li&gt;
&lt;li&gt;CPU가 실제로 데이터가 필요한 순간에서야 실행된다는 특징이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터로서의-람다&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C%EC%84%9C%EC%9D%98-%EB%9E%8C%EB%8B%A4&quot; aria-label=&quot;데이터로서의 람다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터로서의 람다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터 구조로 표현된 것을 식트리(expression tree)라고 한다&lt;/li&gt;
&lt;li&gt;이는 델리게이트 타입으로 전달되는 것이 아니라 구문분석을 할 수 있는 System.Linq.Expressions.Expression 타입 인스턴스가 된다.&lt;/li&gt;
&lt;li&gt;데이터 람다 메서드는 실행시점에 만들 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - c# 2.0, Generic과 syntatic sugar]]></title><description><![CDATA[새로운 제네릭 문법 와 제약조건 제너릭의 박싱/언박싱 문제를 보완한 새로운 버전의 컬렉션이 2.0에 등장한다. 대표적인 예가 ArrayList -> List 에 타입을 지정해주면 CLR이 JIT…]]></description><link>https://parkdoyeon.github.io//c-기본서-c-2-0-generic과-syntatic-sugar</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-c-2-0-generic과-syntatic-sugar</guid><category><![CDATA[c#]]></category><category><![CDATA[c#2.0]]></category><category><![CDATA[IEnumerator]]></category><category><![CDATA[AnonymousMethod]]></category><category><![CDATA[T]]></category><category><![CDATA[Generic]]></category><category><![CDATA[yield]]></category><category><![CDATA[where]]></category><pubDate>Tue, 04 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;새로운-제네릭-문법-t와-제약조건&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%AC%B8%EB%B2%95-t%EC%99%80-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;새로운 제네릭 문법 t와 제약조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 제네릭 문법 &lt;T&gt;와 제약조건&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;제너릭의 박싱/언박싱 문제를 보완한 새로운 버전의 컬렉션이 2.0에 등장한다. 대표적인 예가 ArrayList -&gt; List&lt;T&gt;&lt;/li&gt;
&lt;li&gt;&lt;T&gt;에 타입을 지정해주면 CLR이 JIT컴파일 시에 대응되는 타입을 대체해서 코드를 확장한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;기존에 여러개의 타입인자를 지정해줘야했던 문제도 &lt;T&gt;를 지정하면서 한번에 해결할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public static void WriteLog&amp;lt;T&amp;gt;(T item)
{
string output = string.Format(&amp;quot;{0}: {1}&amp;quot;, DateTime.Now, item);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이렇게 여러타입을 매개변수로 받으면 조건을 넣어줘야하는 경우가 있을 수 있다. 그럴땐 Where 예약어를 사용하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;T대신 K, V 등을 써서 여러개의 파라미터에 서로 다른 타입을 명시해줄수도 있고, 여기에 where문을 각각 지정줄수도 있다. (590p)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래의 예시에 있는 인터페이스 상속 조건 말고도 여러 타입을 지정해줄 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;제약조건&lt;/th&gt;
&lt;th&gt;설명&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;where T: U&lt;/td&gt;
&lt;td&gt;U형식 인수에 해당하는 타입이거나 상속받은 클래스만&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where T: struct&lt;/td&gt;
&lt;td&gt;값 형식만&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where T: class&lt;/td&gt;
&lt;td&gt;참조 형식만&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;where T: new()&lt;/td&gt;
&lt;td&gt;기본생성자(매개변수가 없는)가 정의된 타입만&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public static T Max&amp;lt;T&amp;gt;(T item, T item2) where T : IComparable //[, ...] 조건을 여러개 받을 수도 있다
{
    if(item1.CompareTo(item2) &amp;gt;= 0)
        return item1;
    return item2;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;default 예약어: 제네릭 형식 매개변수로 전달된 값의 초기값을 반환해야하는 경우가 있을 수 있다. 이때 컴파일러가 자동으로 결정할 수 있도록 하는게 default(T) 예약어이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;yield-returnbreak와-ienumerator&quot;&gt;&lt;a href=&quot;#yield-returnbreak%EC%99%80-ienumerator&quot; aria-label=&quot;yield returnbreak와 ienumerator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;yield return/break와 IEnumerator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;foreach문법은 IEnumerable, IEnumerator 인터페이스를 구현한 객체를 열거할때 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;멤버는 아래와 같다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;interface IEnumerable
{
IEnumerator GetEnumerator();
}
interface IEnumerator
{
bool MoveNext(); //다음 요소 위치로 이동, 더 이상 없으면 false 반환
void Reset();       //초기 상태로 바꿈
Object Current    //현재 위치의 요소를 가져오기
{
    get;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;IEnumerable의 독특한 점은 &quot;무한집합&quot;을 표현할 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IEnumerable, IEnumerator를 간편하게 구현하고싶다면 yield 예약어를 사용하면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;yield return을 사용하면 다음번 해당 메서드를 호출했을때 마지막 yield return 다음 코드 부터 실행한다. (IEnumerator에 Current 멤버가 있는 것을 생각해보면 된다)&lt;/li&gt;
&lt;li&gt;yield break을 사용하면 열거를 끝낼 수 있다. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;기타&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%ED%83%80&quot; aria-label=&quot;기타 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기타&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;partial 클래스: C#컴파일러는 빌드 시에 &apos;같은 프로젝트&apos;에 있는 partial 클래스를 하나로 모아 단일 클래스로 빌드한다.&lt;/li&gt;
&lt;li&gt;nullable 형식:  System.Nullable&lt;T&gt;은 값이 없는 상태 자체를 표기하기 위한 타입으로, T? 형식으로 간편하게 표기할 수 있다. HasValue와 Value 두 가지 속성을 제공한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;익명메서드: 이름이 없는 메서드로, 메서드가 일회성으로만 필요할때 편의상 사용된다(syntactic sugar)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;delegate 예약어를 사용해 메서드의 코드를 전달한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;delegate int? MyDevide(int a, int b)
static void Main(string[] args)
{
MyDivde myFunc = delegate (int a, int b)
{
    if (b==0)
        return null;
    return a/b;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - AppDomain과 리플렉션]]></title><description><![CDATA[응용프로그램 도메인(App Domain) 닷넷 응용프로그램은 EXE 프로세스로 실행되고 내부의 CLR에 의해 응용프로그램 도메인(App Domain…]]></description><link>https://parkdoyeon.github.io//c-기본서-app-domain과-리플렉션</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-app-domain과-리플렉션</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[dll]]></category><category><![CDATA[AppDomain]]></category><category><![CDATA[Reflection]]></category><pubDate>Sun, 02 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;응용프로그램-도메인app-domain&quot;&gt;&lt;a href=&quot;#%EC%9D%91%EC%9A%A9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EB%8F%84%EB%A9%94%EC%9D%B8app-domain&quot; aria-label=&quot;응용프로그램 도메인app domain permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;응용프로그램 도메인(App Domain)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;닷넷 응용프로그램은 EXE 프로세스로 실행되고 내부의 CLR에 의해 응용프로그램 도메인(App Domain)으로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이는 내부적인 격리 공간으로, 별도의 통신방법을 설정하지 않는 한 서로 침범할 수 없으며,&lt;/li&gt;
&lt;li&gt;하나의 App Domain이 불안정하게 종료가 되어도 영향을 끼치지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;App Domain 내부에는 어셈블리들이 로드된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 도메인들은 메인에서 AppDomain 클래스와 같은 reflection관련 클래스를 통해 이름과 목록을 조회하고, 직접 호출할 수 있다.&lt;/li&gt;
&lt;li&gt;심지어 직접 인스턴스를 생성할수도 있다.&lt;/li&gt;
&lt;li&gt;해제도 가능한데, Default AppDomain은 직접 해제가 불가능하고 프로세스가 종료될때만 해제된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;리플렉션reflection&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98reflection&quot; aria-label=&quot;리플렉션reflection permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;리플렉션(Reflection)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;리플렉션을 이용한 메서드 접근은 메인스레드에서 실행하는 것과 동일하게 어셈블리의 클래스와 메서드 접근을 가능케 하며,&lt;/li&gt;
&lt;li&gt;컴파일 시점에서 다른 코드에 대한 정보가 없더라도 접근이 가능하도록 한다.&lt;/li&gt;
&lt;li&gt;OOP의 캡슐화 마저도 무시할 수 있는 위력을 갖는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이러한 접근은 &apos;느슨한 결합&apos;이라고 하며, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;속도 저하에대한 이슈가 있지만 기술로 뛰어넘는 추세이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;때문에 프레임워크 제작에 유용하게 사용될 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 데이터베이스]]></title><description><![CDATA[데이터 자료형 문자열 데이터형에서 'n' 접두사가 붙은 것은 유니코드 문자(UCS-2)를 담는 것을 의미한다 가령 char(10)은 영문10자, 한글5자라면, nchar(10)은 영문10자, 한글 10자를 표현할 수 있다. 문자열 데이터형에서 'var…]]></description><link>https://parkdoyeon.github.io//c-기본서-데이터베이스</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-데이터베이스</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[database]]></category><category><![CDATA[CRUD]]></category><category><![CDATA[POCO]]></category><pubDate>Sun, 02 Dec 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;데이터-자료형&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;데이터 자료형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 자료형&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;문자열 데이터형에서 &apos;n&apos; 접두사가 붙은 것은 유니코드 문자(UCS-2)를 담는 것을 의미한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령 char(10)은 영문10자, 한글5자라면, nchar(10)은 영문10자, 한글 10자를 표현할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문자열 데이터형에서 &apos;var&apos;은 가변데이터형이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char(10)은 무조건 10바이트 데이터를 담지만 varchar(10)은 10 이하의 데이터 자료형을 담는다.&lt;/li&gt;
&lt;li&gt;임의의 문자열을 담는 경우 가변형은 데이터를 절약하는 효과가있지만 속도가 저하된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터-조회&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C&quot; aria-label=&quot;데이터 조회 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 조회&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;내부적으로 레코드를 가리키는 것을 커서(Cursor)라고 부른다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 조회 속도 향상시키기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PK를 통해 고유한 값을 갖는 칼럼을 지정할 수 있다.&lt;/li&gt;
&lt;li&gt;데이터 칼럼에 속성의 ID옵션에서 인덱스 속성을 추가할 수 있다.&lt;/li&gt;
&lt;li&gt;고유한 값이 아니지만 속도향상을 위해 정렬될 필요가 있다면 지정하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;adonet&quot;&gt;&lt;a href=&quot;#adonet&quot; aria-label=&quot;adonet permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ADO.NET?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터 조회를 위한 프로토콜은 데이터베이스 업체에서 잘 알고있기 때문에 통신을 위한 조회 라이브러리를 직접 배포한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개발자는 통신 자체보다 라이브러리를 잘 사용하는게 중요하다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.net에서는 이러한 라이브러리를 &apos;ADO.NET 데이터 제공자&apos;라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;read&quot;&gt;&lt;a href=&quot;#read&quot; aria-label=&quot;read permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;READ&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;문자열 연산의 단점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL 문법에 해당하는 문자열을 사용자가 입력하는 경우 수행하는 쿼리가 의도치 않은 결과를 낳을 수 있다. 이를 SQL Injection이라고 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL 서버는 수행되는 쿼리를 내부적인 컴파일 과정을 거쳐 실행 계획을 생성한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한번 수행한 쿼리의 경우 실행계획을 캐싱해서 다음 수행시 빠르게 수행할 수 있도록 한다&lt;/li&gt;
&lt;li&gt;그러나 단일 쿼리문으로 수행되는 경우 동일 쿼리 발생확률이 낮아지므로 캐시성능이 좋지않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&apos;@&apos;입력과 같이 파라미터가 매개변수화된 쿼리를 반드시 사용하자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최근 들어서 보안문제가 점점 중요해지므로 더이상 선택의 문제가 아니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tier&quot;&gt;&lt;a href=&quot;#tier&quot; aria-label=&quot;tier permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;tier&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Data Access Component 클래스는 실행 어셈블리 생성 프로젝트로부터 분리해서 별도의 어셈블리에 담는 것이 일반적이다&lt;/li&gt;
&lt;li&gt;프로그램 로직을 논리/물리적으로 분리하는 것을 계층(tier)을 나눈다고 표현한다.&lt;/li&gt;
&lt;li&gt;층을 나누면 변화의 수용력이 높아진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;데이터-컨테이너와-orm-poco-dataset&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-orm-poco-dataset&quot; aria-label=&quot;데이터 컨테이너와 orm poco dataset permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터 컨테이너와 ORM: POCO, DataSet&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CRUD: Create, Retrieve, Update, Delete&lt;/li&gt;
&lt;li&gt;데이터 컨테이너는 관계형 데이터 베이스를 프로그래밍 언어에 정의된 타입에 대응시킨 것이다. 이를 ORM, 흔히 OR 매핑이라고 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POCO(Plain Old CLR Object): 단순한 유형의 닷넷 클래스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 컨테이너로서, 테이블에서 정의하는 칼럼의 집합이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POCO를 사용하지 않아도 DataSet만으로도 데이터IO를 할 수있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그러나 DataSet하나만 생성해도 DataColumn, DataRow, DataTable 타입이 생성되고, 따라서 메모리가 증가 이슈가 생긴다.&lt;/li&gt;
&lt;li&gt;또한, DataRow가 값을 보관하는 단위는 Object이므로 박싱/언박싱 이슈가 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tranjection-scope&quot;&gt;&lt;a href=&quot;#tranjection-scope&quot; aria-label=&quot;tranjection scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tranjection Scope&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;using 문을 이용해 구역지정을 하고 complete()메소드 호출을 통해 트랜잭션을 실행할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - BCL: 비동기 호출]]></title><description><![CDATA[비동기 호출 일반적으로 동기호출을 Blocking 호출이라고 한다. 동기호출을 하면 해당 스레드는 아무것도 수행하지 못한다. 예시로 disk I/O…]]></description><link>https://parkdoyeon.github.io//c-기본서-bcl-비동기-호출</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-bcl-비동기-호출</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[thread]]></category><category><![CDATA[async]]></category><pubDate>Thu, 29 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;비동기-호출&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C&quot; aria-label=&quot;비동기 호출 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비동기 호출&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 동기호출을 Blocking 호출이라고 한다. 동기호출을 하면 해당 스레드는 아무것도 수행하지 못한다. 예시로 disk I/O가 있다.&lt;/li&gt;
&lt;li&gt;비동기 호출은 결국 또 다른 스레드를 만들어 실행시킨다는 점에서 스레드의 한 종류로 볼 수 있다.&lt;/li&gt;
&lt;li&gt;ThreadPool과 비교를 했을때 비동기 스레드는 바로 작업을 수행한다는 점에서 조금 빠를 수 있는데, 이정도 의미가 있는 경우는 이용자 수가 아주 많은경우이다(460p 참조)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;비동기-호출-delegate&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C-delegate&quot; aria-label=&quot;비동기 호출 delegate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비동기 호출: Delegate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I/O말고도 일반 메서드에서도 비동기 호출을 할 수 있는 수단으로, BCL이 제공하는 기능이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;간결하기때문에 좋다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public delegate long CalcMethod(int start, int end);
static void Main(string[] args) {
CalcMethod calc = new CalcMethod(Calc.Cumsum);
 
IAsyncResult ar = calc.BeginInvoke(1, 100, null, null);
//delegate타입의 BeginInvoke 메서드 호출하며 ThreadPool의 스레드에서 실행된다

ar.AsyncWaitHandle.WaitOne(); 
//AsyncWaitHandle은 EventWaitHandle타입이고, Cal.CumSum이 완료될때까지 현재 스레드를 대기시킨다.

long result = calc.EndInvoke(ar);
//반환 값을 얻기 위해 호출하는 메서드, 없어도 반드시 호출하는 것을 권장한다.
//실행을 차단할 수있으므로 사용자 인터페이스 제공하는 스레드에서는 호출하지 말아야한다
}
public class Calc {
public static long Cumsum(int start, int end) {
    long sum = 0;
    for(int i=start; i&amp;lt;=end; i++;) {
        sum += i;
    }
    return sum;
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;filestreambeginread-구현과-유사하게-비동기-구현하기&quot;&gt;&lt;a href=&quot;#filestreambeginread-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%9C%A0%EC%82%AC%ED%95%98%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0&quot; aria-label=&quot;filestreambeginread 구현과 유사하게 비동기 구현하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FileStream.BeginRead 구현과 유사하게 비동기 구현하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MSDN문서를 보면 delegate구현 방식에 따라 FileStream의 BeginRead/EndRead가 구현되었다.&lt;/li&gt;
&lt;li&gt;BeginInvoke의 세번째 인자로 콜백메서드를 지정해주면된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;네번째 인자는 StateObject로, 해당 메서드를 여러 곳에서 비동기 호출 했을 때 각각의 비동기 호출을 구분하는 역할을 갖는다.(stateObject - A user-provided object that distinguishes this particular asynchronous read request from other requests.) &lt;a href=&quot;http://www.java2s.com/Tutorials/CSharp/System.IO/FileStream/C_FileStream_BeginRead.htm&quot;&gt;참고&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;public delegate long CalcMethod(int start, int end);
static void Main(string[] args) {
CalcMethod calc = new CalcMethod(Calc.Cumsum);
calc.BeginInvoke(1, 100, calcCompleted, calc);
}
static void calcCompleted(IAsyncResult ar) {
CalcMethod calc = ar,AsyncState as CalcMethod;
long result = calc.EndInvoke(ar);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 네트워크]]></title><description><![CDATA[비동기 호출 프로토콜: 어떤 절차를 거쳐서 통신을 주고받을것이냐에 대한 규칙 현재 인터넷에서 가장 많이사용하는 규칙은 tcp/ip이다. IPv4: Internet Protocol의 4번째버전에 해당하는 기술 이미 주소가 바닥났지만 하나의 IP…]]></description><link>https://parkdoyeon.github.io//c-기본서-네트워크</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-네트워크</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[network]]></category><category><![CDATA[tcp]]></category><category><![CDATA[udp]]></category><category><![CDATA[ip]]></category><pubDate>Thu, 29 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;비동기-호출&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C&quot; aria-label=&quot;비동기 호출 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비동기 호출&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로토콜: 어떤 절차를 거쳐서 통신을 주고받을것이냐에 대한 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 인터넷에서 가장 많이사용하는 규칙은 tcp/ip이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IPv4: Internet Protocol의 4번째버전에 해당하는 기술&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이미 주소가 바닥났지만&lt;/li&gt;
&lt;li&gt;하나의 IP라우터를 통해 공용IP를 공유하고 사설 IP를 할당받는 등의 방식으로 큰 불편을 느끼지 못하고 있다.&lt;/li&gt;
&lt;li&gt;사설IP는 공식적인 인터넷 기관에 사용여부가 등록되지 않은 IP이다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;포트&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP주소는 컴퓨터에 장착된 네트워크 어댑터는 식별해주지만 실행중인 프로그램은 구분할 수 없다&lt;/li&gt;
&lt;li&gt;이러한 구분을 위해 포트를 사용한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DNS: 도메인 하나에 여러개의 IP를 묶을 수 있다. 이를 통해 부하분산(load balance)을 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;string myComputer = Dns.GetHostName();
IPHostEntry entry = Dns.GetHostEntry(myComputer);
foreach (IPAddress ipAddress in entry.AddressList)
Console.WriteLine(ipAddress.AddressFamily+&amp;quot;: &amp;quot;+ipAddress)
//ex) InterNetworkV6: fe80::bcae:bc0f:10d5:4ec4%12
//ex) InterNetwork: 192.168.50.95&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;클라이언트는 ping 명령어를 통해 dns의 어떤 IP와 바인딩이 됐는지 확인할 수 있으며&lt;/li&gt;
&lt;li&gt;바인딩 정보는 시스템에 저장된다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;관리자모드로 cmd를 실행하고 아래의 명령어를 통해 목록을 비울 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;$ ipconfig \flushdns&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;사설 IP의 경우로 많이 사용되는 대역은 아래와 같다 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.0.0.0 ~ 10.255.255.255&lt;/li&gt;
&lt;li&gt;172.16.0.0 ~ 172.31.255.255&lt;/li&gt;
&lt;li&gt;192.168.0.0 ~ 192.168.255.255&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemnetsocketssocket&quot;&gt;&lt;a href=&quot;#systemnetsocketssocket&quot; aria-label=&quot;systemnetsocketssocket permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.Net.Sockets.Socket&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Socket 클래스는 IDisposable 상속을 받기 때문에 자원해제를 해줘야한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP와 UDP의 서버소켓 모두 특정 IP와 바인딩된다. 바인딩된 IP는 접점(EndPoint)이라고 부른다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이렇게 바인딩이 되고 나면 다른 소켓에서는 절대로 동일한 접점 정보로 바인딩 할 수 없다.&lt;/li&gt;
&lt;li&gt;소켓은 모든 IP에 대해 바인딩할 수 있는 방법을 제공하는데 이때 제공하는 주소가 &quot;0.0.0.0&quot;이다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램을 실행중인 컴퓨터의 IP주소를 의미하는 용도로 &quot;127.0.0.1&quot;이 예약되어있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loopback address라고 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemnetsocketssocket-udp&quot;&gt;&lt;a href=&quot;#systemnetsocketssocket-udp&quot; aria-label=&quot;systemnetsocketssocket udp permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.Net.Sockets.Socket: UDP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TCP와 UDP의 제일 큰 차이는 데이터 전송의 신뢰성확보&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;때문에 TCP가 더 느리지만&lt;/li&gt;
&lt;li&gt;UDP를 사용할때도 신뢰성 확보를 위한 코드를 추가하게되면 비슷해져서 TCP를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP는 신뢰성이 결여되어있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 의미는 즉, 중간에 거쳐가는 네트워크 장치가 많아질수록 상대방에게 데이터가 전달되지 않을수도 있다는 점이다.&lt;/li&gt;
&lt;li&gt;뿐만아니라 파편화되어 전달될경우 패킷이 유실될 확률이 높다.&lt;/li&gt;
&lt;li&gt;또한 순서가 확보되지 않으며&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UDP는 한번에 보낼 수 있는 데이터 한계가 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.Net의 UDP용 SendTo()메서드는 65535바이트를 넘을 수 없다. 또한 UDP 장비중에선 32KB정도만 허락하는 경우도 있으므로 많은 데이터를 보내는것을 권장하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemnetsocketssocket-tcp&quot;&gt;&lt;a href=&quot;#systemnetsocketssocket-tcp&quot; aria-label=&quot;systemnetsocketssocket tcp permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.Net.Sockets.Socket: TCP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TCP는 Listen(9)호출을 통해 클라이언트로부터 접속을 허용하며, 안에 인자로 받는 숫자는 허용하는 클라이언트 접속 큐의 갯수이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accpet()를 통해 클라이언트 연결을 받고 Send/Receive를 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;소켓통신은 기본적으로 동기호출이므로 Send/Receive를 호출한 메서드는 블로킹된다&lt;/li&gt;
&lt;li&gt;때문에 서버가 Accept를 빠르게 처리할 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Accept를 ThreadPool을 통해 비동기로 구현할 수 있지만&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 경우는 스레드 문맥 전환문제가 생긴다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 극복하기위해 비동기로 구현하는 Begin/End+Send/Receive가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;그러나 이 방법 또한 과다하게 코드가 복잡해지므로 고성능 TCP서버 구현이 아니면 스레드와 클라이언트 간의 1:1 대응 방식이 선호된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 통신은 TCP 서버/클라이언트의 한 사례이다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BCL은 Socket클래스를 사용하지 않고 HTTP통신을 쉽게 구현할 수 있는&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.Net.HttpWebRequest와&lt;/li&gt;
&lt;li&gt;System.Net.WebClient를 제공한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - BCL: Thread, Monitor, Lock, Interlocked]]></title><description><![CDATA[Thread Context 스레드는 CPU의 명령어 실행과 관련된 정보를 보관한다. 이를 스레드 문맥이라고 한다. 즉, 언제 실행하고 또 이전에 얼만큼 실행했는지를 기억하는 것이다. 초기에는 단일 CPU였기 떄문에 다중스레드는 1개의 CPU…]]></description><link>https://parkdoyeon.github.io//c-기본서-bcl-thread-monitor-lock-interlocked</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-bcl-thread-monitor-lock-interlocked</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[thread]]></category><category><![CDATA[monitor]]></category><category><![CDATA[lock]]></category><category><![CDATA[interlocked]]></category><pubDate>Mon, 26 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;thread-context&quot;&gt;&lt;a href=&quot;#thread-context&quot; aria-label=&quot;thread context permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Thread Context&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;스레드는 CPU의 명령어 실행과 관련된 정보를 보관한다. 이를 스레드 문맥이라고 한다.&lt;/li&gt;
&lt;li&gt;즉, 언제 실행하고 또 이전에 얼만큼 실행했는지를 기억하는 것이다.&lt;/li&gt;
&lt;li&gt;초기에는 단일 CPU였기 떄문에 다중스레드는 1개의 CPU에서 조금씩 실행시간을 나누어 실행하는 형태였지만&lt;/li&gt;
&lt;li&gt;멀티 CPU/Core시대가 오면서 진정한 다중 스레드 실행이 가능해졌다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스레드-제대로-이해하기-systemthreadingthread&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-systemthreadingthread&quot; aria-label=&quot;스레드 제대로 이해하기 systemthreadingthread permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드 제대로 이해하기: System.Threading.Thread&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static voic Main(string[] args) {
    Thread t = new Thread(threadFunc);
    t.background = true;
    t.start(); 
}
static void ThreadFunc() {
    Console.WriteLine(&amp;quot;60초 후 종료&amp;quot;);
    Thread.Sleep(1000*60);
    Console.WriteLine(&amp;quot;종료&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;위의 코드를 보면 t는 배경 스레드이기때문에 메인스레드 실행과 무관하게 실행된다. 때문에 콘솔이 찍히지 않거나 아주 낮은확률로 첫번째 콘솔라인만 찍히게 된다.&lt;/li&gt;
&lt;li&gt;여기서 backgroud옵션을 제거하고 실행하면 전경스레드(foreground thread)에 속하게 되므로 스레드 실행 종료 후에 메인스레드가 종료된다.&lt;/li&gt;
&lt;li&gt;스레드에 인자를 넘길 수 있다. (436p~)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;다중스레드에서의-공유-자원-관리-systemthreadingmonitor&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-systemthreadingmonitor&quot; aria-label=&quot;다중스레드에서의 공유 자원 관리 systemthreadingmonitor permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중스레드에서의 공유 자원 관리: System.Threading.Monitor&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;한개의 스레드에 할당된 스택의 용량은 1MB이며, 메모리가 허용하는한 원하는만큼 생성할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령 32비트 윈도우에서 32비트 프로세스는 2GB메모리가 허용되므로, 오직 스레드에만 메모리가 사용된다고 가정해도 2000개를 넘을 수 없다.&lt;/li&gt;
&lt;li&gt;그러나 64비트 시대가 열리면서 tera바이트 단위로 메모리 할당이 가능해져 스레드 갯수의 제한이 풀렸다봐도 무방하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;코드상 여러개의 스레드를 동시의 실행시키면 그 실행순서는 담보할 수 없다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 경우 &apos;공유 리소스 동기화&apos; 문제가 생긴다. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이를 해소하기위한 BCL 제공 클래스가 Monitor이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static void ThreadFunc(object inst) {
Program pg = inst as Program;
for(int i=0; i&amp;lt;100000; i++) {
Monitor.Enter(pg);
try {
    pg.number = pg.number + 1;
} finally {
    Monitor.Exit(pg);
    //Enter와 Exit 코드 사이에 위치한 모든 코드는 스레드 하나만 진입해서 실행할 수 있다. 즉, 해당 코드가 한 스레드에 의해 점유된 상태면 다른 스레드는 대기상태가 된다.
}
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;다중스레드에서의-공유-자원-관리-lock&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-lock&quot; aria-label=&quot;다중스레드에서의 공유 자원 관리 lock permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중스레드에서의 공유 자원 관리: lock&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;C#은 Monitor와 동일하지만 더 간결한 lock예약어를 제공한다. 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static void ThreadFunc(object inst) {
Program pg = inst as Program;
for(int i=0; i&amp;lt;100000; i++) {
    Monitor.Enter(pg);
    lock(pg)
    {
        pg.number = pg.number + 1;
    }
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lock이나 Monitor를 사용하지 않는 객체 인스턴스 사용은 thread-safe하지 않다고 한다. MSDN은 BCL 도움말에서 타입별 메서드의 스레드 안정성을 명시하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;가령 ArrayList타입의 정적멤버는 다중 스레드 접근에 안전하지만 인스턴스는 안전하지 않다고 명시한다.&lt;/li&gt;
&lt;li&gt;그럼 전부 thread safe하게 만들면 되지 않나 할 수 있지만 그럼 성능이 나지 않는다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;다중스레드에서의-공유-자원-관리-interlocked&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%A4%91%EC%8A%A4%EB%A0%88%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90-%EA%B4%80%EB%A6%AC-interlocked&quot; aria-label=&quot;다중스레드에서의 공유 자원 관리 interlocked permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다중스레드에서의 공유 자원 관리: interlocked&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;BCL은 다중 스레드에서의 공유자원을 사용하는 몇몇 패턴에 대해 정적메서드를 제공한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가령 32/64비트 숫자 타입의 일부 연산은 interlocked를 통해 처리할 수 있다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class MyData {
int number = 0;
public int Number {get {return number;}}
public void Increment() {
    Interlocked.Increment(ref number);
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;위와 같은 연산을 원자적인 연산, 즉 쪼갤수 없는 단일한 연산이라고 할 수 있는데, 이는 프로그래밍적인 의미에서 비트 연산을 생각하면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;가령 32비트 운영체제에서 int64 변수에 5를 할당하면 아래와같이 연산을 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;하위 32비트에 0x00000000를 쓰고&lt;/li&gt;
&lt;li&gt;상위 32비트에 0x05000000를 쓴다 *16비트 연산의 경우 &lt;a href=&quot;http://webcreate.tistory.com/entry/16%EB%B9%84%ED%8A%B8-32%EB%B9%84%ED%8A%B8-%EB%B9%84%ED%8A%B8%EC%97%B0%EC%82%B0-%EB%B0%A9%EB%B2%95&quot;&gt;참고&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스레드-효율적으로-쓰기-systemthreadingthreadpool&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%93%B0%EA%B8%B0-systemthreadingthreadpool&quot; aria-label=&quot;스레드 효율적으로 쓰기 systemthreadingthreadpool permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드 효율적으로 쓰기: System.Threading.ThreadPool&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정스레드를 연산만 하고 바로 종료하는 경우, 효율적으로 사용하기 위해서 ThreadPool이 제공된다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ThreadPool을 사용해서 스레드를 실행하면 메서드를 실행한 스레드는 바로 종료되지 않고 일정시간 보관된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static void Main(string[] args) {
MyData data = new MyData();
ThreadPool.QueueUserWorkItem(threadFunc, data);
ThreadPool.QueueUserWorkItem(threadFunc, data);
Thread.Sleep(1000);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스레드간-동기화-systemthreadingeventwaithandle&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C%EA%B0%84-%EB%8F%99%EA%B8%B0%ED%99%94-systemthreadingeventwaithandle&quot; aria-label=&quot;스레드간 동기화 systemthreadingeventwaithandle permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드간 동기화: System.Threading.EventWaitHandle&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EventWaitHandle은 Monitor처럼 스레드간 동기화 수단중 하나라고 보면 된다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스레드간 non-signal &amp;#x3C;--&gt; signal 상태별로 할 액션을 지정해주며 동기화 처리를 한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static void Main(string[] args) {
EventWaitHandle ewh = new EventWaitHandle (false, EventResetMode.ManualReset)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - BCL: File, Direcotry, Path]]></title><description><![CDATA[System.IO.FileStream MemoryStream은 메모리에 할당된 바이트배열을 읽고 쓰지만 FileStream은 디스크 파일을 읽고 쓴다 읽을때는 StreamWriter, 가독성을 무시하고 효율적으로 기록을 하려면 BinaryWriter…]]></description><link>https://parkdoyeon.github.io//c-기본서-bcl-file-direcotry-path</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-bcl-file-direcotry-path</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[FileStream]]></category><category><![CDATA[File]]></category><category><![CDATA[Directory]]></category><category><![CDATA[Path]]></category><pubDate>Tue, 20 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;systemiofilestream&quot;&gt;&lt;a href=&quot;#systemiofilestream&quot; aria-label=&quot;systemiofilestream permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.IO.FileStream&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;MemoryStream은 메모리에 할당된 바이트배열을 읽고 쓰지만&lt;/li&gt;
&lt;li&gt;FileStream은 디스크 파일을 읽고 쓴다&lt;/li&gt;
&lt;li&gt;읽을때는 StreamWriter, 가독성을 무시하고 효율적으로 기록을 하려면 BinaryWriter를 사용하면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mode/Access/Share&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mode: Open, Create, OpenOrCreate, Truncate(기존데이터 삭제하고 열기), Append(마지막으로 읽던 position으로 이동해서 무조건 열기(Write접근만 가능) - 로깅목적으로 사용함)&lt;/li&gt;
&lt;li&gt;Access: Read, Write, ReadWrite(읽기쓰기 목적으로 열기), &lt;/li&gt;
&lt;li&gt;Share: None(두번이상 열면 무조건 실패, 파일을 맨 처음 열고있는 스트림만 사용하기), Read, Write, ReadWrite(같은 파일을 서로 다른 스트림에서 읽고 쓰는게 가능함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemiofile-systemiofileinfo&quot;&gt;&lt;a href=&quot;#systemiofile-systemiofileinfo&quot; aria-label=&quot;systemiofile systemiofileinfo permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.IO.File, System.IO.FileInfo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;File: 자주 사용되는 조작기능을 담은 정적클래스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Copy, Exists, Move(파일이동), Read, Write 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FileInfo는 File타입의 기능을 인스턴스 멤버로 일부 구현하고 사용법은 거의 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemiodirectory-systemiodirectoryinfo-systemiopath&quot;&gt;&lt;a href=&quot;#systemiodirectory-systemiodirectoryinfo-systemiopath&quot; aria-label=&quot;systemiodirectory systemiodirectoryinfo systemiopath permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.IO.Directory, System.IO.DirectoryInfo, System.IO.Path&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;마찬가지로 Directory는 정적 타입이고, DirectoryInfo는 Directory기능의 일부를 구현한 인스턴스멤버다&lt;/li&gt;
&lt;li&gt;GetFiles, GetDirectories 등을 통해 지정된 경로에 있는 하위 디렉토리/파일 목록을 문자열로 갖고올 수 있다&lt;/li&gt;
&lt;li&gt;이 경우 &apos;?&apos;와 &apos;*&apos; 와일드카드 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;가령 GetFiles(targetPath, &apos;???.dll&apos;)과 같이 쓸 경우 해당 경로에 있는 파일중 파일명이 3글자인 dll목록을 갖고올 수 있다.&lt;/li&gt;
&lt;li&gt;Move를 통해 디렉토리를 이동할 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;systemiopath&quot;&gt;&lt;a href=&quot;#systemiopath&quot; aria-label=&quot;systemiopath permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;System.IO.Path&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;경로와 관련한 유용한 정적메서드를 제공하므로 참조할 것 (426p)&lt;/li&gt;
&lt;li&gt;특히 Path.Combine메서드는 &apos;folder&apos; + &apos;\temp.exe&apos;와 같이 통일이 안된 경로 문자열을 적절한 방식으로 혼합해준다.&lt;/li&gt;
&lt;li&gt;사용자로부터 경로를 입력받는 경우 허용되지 않는 문자가 포함될때 exception이 발생할수도 있는데,&lt;/li&gt;
&lt;li&gt;GetInvalidFileNameChars, GetInvalidPathChars같은 경우는 폴더명이나 경로에 허용되지 않는 문자열을 찾아낸다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - BCL: 시간계산, Collection, 문자열처리, 직렬화와 Stream]]></title><description><![CDATA[UTC, GMT 영국 기준 동쪽인 곳은 시간이 증가하므로 대한민국은 GMT +9이다. 이 시간을 Korean Standard Time이라고 한다. 세계협정시(Universal Time Coordinated)가 GMT…]]></description><link>https://parkdoyeon.github.io//c-기본서-bcl-시간계산-collection-문자열처리-직렬화와-stream</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-bcl-시간계산-collection-문자열처리-직렬화와-stream</guid><category><![CDATA[c#]]></category><category><![CDATA[bcl]]></category><category><![CDATA[DateTime]]></category><category><![CDATA[collection]]></category><category><![CDATA[encoding]]></category><category><![CDATA[regex]]></category><category><![CDATA[string]]></category><category><![CDATA[serialization]]></category><category><![CDATA[stream]]></category><pubDate>Tue, 13 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;utc-gmt&quot;&gt;&lt;a href=&quot;#utc-gmt&quot; aria-label=&quot;utc gmt permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UTC, GMT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;영국 기준 동쪽인 곳은 시간이 증가하므로 대한민국은 GMT +9이다. 이 시간을 Korean Standard Time이라고 한다.&lt;/li&gt;
&lt;li&gt;세계협정시(Universal Time Coordinated)가 GMT를 제치고 표준시로 인정받고있지만 GMT와 소수점 차이로 시간차이가 있기 때문에 일반인 입장에선 영향받는 부분이 없다.&lt;/li&gt;
&lt;li&gt;DateTime.Now 는 local time을 반환하므로 UTC +9를 반환한다&lt;/li&gt;
&lt;li&gt;닷넷 DateTime은 1년 1월 1일 기준으로 시간 기준값을 담는다.&lt;/li&gt;
&lt;li&gt;그러나 자바의 DateTime은 1970년 1월 1일(Epoch) 기준값을 담는다. 이 시간을 Epoch Time이라고 한다.&lt;/li&gt;
&lt;li&gt;때문에 System.currentTimeMillis == (DateTime.UtcNow.Ticks-1970년1월1일까지의 Ticks)*10000&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;시간-계산&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84-%EA%B3%84%EC%82%B0&quot; aria-label=&quot;시간 계산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시간 계산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DateTime 연산중에 유일하게 가능한 것이 빼기이고, 연산 결과는 TimeSpan에 담긴다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;더 정확한 시간계산은 StopWatch를 통해 가능하다. 성능측정시 자주쓰인다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;Stopwatch st = new Stopwatch();
st.Start();
//동작 수행
st.Stop();
Console.WriteLine(&amp;quot;Millisecond: &amp;quot;+st.ElapsedTicks/10000);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;collection&quot;&gt;&lt;a href=&quot;#collection&quot; aria-label=&quot;collection permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Collection&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정해지지 않은 크기의 배열을 구현한 것을 컬렉션이라고 한다.&lt;/li&gt;
&lt;li&gt;콜렉션타입 리스트들은 키와 값으로 들어가는 자료형이 Object형식이라 박싱문제가 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ArrayList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이를 해결하기 위해서는 닷넷 2.0부터 지원되는 Generic이 적용된 List&lt;T&gt;을 사용하는 것이 권장된다.&lt;/li&gt;
&lt;li&gt;같은 타입 Object를 사용하면 Sort()를 통해 순서를 정리할 수 있다.&lt;/li&gt;
&lt;li&gt;사용자 지정타입 Object의 경우 Sort의 델리게이트 인자를 받아 구현하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hashtable&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;value뿐만이 아니라 바로 hash값이 있는 key가 있는 배열이다.&lt;/li&gt;
&lt;li&gt;때문에 ArrayList와 비교했을때 빠른 검색속도에 유리하다.&lt;/li&gt;
&lt;li&gt;중복 key가 들어가면 Argument Exception이 발생하므로 유의&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SortedList&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hashtable과 유사하지만,&lt;/li&gt;
&lt;li&gt;key자체가 정렬되어 값의 순서에 영향을 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack, Queue&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문자열-처리&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;문자열 처리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열 처리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IndexOf() 문자열의 위치 반환하고 없으면 -1 반환&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string.Format()을 통해 문자열의 반환 형태를 조정할 수있다. 아래 참조.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;string.Format(&amp;quot;날짜: {0, -20:D}, 판매 수량: {1, 15:N}&amp;quot;, DateTime.Now, 267)
//Format 함수에 0번째 인자를 상세 날짜형식(D)으로 쓰고, 왼쪽부터 작성해서 20번 인덱스 위치까지 여백은 오른쪽에 남긴다.
//Format 함수에 1번째 인자를 숫자 형식(N)으로 쓰고, 오른쪽에 붙여서 작성해서 15번찌 위치까지 여백은 왼쪽에 남긴다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;string에 대한 모든 변환은 새로운 메모리 할당을 발생시킨다. &lt;/li&gt;
&lt;li&gt;때문에 StringBuilder를 사용한 다음에 toString()으로 변환시켜주자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인코딩-정규식&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EC%BD%94%EB%94%A9-%EC%A0%95%EA%B7%9C%EC%8B%9D&quot; aria-label=&quot;인코딩 정규식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인코딩, 정규식&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;문자가 숫자(컴퓨터가 이해할 수 있는 언어)로 표현되는 것을 인코딩(부호화)라고 한다.&lt;/li&gt;
&lt;li&gt;Regex는 생성자의 두번쨰 인자로 대소구분을 할것인지 말것인지 옵션을 줄 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Regex객체의 Replace()기능은 두번째 인자로 델리게이트 메소드를 받는다. 첫번쨰 인자와 일치하는 값을 찾아서 변환해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;string txt = &amp;quot;Hello, World! Welcome to my world!&amp;quot;;
Regex regex = new Regex(&amp;quot;world&amp;quot;, RegexOptions.IgnoreCase);
string result = regex.Replace(txt, funcMatch);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;static string funcMatch(Match match)
{ return &quot;Universe&quot;; }&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;### 직렬화/역직렬화
- 네트워크선을 타고 이동하는 데이터는 결국 byte데이터이다
- 좁은의미에서 데이터를 일련의 바이트 데이터로 변환하는걸 직렬화(serialization)라고 하고
- 복원할 수 있는 모든 작업을 역직렬화(deserialization)이라고 한다
- 직렬화를 위한 클래스는 MemoryStream, StreamWriter, BinaryWriter 등이 있다

### 일반 데이터의 직렬화: MemoryStream, StreamWriter, BinaryWriter
- MemoryStream은 메모리에 바이트 데이터를 순서대로 읽고 쓰는 작업을 한다
    - position을 0으로 잡고 지정한 바이트 공간만큼 쓰는 작업을 한다.
    - 읽어올땐 Converter를 사용한다
- StreamWriter는 MemoryStream에서 바이트 변환시 인코딩 방식을 지정하는 불편함을 해소하기위해 나타났다
    - 즉 문자열 Stream에 쉽게 쓸 수 있도록 MS가 포함시킨것
    - Write로 들어온 문자열을 내부 버퍼에 보관하고 있다가 일정 크기에 다다르면 한꺼번에 쓰기 작업을 한다.
    - Flush는 다 차기 전에 무조건 Stream에 쓰는 역할을 하기 때문에 마지막에 한번만 호출하도록 한다.
- BinaryWriter는 문자열이 아닌 이진데이터에 특화된 기능에 쓰인다.


### 사용자 정의 클래스의 직렬화: BinaryFormatter
- 사용자 정의 클래스는 직렬화를 하기 위해 BitConverter 등을 통해 배열로 바꾼다음 Stream에 쓰면 되지만 포매터를 사용하면 더 편리하다.
- BinaryFormatter를 사용하려면
    - 클래스 상위에 [Serializable] Attribute를 지정해주면 되고,
    - 특정 필드 값을 제외하고 싶다면 그 값 위에 [NonSerialized] Attribute를 달아주면된다.
    - 문제는 BinaryFormatter는 닷넷 내부에서 정의된 것이므로 닷넷간의 통신만 가능하다는 점이다.
- 그 대안으로 XmlSeralizer가 있다
    - Xml형식으로 직렬화를 하는데, 태그를 열고 닫기 위해 문자열을 지나치게 많이 사용한다는 문제가 있다.
    - 결론적으로 닷넷간에는 BinaryFormatter, 이기종간에는 XmlSerializer를 쓰면 되는데...
- 대세는 JsonSerializer
    - Xml이 사용하는 문제열 문제를 괄호{}를 통해 해소했다.
    - 다만 닷넷에선 System.Runtime.Serialization.dll을 참조추가해야한다. &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 빌드환경과 GC, 힙과 스택]]></title><description><![CDATA[전처리기 지시문 #if #endif 잔처리기를 사용하면 컴파일시 적용되는 구문을 분기처리할 수 있다. DEBUG와 TRACE상수의 경우 빌드 옵션에서 세팅할수 있고, 별도로 세팅을 하고싶으면 아래대로 하면 된다 Project Properties…]]></description><link>https://parkdoyeon.github.io//c-기본서-빌드환경과-gc-힙과-스택</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-빌드환경과-gc-힙과-스택</guid><category><![CDATA[c#]]></category><category><![CDATA[build]]></category><category><![CDATA[GC]]></category><category><![CDATA[Stack]]></category><category><![CDATA[Heap]]></category><category><![CDATA[Attribute]]></category><category><![CDATA[예약어]]></category><category><![CDATA[dll]]></category><category><![CDATA[자원수거]]></category><pubDate>Mon, 05 Nov 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;전처리기-지시문-if-endif&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%98%EB%A6%AC%EA%B8%B0-%EC%A7%80%EC%8B%9C%EB%AC%B8-if-endif&quot; aria-label=&quot;전처리기 지시문 if endif permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전처리기 지시문 #if #endif&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;잔처리기를 사용하면 컴파일시 적용되는 구문을 분기처리할 수 있다.&lt;/li&gt;
&lt;li&gt;DEBUG와 TRACE상수의 경우 빌드 옵션에서 세팅할수 있고, 별도로 세팅을 하고싶으면 &lt;a href=&quot;https://stackoverflow.com/questions/507704/will-if-release-work-like-if-debug-does-in-c&quot;&gt;아래대로 하면&lt;/a&gt; 된다&lt;/li&gt;
&lt;li&gt;Project Properties -&gt; Build&lt;/li&gt;
&lt;li&gt;Select Release Mode&lt;/li&gt;
&lt;li&gt;in the Conditional compilation symbols textbox enter: RELEASE&lt;/li&gt;
&lt;li&gt;이 밖에도 #warning, #error, #line, #region, #endregion, #pragma 등이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;attribute&quot;&gt;&lt;a href=&quot;#attribute&quot; aria-label=&quot;attribute permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;[Attribute]&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;개발자로하여금 컴파일 후에도 EXE/DLL파일에 남길 수 있는 주석처럼 사용되는 코드&lt;/li&gt;
&lt;li&gt;라고는 하는데 우리팀은 캐싱이나 인증 로직을 조건처럼 구현할때 사용했다.&lt;/li&gt;
&lt;li&gt;직접 특성(Attribute)을 만들수도있는데, System.Attribute를 상속받으면 된다&lt;/li&gt;
&lt;li&gt;특성을 적용받는 타겟을 옵션으로 줄 수도 있다.&lt;/li&gt;
&lt;li&gt;참조: [Conditional(&quot;DEBUG&quot;)] 이렇게 입력하면 전처리기지시문처럼 해당 함수를 DEBUG때만 빌드하게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;예약어-checked-unchecked&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%95%BD%EC%96%B4-checked-unchecked&quot; aria-label=&quot;예약어 checked unchecked permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예약어 checked, unchecked&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;산술 범위가 넘어가면서 중요한 수치가 되는 값들이 증발하는 경우(overflow/underflow)를 막기위해 사용된다&lt;/li&gt;
&lt;li&gt;checked 블록을 만들고 연산을 수행하면 예외를던지고&lt;/li&gt;
&lt;li&gt;checked옵션을 전체 적용하고 unchecked블록을 생성하면 해당 블록 내에서 over/underflow가 일어나도 예외가 나타나지 않는다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;가변-매개변수-params&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EB%B3%80-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-params&quot; aria-label=&quot;가변 매개변수 params permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가변 매개변수 params&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;파라미터가 여러개가 될수도 있을 때 아래와같이 표기하면 다양하게 값을 넣을 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;static int Add(params int[] args)
{
//연산
}
static void DoSomething(params object[] args)
{
//연산
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;빌드-구성요소-dll-appconfig&quot;&gt;&lt;a href=&quot;#%EB%B9%8C%EB%93%9C-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-dll-appconfig&quot; aria-label=&quot;빌드 구성요소 dll appconfig permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빌드 구성요소: dll, app.config&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dll파일을 위한 함수는 public으로 만든다&lt;/li&gt;
&lt;li&gt;한 dll에 여러 프로세스가 접근할 수 있다&lt;/li&gt;
&lt;li&gt;그러나 프로세스별로 동일 dll의 다른 버전을 요구할수도 있다. 이때는 공개키토큰이나 어셈블리 서명방식을 통해 구분할 수 있다.&lt;/li&gt;
&lt;li&gt;app.config는 개발자 코드 실행전 단계인 CLR환경 초기화에사 어떤 값을 전달해야할때 사용되는 변수/설정사항 등을 선언해놓는 곳이다&lt;/li&gt;
&lt;li&gt;app.config를 통해 프레임워크를 설정할 수 있다. 닷넷프레임워크는 4.0이후부터 업데이트시 파일이 대체되므로 구버전을 설치한 경우 이전 버전들이 남아있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MS는 타입과 타입이 정의된 어셈블리를 느낌표로 구분한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ex) mscorlib.dll에 구현된 System.Object의 경우 -&gt; mscorlib!System.Object&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;릴리즈와-디버깅모드&quot;&gt;&lt;a href=&quot;#%EB%A6%B4%EB%A6%AC%EC%A6%88%EC%99%80-%EB%94%94%EB%B2%84%EA%B9%85%EB%AA%A8%EB%93%9C&quot; aria-label=&quot;릴리즈와 디버깅모드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;릴리즈와 디버깅모드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Release의경우 코드최적화를 하기때문에 StackTrace로 남는 내용이 정확하게 보여지지 않을 수 있다.&lt;/li&gt;
&lt;li&gt;Trace는 Debug와 달리 릴리즈모드에도 실행된다. 즉 추적을 위한 네임스페이스이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;플랫폼-선택-anycpu-x86-x64&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%AB%ED%8F%BC-%EC%84%A0%ED%83%9D-anycpu-x86-x64&quot; aria-label=&quot;플랫폼 선택 anycpu x86 x64 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플랫폼 선택 (AnyCPU, x86, x64)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일단 AnyCPU를 사용할것을 권장.&lt;/li&gt;
&lt;li&gt;x86은 어느윈도우든 32비트exe로 실행되고&lt;/li&gt;
&lt;li&gt;x64는 64비트 윈도우에서 64비트exe로만 실행된다. 32비트 윈도우에선 실행 되지 않는다.&lt;/li&gt;
&lt;li&gt;AnyCPU인 경우는 각 비트에 맞게 실행된다. 다만 오직 AnyCpu에서만 옵션을 통해 32비트 기본사용을 선택할 수 있다.&lt;/li&gt;
&lt;li&gt;32비트 기본사용 옵션이 필요한 이유는 32비트exe인 dll이 매우 많기 때문. 가령 ActiveX &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;예외처리와-자원수거&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9E%90%EC%9B%90%EC%88%98%EA%B1%B0&quot; aria-label=&quot;예외처리와 자원수거 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외처리와 자원수거&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;finally가 필요한 이유는 예외가 발생해도 db나 file은 자원수거는 해야하기떄문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자원수거를 자연스럽게 하는 또다른 방법은 using이 있다.&lt;/li&gt;
&lt;li&gt;개발자의 실수를 예방하고 방어적인 차원에서 해제코드를 넣는 것이 소멸자. 해제코드가 언제 실행될지는 모르기때문에 사용은 하지 말자.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;throw는 단독으로 사용하는게 좋다. throw ex를 하면 예외시점부터의 스택이 호출된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스택&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;스택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스택&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;힙과 스택 둘 다 데이터를 위한 메모리이다.&lt;/li&gt;
&lt;li&gt;스택은 스레드 생성이 되면 기본적으로 1mb용량으로 할당된다.&lt;/li&gt;
&lt;li&gt;스택은 메서드의 실행, 메서드 인자, 지역변수를 처리한다. 떄문에 재귀호출로인한 에러는 스택오버플로우이다.&lt;/li&gt;
&lt;li&gt;스택 에러발생시 메모리가 모두 소비되었기 때문에 StackTrace를 알려주는 메서드 호출이 불가하다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;힙&quot;&gt;&lt;a href=&quot;#%ED%9E%99&quot; aria-label=&quot;힙 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;힙&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLR에서는 기본적으로 관리힙을 가리킨다. GC의 할당, 해지를 관리한다&lt;/li&gt;
&lt;li&gt;new로 할당되는 모든 참조형 객체는 힙에 할당된다. 얘넨 모두 GC가 직접 관리한다.&lt;/li&gt;
&lt;li&gt;박싱 언박싱은 참조형데이터와 값데이터간의 이동을 의미하는데, 박싱이 일어날경우 값데이터를 참조형으로 변경하게 되므로 GC가 매우 바빠진다. 대표적인 예가 값데이터를 함수의 인자로 넣는 경우.&lt;/li&gt;
&lt;li&gt;대용량 객체 힙(Large Object Heap)이 있다. 가비지 수집마다 LOH를 이동시키는건 부담이 크므로 GC가 직접 관리하지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;gc&quot;&gt;&lt;a href=&quot;#gc&quot; aria-label=&quot;gc permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GC&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CLR의 세대는 2세대가 끝이다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[Logstash - 파이프라인 만들기]]></title><description><![CDATA[ElasticSearch와 Filebeat와의 호환성, 다른 어플리케이션보단 조금 더 프로그래밍적인 파이프라인 설정방식을 사용한다는 이유로 logstash…]]></description><link>https://parkdoyeon.github.io//logstash-파이프라인-만들기</link><guid isPermaLink="false">https://parkdoyeon.github.io//logstash-파이프라인-만들기</guid><category><![CDATA[logstash]]></category><category><![CDATA[filebeat]]></category><category><![CDATA[elk]]></category><category><![CDATA[logger]]></category><pubDate>Sat, 27 Oct 2018 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;ElasticSearch와 Filebeat와의 호환성, 다른 어플리케이션보단 조금 더 프로그래밍적인 파이프라인 설정방식을 사용한다는 이유로 logstash를 쓰기로 했다. 생각만큼 쉽지 않게 파이프라인 설정을 마치고나니 세상에 공짜는 없구나 싶었다. 어떤 기술을 제대로 이해하고 올바른 방식으로 활용하려면 시행착오를 겪어야 한다는 걸. 이 포스트에는 Logstash의 디버깅 모드 설정하는 방법과 파일비트에서 전달된 데이터의 형식, 그리고 여기에 맞는 logstash 데이터의 파이프라인 필터 설정과정을 기록했다.&lt;/p&gt;
&lt;h3 id=&quot;디버깅-모드-세팅하기&quot;&gt;&lt;a href=&quot;#%EB%94%94%EB%B2%84%EA%B9%85-%EB%AA%A8%EB%93%9C-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0&quot; aria-label=&quot;디버깅 모드 세팅하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디버깅 모드 세팅하기&lt;/h3&gt;
&lt;p&gt;먼저 파일비트-카프카-로그스태시-엘라스틱서치 구간을 실행시킨 다음에 설정테스트를 하다가, 쉽게 끝나지 않으리라는걸 깨닫고 디버깅 모드를 세팅했다. 이 판단이 더 빠르게 이뤄졌음 좋았을텐데. 세팅 전까지 파일비트를 껐다 키고, 데이터를 보려고 es인덱스를 지우기를 반복했다. 아래의 설정은 커맨드라인에서 로그를 입력받고 명령창에 출력 및 json파일로 남긴다. 방법은 &lt;a href=&quot;https://deviantony.wordpress.com/2014/06/04/logstash-debug-configuration/&quot;&gt;이 포스트&lt;/a&gt;를 참조했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;input &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  stdin &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 커맨드라인에서 받은 로그를 input으로 받는다&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

filter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 필터 세팅&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

output &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  stdout &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; codec =&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; &quot;json&quot; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  file &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; codec =&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; &quot;json&quot; path =&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt; &quot;tmp/output.json&quot; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 로그스태시 home 디렉토리에서 디버깅 결과 로그를 파일로 남긴다&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;# 이때 권한문제가 발생하면 도커 attach된 상태에서 권한 주는 것을 잊지말자&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;파일비트에서-전달된-raw-data의-형태&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC%EB%B9%84%ED%8A%B8%EC%97%90%EC%84%9C-%EC%A0%84%EB%8B%AC%EB%90%9C-raw-data%EC%9D%98-%ED%98%95%ED%83%9C&quot; aria-label=&quot;파일비트에서 전달된 raw data의 형태 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일비트에서 전달된 raw data의 형태&lt;/h3&gt;
&lt;p&gt;데이터가 파일비트 -&gt; 카프카 를 통해 -&gt; 로그스태시로 들어올때 로그라인은 아래와 같다. 파일비트에는 필드만 추가해주는 정도의 최소한의 설정을 해줬다. 포스트를 쓰면서 json 형식에 맞춰서 줄바꿈을 해줬지만 실제로는 아래처럼 한줄짜리 라인으로 온다. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-25T07:53:39.249Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;@metadata&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;beat&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;filebeat&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;doc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6.4.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kr-r2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-11 05:40:30 172.0.0.1 GET /news/updates/detail bbmNo=89 443 - 10.1.30.99 Mozilla/5.0+(Windows+NT+6.1;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/69.0.3497.100+Safari/537.36 https://test.webpage.com/main 200 0 0 288&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;prospector&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;logtype&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iis&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;beat&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6.4.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC2\\\\u_ex181011.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;697632&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;정리하면 아래와 같다. 앞서 말했듯이 중개자인 카프카는 로그라인만 전달하고, 파일비트가 로그라인을 json형식으로 만들어서 전달한다. &lt;code class=&quot;language-text&quot;&gt;message&lt;/code&gt; 필드가 실제 로그파일에서 갖고오는 데이터이고, 나머지 필드는 파일비트가 자체적으로 생성한다. field에는 &lt;code class=&quot;language-text&quot;&gt;filebeat.yml&lt;/code&gt;파일에 개발자가 경로별로 세팅해준 데이터가 전달된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-25T07:53:39.249Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;@metadata&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;beat&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;filebeat&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;doc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6.4.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;topic&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;kr-r2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-11 05:40:30 172.0.0.1 GET /news/updates/detail bbmNo=89 443 - 10.1.30.99 Mozilla/5.0+(Windows+NT+6.1;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/69.0.3497.100+Safari/537.36 https://test.webpage.com/main 200 0 0 288&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;prospector&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;input&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;logtype&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iis&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;beat&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6.4.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC2\\\\u_ex181011.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;697632&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;filter-세팅&quot;&gt;&lt;a href=&quot;#filter-%EC%84%B8%ED%8C%85&quot; aria-label=&quot;filter 세팅 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;filter 세팅&lt;/h3&gt;
&lt;p&gt;로그스태시 설정을 하면서 가장 애를 먹었던 부분은 로그스태시가 파이프라인의 input 영역을 지나면서 &lt;strong&gt;위의 데이터를 message영역으로 한번 더 감싼다는 것&lt;/strong&gt;을 너무 늦게알았기 때문이다. 뿐만 아니라, 파일비트에서 제이슨 형식으로 만들어서 전달한 데이터를 deserialize한다. 이렇게 되면 filter에 들어왔을 때 root 영역에 있는 field만 인식이 되고, nested field영역은 접근이 되지 않는다. 그렇기 때문에 먼저 json serialize를 해줘야했다. json 필터는 &lt;code class=&quot;language-text&quot;&gt;source&lt;/code&gt;를 message 영역으로 지정해주면 감싸진 message 필드는 삭제하고, 그 안의 데이터가 루트가 되어 필드가 구성된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;conf&quot;&gt;&lt;pre class=&quot;language-conf&quot;&gt;&lt;code class=&quot;language-conf&quot;&gt;filter {
  json { source =&amp;gt; &amp;#39;message&amp;#39; }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;json serialize 필터를 지나면 다음과 같은 형태가 된다. 그리고 임의로 다음 필터를 만들어 에러를 내면 디버거에서 다음과 같은 상태의 데이터를 출력해주며 에러 메세지를 전달한다. &apos;=&gt;&apos; 표기를 통해 로그스태시가 nested field까지 제이슨 필드로 인식하는지 알 수 있다. 언뜻보면 없던 event 영역이 감싸진 것 처럼 보이는데, event는 로그스태시 데이터의 root 필드 이름이라고 보면된다. json필터의 &lt;code class=&quot;language-text&quot;&gt;target&lt;/code&gt;이 지정되어있지않으면 자동으로 루트 필더로 데이터가 전달된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;event&quot;&lt;/span&gt;=&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;source&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC2\\\\u_ex181011.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;beat&quot;&lt;/span&gt;=&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;version&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6.4.2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token number&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;-10&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;-25&lt;/span&gt;T&lt;span class=&quot;token number&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;39.249&lt;/span&gt;Z&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;fields&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;logtype&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iis&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;offset&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;697632&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;@version&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-11 05:40:30 172.0.0.1 GET /news/updates/detail bbmNo=89 443 - 10.1.30.99 Mozilla/5.0+(Windows+NT+6.1;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/69.0.3497.100+Safari/537.36 https://test.webpage.com/main 200 0 0 288&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;=&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;prospector&quot;&lt;/span&gt;=&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&quot;input&quot;&lt;/span&gt;=&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;type&quot;&lt;/span&gt;=&gt;&lt;span class=&quot;token string&quot;&gt;&quot;log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;nested-field에-접근하는-조건문-만들기&quot;&gt;&lt;a href=&quot;#nested-field%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EC%A1%B0%EA%B1%B4%EB%AC%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;nested field에 접근하는 조건문 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;nested field에 접근하는 조건문 만들기&lt;/h3&gt;
&lt;p&gt;로직을 만들기위해 필드에 접근하려면 괄호(₩[]₩)를 통해서 접근하면 된다. 필드 내부의 필드에 접근하려면 배열처럼 괄호를 두번 표기하면 된다. 나는 로그타입이 iis인경우와 nlog인경우로 나뉘기때문에, 해당 필드에 접근해서 타입을 확인하고 적절한 형식으로 grok 파싱을 해주고, 필요없는 필드는 &lt;code class=&quot;language-text&quot;&gt;mutate&lt;/code&gt; 영역에서 삭제했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;filter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  json &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; source =&gt; &apos;message&apos; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  if &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;logtype&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; == &lt;span class=&quot;token string&quot;&gt;&quot;nlog&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    grok &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      match =&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &apos;message&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &apos;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATESTAMP&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;date&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;NUMBER&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;serverip&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;IP&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;clientip&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;PostData&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; %&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;postdata&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;GetData&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; %&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;getdata&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;stopwatch&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%{DATA:message}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;%&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;DATA&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;exception&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;$&apos; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; else if &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fields&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;logtype&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; == &lt;span class=&quot;token string&quot;&gt;&quot;iis&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    grok &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      match =&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;%{DATESTAMP:date} %{IP:server} %{WORD:method} %{DATA:uri_stem} %{DATA:uri_query} %{NUMBER:port} %{DATA:user_name} %{IP:client} %{DATA:user_agent} %{NUMBER:status} %{NUMBER:sub_status} %{NUMBER:win32_status} %{NUMBER:time_taken}&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  mutate &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    remove_field =&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&apos;beat&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &apos;input&apos;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &apos;prospector&apos;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 한면 최종적으로 es에 전달되는 데이터 형태는 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-11 05:40:30 172.0.0.1 GET /news/updates/detail bbmNo=89 443 - 10.1.30.99 Mozilla/5.0+(Windows+NT+6.1;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/69.0.3497.100+Safari/537.36 https://test.webpage.com/main 200 0 0 288&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;fields&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;logtype&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;iis&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;uri_stem&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/news/updates/detail&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;sub_status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;time_taken&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;288&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;client&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10.1.30.99&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;user_agent&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0+(Windows+NT+6.1;+Win64;+x64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/69.0.3497.100+Safari/537.36 https://test.webpage.com/main&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2018-10-25T07:53:39.249Z&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;18-10-11 05:40:30&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;172.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;win32_status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;WEB-TEST-01&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;user_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;offset&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;697632&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;200&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;uri_query&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bbmNo=89&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;443&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC2\\\\u_ex181011.log&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;@version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 멤버별 유형확장]]></title><description><![CDATA[readonly, const 둘다 객체의 내부값 변경불가 그러나 const는 byte, int, string 등 기본 자료형에 한해서 적용가능 const는 선언과 함께 값이 대입되어야함. 즉, 생성자에서 접근할 수 없다. const…]]></description><link>https://parkdoyeon.github.io//c-기본서-멤버별-유형확장</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-멤버별-유형확장</guid><category><![CDATA[c#]]></category><category><![CDATA[객체지향]]></category><category><![CDATA[readonly]]></category><category><![CDATA[const]]></category><category><![CDATA[event]]></category><category><![CDATA[indexer]]></category><pubDate>Wed, 24 Oct 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;readonly-const&quot;&gt;&lt;a href=&quot;#readonly-const&quot; aria-label=&quot;readonly const permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;readonly, const&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;둘다 객체의 내부값 변경불가&lt;/li&gt;
&lt;li&gt;그러나 const는 byte, int, string 등 기본 자료형에 한해서 적용가능&lt;/li&gt;
&lt;li&gt;const는 선언과 함께 값이 대입되어야함. 즉, 생성자에서 접근할 수 없다.&lt;/li&gt;
&lt;li&gt;const는 컴파일시에 소스코드에 값이 직접 치환됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;event&quot;&gt;&lt;a href=&quot;#event&quot; aria-label=&quot;event permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;event&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;델리게이트 예약어로, 첫번째로 이벤트를 발생시킨 인자를, 두번째 인자로 해당 이벤트에대한 값을 제공받는다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;델리게이트 만으로도 구현이 가능하지만, 이벤트 예약어로 구현하면 콜백함수를 구독/해지할 수 있도록 함수를 담아두는 클래스선언을 하지 않아도 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class SomeClass
{
public event EventHandler CallbackGroup
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;클래스를-배열처럼-사용하게-하는-indexer&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%B0%B0%EC%97%B4%EC%B2%98%EB%9F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-indexer&quot; aria-label=&quot;클래스를 배열처럼 사용하게 하는 indexer permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스를 배열처럼 사용하게 하는 Indexer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로퍼티를 활용해서 클래스에 배열처럼 접근하도록 돕는 기능&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class SomeClass
{
public int this[indexer]
{
    public get
    {
        if(indexer == &amp;quot;냐옹&amp;quot;)
            return &amp;quot;고양이&amp;quot;;
        else
            return &amp;quot;강아지&amp;quot;;
    }
    public set;
    {
        this[indexer] = value;
    }
}
public event EventHandler CallbackGroup
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 구조체, 예약어, Enum]]></title><description><![CDATA[Tight Coupling, Loose Coupling…]]></description><link>https://parkdoyeon.github.io//c-기본서-구조체-예약어-enum</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-구조체-예약어-enum</guid><category><![CDATA[c#]]></category><category><![CDATA[객체지향]]></category><category><![CDATA[기본]]></category><category><![CDATA[struct]]></category><category><![CDATA[ref]]></category><category><![CDATA[out]]></category><category><![CDATA[coupling]]></category><category><![CDATA[enum]]></category><pubDate>Thu, 18 Oct 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;tight-coupling-loose-coupling&quot;&gt;&lt;a href=&quot;#tight-coupling-loose-coupling&quot; aria-label=&quot;tight coupling loose coupling permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Tight Coupling, Loose Coupling&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;강력한 결합: 클래스간의 호출관계와같이 코드 변화가 어려운경우&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;느슨한 결합: 강력한 결합의 문제점을 보완하기 위한 결합, 인터페이스를 수단으로 활용.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class Switch
{
//IPower를 상속하는 모든 인스턴스를 인자로 받을 수 있다.
public void powerOn(IPower machine) 
{
    machine.TrunOn();
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;구조체&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%A1%B0%EC%B2%B4&quot; aria-label=&quot;구조체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구조체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클래스와 달리 참조형식이 아닌 값형식 호출을 한다.&lt;/li&gt;
&lt;li&gt;기본 자료형처럼 인스턴스 생성시 new를 붙이지 않아도 된다: 본래 new로 생성한다는 것은 값을 0으로 개발자가 직접 초기화한다는 의미임. C#은 개발자가 값을 직접 할당하지 않는 것을 오류로 판단하기때문에 new 없이 객체 생성을하면 오류판정을 함. 구조체의 기본자료형과의 차이점은 구조체는 값할당없이 선언이 가능하지만 기본자료형은 컴파일시 에러판정을 한다.&lt;/li&gt;
&lt;li&gt;매개변수 생성자를 정의해도 기본생성자가 c#에 자동으로 포함된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파라미터에-사용되는-예약어-ref과-out&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%95%BD%EC%96%B4-ref%EA%B3%BC-out&quot; aria-label=&quot;파라미터에 사용되는 예약어 ref과 out permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파라미터에 사용되는 예약어 ref과 out&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ref: 주소에 의한 전달로, 변수의 값이 위치한 주소를 직접 전달한다(얕은복사). 참조형 타입도 마찬가지로 ref없이 전달될때는 참조값이 또 다른 스택 메모리에 복사되어 전달되지만, ref이 있으면 스택 주소값이 직접 전달된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;out: 리턴하는 값이 여러개가 될때 사용하면 유용함. 초기화 될 수도 없으며 초기화해도 쓸일이 없음. TryParse가 대표적인 사용예&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;if(int.TryParse(&amp;quot;1234567&amp;quot;, out n) == true)
{
Console.WriteLine(n); //1234567 
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;enum&quot;&gt;&lt;a href=&quot;#enum&quot; aria-label=&quot;enum permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enum&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;열거형 사용자 정의 타입. 정수를 상속받아 열거된 이름에 순차적으로 숫자값을 부여받음. System.Object를 상속받아 ToString()을 재정의했기 때문에 Console.WriteLine()에 찍으면 문자열 반환함.&lt;/li&gt;
&lt;li&gt;숫자로 표현하도록 변환할 수 있는데 반드시 명시적 형변환 해야한다는 제약이 있음.&lt;/li&gt;
&lt;li&gt;연산시 숫자연산을 하기 때문에 여러개의 문자열을 다룬다는 특성(Attribute) [Flag]를 지정할 수 있음.&lt;/li&gt;
&lt;li&gt;enum은 const의 묶음을 표현한 것과 같다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 다형성]]></title><description><![CDATA[중첩클래스 멤버와 같이 취급되므로 접근제한자 생략되면 private가 된다 cf. 클래스는 원래 접근제한자 없으면 internal virtual과 override virtual…]]></description><link>https://parkdoyeon.github.io//c-기본서-다형성</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-다형성</guid><category><![CDATA[c#]]></category><category><![CDATA[객체지향]]></category><category><![CDATA[기본]]></category><category><![CDATA[delegate]]></category><category><![CDATA[class]]></category><category><![CDATA[interface]]></category><pubDate>Sun, 14 Oct 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;중첩클래스&quot;&gt;&lt;a href=&quot;#%EC%A4%91%EC%B2%A9%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot;중첩클래스 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;중첩클래스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;멤버와 같이 취급되므로 접근제한자 생략되면 private가 된다&lt;/li&gt;
&lt;li&gt;cf. 클래스는 원래 접근제한자 없으면 internal&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;virtual과-override&quot;&gt;&lt;a href=&quot;#virtual%EA%B3%BC-override&quot; aria-label=&quot;virtual과 override permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;virtual과 override&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;virtual하게 먼저 구현해놓고, 해당 클래스 상속받은 클래스를 변경하고싶으면 override 예약으로 구현한다 (추상과 달리 필수가 아님)&lt;/li&gt;
&lt;li&gt;상속받은 클래스가 똑같은 이름의 아예 다른 함수를 구현하고싶으면 new 예약어를 넣으면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;추상클래스&quot;&gt;&lt;a href=&quot;#%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot;추상클래스 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추상클래스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;구현해야하니까 private안됨&lt;/li&gt;
&lt;li&gt;new로 인스턴스화 할 수 없다. 구현도 안한걸 어떻게...?&lt;/li&gt;
&lt;li&gt;상속받으면 반드시 완성되어야한다&lt;/li&gt;
&lt;li&gt;전부 껍데기만있는 인터페이스와 달리 내부에 일반 메서드도 정의 가능하다. 단 추상메서드(가상메서드)는 안됨.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;delegate&quot;&gt;&lt;a href=&quot;#delegate&quot; aria-label=&quot;delegate permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delegate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;델리게이트는 메서드를 인자로 받는 &apos;타입&apos;이다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;즉 아래와같이 기본 형태에서 식별자의 이름을 바꾸고 예약어를 추가한 상태이다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;int clean (object arg); //반환값 식별자 인자
delegate int FuncDelegate(object arg); // 예약어 반환값 식별자 인자&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;//어떤 클래스의 함수 Clean을 delegate로 사용하면 다음과 같다.
FuncDelegate cleanFunc = new FuncDelegate(클래스인스턴스.Clean);
//위와 완벽하게 동일한 역할을 하는 구문
FuncDelegate otherCleanFunc = 클래스인스턴스.Clean&lt;/p&gt;
&lt;p&gt;//위 구문을 main함수에서 실행시키면
cleanFunc(arg)
otherCleanFunc(arg)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 메서드를 인자로 받는 콜백메서드도 델리게이트 사용의 한 방법으로 이해할 수 있다


### Interface 
- 기본적으로 계약이다. 해당 인터페이스를 상속할 경우 인터페이스 내의 메서드를 재정의할것이라는 약속. 이것도 반드시 완성해야함.
- 하지만 메서드의 묶음 개념으로, 프로퍼티도 포함할 수 있다. 그리고 추상과 달리 한 클래스가 여러개의 인터페이스를 다중상속할 수 있다.
- is 연산자를 통해 상속 여부(인터페이스를 사용했을 경우에는 계약이행여부)를 확인할 수 있다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[c# 기본서 - 객체지향]]></title><description><![CDATA[Getter Setter를 사용하면 좋은 이유 필드를 직접 호출하여 값변경을 하면 제약을 두고싶을때(ex 환율계산, 값 범위 제한 등 ) 필드값이 사용되는 지점에 직접 가서 변경해야한다. Get/Set…]]></description><link>https://parkdoyeon.github.io//c-기본서-객체지향</link><guid isPermaLink="false">https://parkdoyeon.github.io//c-기본서-객체지향</guid><category><![CDATA[c#]]></category><category><![CDATA[객체지향]]></category><category><![CDATA[기본]]></category><category><![CDATA[base]]></category><category><![CDATA[getter]]></category><category><![CDATA[setter]]></category><category><![CDATA[as]]></category><category><![CDATA[static]]></category><pubDate>Sat, 13 Oct 2018 15:00:00 GMT</pubDate><content:encoded>&lt;h3 id=&quot;getter-setter를-사용하면-좋은-이유&quot;&gt;&lt;a href=&quot;#getter-setter%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;getter setter를 사용하면 좋은 이유 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Getter Setter를 사용하면 좋은 이유&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;필드를 직접 호출하여 값변경을 하면 제약을 두고싶을때(ex 환율계산, 값 범위 제한 등 ) 필드값이 사용되는 지점에 직접 가서 변경해야한다.&lt;/li&gt;
&lt;li&gt;Get/Set 프로퍼티 정의를 위한 접근제한을 걸어두면 추후에 유지보수가 용이하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seal&quot;&gt;&lt;a href=&quot;#seal&quot; aria-label=&quot;seal permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;seal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;다른 클래스가 자신을 상속받지 못하도록 하는 예약어이다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;접근제한자와-base-예약어&quot;&gt;&lt;a href=&quot;#%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80-base-%EC%98%88%EC%95%BD%EC%96%B4&quot; aria-label=&quot;접근제한자와 base 예약어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;접근제한자와 base 예약어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C#은 접근제한자를 생략하면 기본적으로 internal이 적용된다.&lt;/li&gt;
&lt;li&gt;Class 멤버의 경우 private로 설정된다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;때문에 부모클래스에서 값을 초기화가 필요한 자식 클래스에서 base 예약어를 통해 직접 초기화해주는 방법을 사용할 수 있다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c#&quot;&gt;&lt;pre class=&quot;language-c#&quot;&gt;&lt;code class=&quot;language-c#&quot;&gt;class Book
{
decimal isbn13;
public Book(decimal isbn13)
{
    this.isbn13 = isbn13;
}
}
class EBook : Book
{
public EBook() : base(0)
{
}
public EBook(decimal isbn) : base(isbn) //이렇게 연계도 가능
{
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;as-연산자&quot;&gt;&lt;a href=&quot;#as-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;as 연산자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;as 연산자&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;부모타입의 자료를 자식타입으로 명시적 형변환하면 컴파일은 일어나지만 실행단계에서 값을 호출하면 오류가 발생한다.&lt;/li&gt;
&lt;li&gt;런타임 에러를 발생시키는 것은 상당한 부하를 줄 수 있으므로, 형변환 실패시 값을 null로 넣어주는 as 형변환을 권장한다.&lt;/li&gt;
&lt;li&gt;참조타입에만 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tostring-equals는-기본타입에-사용될경우-재정의-된다&quot;&gt;&lt;a href=&quot;#tostring-equals%EB%8A%94-%EA%B8%B0%EB%B3%B8%ED%83%80%EC%9E%85%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%A0%EA%B2%BD%EC%9A%B0-%EC%9E%AC%EC%A0%95%EC%9D%98-%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;tostring equals는 기본타입에 사용될경우 재정의 된다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ToString(), Equals()는 기본타입에 사용될경우 재정의 된다&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;equals의 경우 참조 타입을 암시형변환을 통해 재정의 하면 값비교가 가능해진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;정적-생성자의-호출순서&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%A0%81-%EC%83%9D%EC%84%B1%EC%9E%90%EC%9D%98-%ED%98%B8%EC%B6%9C%EC%88%9C%EC%84%9C&quot; aria-label=&quot;정적 생성자의 호출순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정적 생성자의 호출순서&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;최초로 접근하는 시점에 단 한번만 실행된다&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;처음 호출하거나 인스터스 생성자를 통해 객체가 만들어지는 시점에!&lt;/li&gt;
&lt;/ul&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[kafka - 설치하기]]></title><description><![CDATA[팀에서 관리하는 웹서버의 로깅시스템을 구축하면서 kafka를 사용하기로 했다. kafka는 서버간 데이터 전달을 위한 브로커 어플리케이션으로, 급격하게 증가하는 데이터를 장애없이 빠르게 보낼수 있는 messaging queue 역할을 한다. kafka…]]></description><link>https://parkdoyeon.github.io//kafka-설치하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//kafka-설치하기</guid><category><![CDATA[kafka]]></category><category><![CDATA[zookeeper]]></category><category><![CDATA[logger]]></category><pubDate>Fri, 10 Aug 2018 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;팀에서 관리하는 웹서버의 로깅시스템을 구축하면서 &lt;a href=&quot;https://kafka.apache.org/&quot;&gt;kafka&lt;/a&gt;를 사용하기로 했다. kafka는 서버간 데이터 전달을 위한 브로커 어플리케이션으로, 급격하게 증가하는 데이터를 장애없이 빠르게 보낼수 있는 messaging queue 역할을 한다. kafka를 사용하기로 한 데 있어서 결정적인 요소는 두가지였는데,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;게임 사이트, 런처를 관리하는 우리팀의 경우 서비스는 오픈이나 트래픽을 공격과 같이 급격하게 데이터가 밀려들어오는 이벤트가 자주 발생하고,&lt;/li&gt;
&lt;li&gt;기존 로깅시스템에서 사용되던 &lt;a href=&quot;https://www.fluentd.org/&quot;&gt;fluntd&lt;/a&gt;를 밀어내면서 fluntd의 대용량 처리기능을 보완하는 시스템이 필요했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;아직 테스트 단계라 얼만큼 더 효과적으로 사용되고 있는지 확인하긴 어렵지만, 카프카의 취지와 기능을 고려했을때 현재 로깅 시스템 환경에 적합할 것이라고 판단했다.&lt;/p&gt;
&lt;h3 id=&quot;kafka와-zookeeper&quot;&gt;&lt;a href=&quot;#kafka%EC%99%80-zookeeper&quot; aria-label=&quot;kafka와 zookeeper permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;kafka와 zookeeper&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;kafka는 클러스터링 구성하는데 있어서 분산 시스템을 관리하는(coordination) 기능이 내장되어있지 않고 따로 주키퍼를 사용한다(Apache에서 개발리소스를 생각해서 함께 개발하지 않았다고 한다).&lt;/p&gt;
&lt;p&gt;주키퍼는 카프카 application의 정보를 중앙에 집중하고 구성관리, 그룹관리네이밍, 동기화 등의 서비스를 제공한다. 아파치 카프카 공식 사이트에서 작성시점 현재 최신버전인 1.1.1버전을 받으면 함께 인스톨이 된다.&lt;/p&gt;
&lt;p&gt;주키퍼는 다수가 되는 서버가 살아있으면 죽은 서비스를 살려내는 구조이므로, 홀수단위로 운용한다. 하지만 카프카 브로커를 1개만 운용한다고 해서 주키퍼 실행하지 않아도 되는 것은 아니므로, &lt;u&gt;반드시 카프카와의 연결 설정파일을 작성하고 먼저 실행을 시켜주도록하자.&lt;/u&gt;&lt;/p&gt;
&lt;h3 id=&quot;설치방법&quot;&gt;&lt;a href=&quot;#%EC%84%A4%EC%B9%98%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;설치방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;설치방법&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JDK기반으로 돌아가기때문에 실행환경에서는 꼭 자바를 먼저 설치해놓도록 하자.
(나의경우 카프카를 도커 이미지로 빌드했기 때문에 카프카는 볼륨으로 연결해서 실행하고, JDK는 이미지에 직접 설치했다)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://kafka.apache.org/downloads&quot;&gt;https://kafka.apache.org/downloads&lt;/a&gt; 에서 apache에서 권장하는 미러사이트로 tar파일 설치 &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; http://mirror.navercorp.com/apache/kafka/1.1.1/kafka_2.11-1.1.1.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축풀기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;tar&lt;/span&gt; -xvf kafka_2.11-1.1.1.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;압축푼 폴더명 명령어 입력하기 편하도록 변경하기&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mv&lt;/span&gt; kafka_2.11-1.1.1 kafka&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;zookeeper-설정파일-변경하기&quot;&gt;&lt;a href=&quot;#zookeeper-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0&quot; aria-label=&quot;zookeeper 설정파일 변경하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;zookeeper 설정파일 변경하기&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;하단에 server.id로 입력된 주키퍼 서버 아이디의 넘버값은 dataDir경로에 myid이라는 파일명으로 작성되어있어야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; kafka/zkdata/myid &lt;span class=&quot;token comment&quot;&gt;# id가 1인 zookeeper데이터의 id파일&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; kafka/config
$ &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; zookeeper.properties&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;yml&quot;&gt;
dataDir=/home/user/kafka/zkdata # 주키퍼의 트랜젝션 로그와 스냅샷이 저장되는 저장경로, 직접 편한 경로에 만들어주면 된다.
clientPort=2181 # client가 연결하는 TCP 포트
maxClientCnxns=0 # disable the per-ip limit on the number of connections since this is a non-production config
initLimit=5 # 팔로워가 리더가 초기에 연결하는 시간에 대한 타임아웃 tick 수
syncLimit=2 # 팔로워가 리더와 동기화하는 시간에 대한 타임아웃 tick수 (주키퍼에 저장된 데이터가 크면 늘려야함)

#서버.서버id=서버ip:리더인 경우 팔로워에 연결할 때 사용하는포트:리더 선출 시점에 사용하는 포트
#주키퍼 앙상블 전체의 id값과 서버, 포트를 입력해주면 된다. 나의 경우 같은 서버에 3개의 서비스를 올리려고했기 때문에 포트를 다 다르게 넣어줬다. 한 서버 내에서 리더팔로워 포트만 구분되면 된다.
server.1=localhost:2888:3888
server.2=localhost:2889:3889
server.3=localhost:2890:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;kafka-설정파일-변경하기&quot;&gt;&lt;a href=&quot;#kafka-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0&quot; aria-label=&quot;kafka 설정파일 변경하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;kafka 설정파일 변경하기&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;vi&lt;/span&gt; server.properties&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;yml&quot;&gt;&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;broker.id=1 &lt;span class=&quot;token comment&quot;&gt;# The id of the broker. This must be set to a unique integer for each broker.&lt;/span&gt;
port=9092
delete.topic.enable=true &lt;span class=&quot;token comment&quot;&gt;#없으면 토픽삭제시 삭제가 안되므로 반드시 넣자&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;############################# Socket Server Settings #############################&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The address the socket server listens on. It will get the value returned from&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# java.net.InetAddress.getCanonicalHostName() if not configured.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   FORMAT:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#     listeners = listener_name://host_name:port&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#   EXAMPLE:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#     listeners = PLAINTEXT://your.host.name:9092&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# listeners=PLAINTEXT://:9092&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Hostname and port the broker will advertise to producers and consumers. If not set,&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# it uses the value for &quot;listeners&quot; if configured.  Otherwise, it will use the value&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# returned from java.net.InetAddress.getCanonicalHostName().&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 이걸 설정을 안해주면 다른 서버에서 카프카로 통신이 되지 않는다ㅠㅠ&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 심지어 로컬로 다 포트바인딩을 해줬는데도 나는 도커 네트워크를 한번 타서 그랬는지 되지않았음.&lt;/span&gt;
advertised.listeners=PLAINTEXT&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;//카프카서버IP&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9092&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The number of threads that the server uses for receiving requests from the network and sending responses to the network&lt;/span&gt;
num.network.threads=3

&lt;span class=&quot;token comment&quot;&gt;# The number of threads that the server uses for processing requests, which may include disk I/O&lt;/span&gt;
num.io.threads=8

&lt;span class=&quot;token comment&quot;&gt;# The send buffer (SO_SNDBUF) used by the socket server&lt;/span&gt;
socket.send.buffer.bytes=102400

&lt;span class=&quot;token comment&quot;&gt;# The receive buffer (SO_RCVBUF) used by the socket server&lt;/span&gt;
socket.receive.buffer.bytes=102400

&lt;span class=&quot;token comment&quot;&gt;# The maximum size of a request that the socket server will accept (protection against OOM)&lt;/span&gt;
socket.request.max.bytes=104857600

&lt;span class=&quot;token comment&quot;&gt;############################# Log Basics #############################&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# A comma separated list of directories under which to store log files&lt;/span&gt;
log.dirs=/home/doyeon/kafka/kfdata

&lt;span class=&quot;token comment&quot;&gt;# The default number of log partitions per topic. More partitions allow greater&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# parallelism for consumption, but this will also result in more files across&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# the brokers.&lt;/span&gt;
num.partitions=1

&lt;span class=&quot;token comment&quot;&gt;# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# This value is recommended to be increased for installations with data dirs located in RAID array.&lt;/span&gt;
num.recovery.threads.per.data.dir=1

&lt;span class=&quot;token comment&quot;&gt;############################# Internal Topic Settings  #############################&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# The replication factor for the group metadata internal topics &quot;__consumer_offsets&quot; and &quot;__transaction_state&quot;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.&lt;/span&gt;
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

&lt;span class=&quot;token comment&quot;&gt;############################# Log Retention Policy #############################&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The following configurations control the disposal of log segments. The policy can&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# be set to delete segments after a period of time, or after a given size has accumulated.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# from the end of the log.&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The minimum age of a log file to be eligible for deletion due to age&lt;/span&gt;
log.retention.hours=168

&lt;span class=&quot;token comment&quot;&gt;# A size-based retention policy for logs. Segments are pruned from the log unless the remaining&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# segments drop below log.retention.bytes. Functions independently of log.retention.hours.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;#log.retention.bytes=1073741824&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The maximum size of a log segment file. When this size is reached a new log segment will be created.&lt;/span&gt;
log.segment.bytes=1073741824

&lt;span class=&quot;token comment&quot;&gt;# The interval at which log segments are checked to see if they can be deleted according&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# to the retention policies&lt;/span&gt;
log.retention.check.interval.ms=300000

&lt;span class=&quot;token comment&quot;&gt;############################# zookeeper #############################&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# zookeeper connection string (see zookeeper docs for details).&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# This is a comma separated host:port pairs, each corresponding to a zk&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# server. e.g. &quot;127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002&quot;.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# You can also append an optional chroot string to the urls to specify the&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# root directory for all kafka znodes.&lt;/span&gt;
zookeeper.connect=localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2181&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2182&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2183&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Timeout in ms for connecting to zookeeper&lt;/span&gt;
zookeeper.connection.timeout.ms=6000

&lt;span class=&quot;token comment&quot;&gt;############################# Group Coordinator Settings #############################&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# The default value for this is 3 seconds.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.&lt;/span&gt;
group.initial.rebalance.delay.ms=0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item><item><title><![CDATA[iOS App을 In House로 배포하기]]></title><description><![CDATA[사내 구성원들끼리 현재 서비스중인 게임의 동접자 수를 확인하는 모니터링앱을 iOS…]]></description><link>https://parkdoyeon.github.io//i-os-app을-in-house로-배포하기</link><guid isPermaLink="false">https://parkdoyeon.github.io//i-os-app을-in-house로-배포하기</guid><category><![CDATA[swift]]></category><category><![CDATA[deploy]]></category><category><![CDATA[fastlane]]></category><pubDate>Sat, 16 Jun 2018 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;사내 구성원들끼리 현재 서비스중인 게임의 동접자 수를 확인하는 모니터링앱을 iOS 버전으로 개발했다. 스토어에 올리는 과정은 정보가 많았지만, 나처럼 특정 구성원들을 대상으로 앱을 배포해야하는 경우 어떻게 해야하는지 정리된 글을 찾기가 어려웠다. 적고나니 꽤 간단하지만, 누군가는 이런 시행착오를 겪지 않길 바라며 그 과정들을 기록해놓기로 했다.&lt;/p&gt;
&lt;h3 id=&quot;url-다운로드-링크와-fastlane이라는-옵션&quot;&gt;&lt;a href=&quot;#url-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EB%A7%81%ED%81%AC%EC%99%80-fastlane%EC%9D%B4%EB%9D%BC%EB%8A%94-%EC%98%B5%EC%85%98&quot; aria-label=&quot;url 다운로드 링크와 fastlane이라는 옵션 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;URL 다운로드 링크와 fastlane이라는 옵션&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;처음에 배포할때 가장 먼저 떠오른 방법은 사내망에서만 접근되는 웹페이지를 통해 URL 다운로드링크 배포하는 것이었고, 두번째는 &lt;a href=&quot;https://fastlane.tools/&quot;&gt;Fastlane&lt;/a&gt; beta를 통해 특정 대상을 지정해서 배포하는 방법이었다. 구글에서 제공하는 &lt;a href=&quot;https://fastlane.tools/&quot;&gt;Fastlane&lt;/a&gt;은 빌드부터 아카이빙, ipa추출, 자동 업데이트까지 원큐로 해준다. 거기에 인증서를 git으로 관리하는 &apos;match&apos;까지 제공한다. 여러모로 활용하고싶은 기능들이 많았는데, 나의 상황에는 적절치 못했다. 예를들어,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;배포 대상이 수시로 변동될 경우(cf: 사내 구성원의 퇴사와 입사) 계속해서 배포 이메일을 관리해줘야했으며,&lt;/li&gt;
&lt;li&gt;애플스토어 개발자계정 관리를 다른팀에서 하고 있는 상태였기 때문에, match를 사용하게될 경우 인증서 삭제/갱신 과정에서 같은 인증서를 사용하는 앱간에 또 다른 인증서 헬을 겪을 가능성이 농후했다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;때문에 아쉽지만 &lt;a href=&quot;https://fastlane.tools/&quot;&gt;Fastlane&lt;/a&gt;을 실제 사내 앱 배포에 활용하기는 어려웠고, url 배포를 하기로 했다. 지금부터의 가이드는 &lt;strong&gt;xcode archiving을 통한 ipa파일 생성이 완료된 상태&lt;/strong&gt;에서 URL배포를 위해 할 일이다.&lt;/p&gt;
&lt;h3 id=&quot;how-to&quot;&gt;&lt;a href=&quot;#how-to&quot; aria-label=&quot;how to permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;How-To&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;배포를-위한-설정파일-만들기&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;배포를 위한 설정파일 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;배포를 위한 설정파일 만들기&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;프로젝트에 ipa파일 추가&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;.plist, .ipa MIME type 추가하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IIS의 경우 IIS관리자에 서비스 인스턴스&gt;MIME 타입변경을 통해 할 수 있다&lt;/li&gt;
&lt;li&gt;IIS의 경우 .ipa &lt;code class=&quot;language-text&quot;&gt;application/octet-stream&lt;/code&gt; 으로, .plist &lt;code class=&quot;language-text&quot;&gt;text/xml&lt;/code&gt;으로 하면된다.&lt;/li&gt;
&lt;li&gt;Mac OS에서 배포하는 경우에도 추가해줘야하며, 같은 확장자라도 타입이 다를수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;app.plist 파일을 만든다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;archiving할때 설정 잘 해주면 xcode에서 생성해주기도 하지만 굳이 빌드하지 않고 직접만들어도 된다.&lt;/li&gt;
&lt;li&gt;어차피 html파일에 &lt;code class=&quot;language-text&quot;&gt;href&lt;/code&gt;로 링크 붙일거라 파일명은 상관없고 plist확장자만 갖고있으면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;아래의 코드는 plist파일 최소의 스펙이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참고로 다운로드중일 때 백색 이미지 말고 별개의 이미지를 설정할수도 있다. 이건 in house 배포 검색하면 나올것이다.&lt;/li&gt;
&lt;li&gt;배포와 상관없는 key값이 더 추가되면 문제가 생긴다는 글을 보기도 했다. 애플은 버전별 변동이 잦아서 상이하므로 아무튼 주의.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특히 Metadata가 빠지거나 잘못되어있으면 별다른 피드백 없이 그냥 다운로드가 되지 않으므로 반드시 xcode 프로젝트의 info.plist와 일치시켜 넣도록 하자.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;/span&gt;
&lt;span class=&quot;token doctype&quot;&gt;&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;plist&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;items&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;assets&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;kind&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;software-package&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;url&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;https://company.url/folder/app.ipa&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;metadata&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;bundle-identifier&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;com.company.app&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;bundle-version&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;1.0&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;kind&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;software&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;title&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Monitor&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dict&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;plist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;html-링크-붙이기&quot;&gt;&lt;a href=&quot;#html-%EB%A7%81%ED%81%AC-%EB%B6%99%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;html 링크 붙이기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;HTML 링크 붙이기&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;배포를 위한 설정파일이 준비되면, Url은 ipa 파일이 있는 경로를 추가해주면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&quot;&lt;a href=&quot;https://localhost/directorypath/ipa%22%EC%99%80&quot;&gt;https://localhost/directorypath/ipa&quot;와&lt;/a&gt; 같은 형식이면 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;애플 정책상 ipa파일과 plist파일 모두 https를 반드시 사용해야한다.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;없다면 그냥 드롭박스나 구글드라이브로 배포해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Html파일에 아래와같이 해당 링크를 추가하면 끝~!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FYI: 다운로드가 제대로 안되는 상태에서 아래 링크를 아이폰 내 사파리앱에서 들어가면 itunes랑 연결하겠냐는 질문이 나오는 것으로 보아 아이튠즈랑 통신하는 과정이 있는 듯 하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;itms-services://?action=download-manifest&amp;amp;url=https://company.url/folder/app.plist&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;btn btn-default&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;iosDownload&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded><author>park.doyeon@gmail.com</author></item></channel></rss>