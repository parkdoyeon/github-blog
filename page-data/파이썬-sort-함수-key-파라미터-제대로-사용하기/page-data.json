{"componentChunkName":"component---src-templates-post-js","path":"/파이썬-sort-함수-key-파라미터-제대로-사용하기","result":{"data":{"markdownRemark":{"html":"<p>지난번에 작성한 <a href=\"./2019-07-21-python-sort\">big sort에 대한 글</a>에서 casting을 통한 정렬을 위해 sort함수의 key파라미터에 대해 설명했는데 최근에 문제를 풀다가 몇가지 사용방법을 더 알게되었다. key 파라미터는 정렬의 기준이 되는 값을 제공하는 내장함수이다. 2차원 리스트를 정렬할때 sort함수는 기본으로 첫번째 인자를 기준으로 정렬한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">student_point <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">210</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"keyitemgetter-사용하기\"><a href=\"#keyitemgetter-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"keyitemgetter 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key=itemgetter 사용하기</h3>\n<p>그렇다면 인자마다 또 다른 iterable object를 갖는 2차원 오브젝트에 접근하여 정렬하려면 어떻게 해야할까? 첫번째 방법은 itemgetter를 사용하는 것이다. itemgetter를 사용하기 위해서는 기본제공 모듈인 operator의 import가 필요하다. itemgetter에 파라미터로 오브젝트의 몇번째 인자를 기준으로 정렬할지 사용할 수 있다. sort함수에 역순옵션을 주면 해당인자를 기준으로 역순으로 정렬해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> operator <span class=\"token keyword\">import</span> itemgetter\nstudent_point<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>itemgetter<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student_point<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"keylambda-사용하기\"><a href=\"#keylambda-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"keylambda 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key=lambda 사용하기</h3>\n<p>두번째 방법은 람다함수를 사용하는 것이다. 람다를 사용하면 operator를 import하지 않고 정렬할 수 있다. 역순으로 정렬하고싶으면 마이너스를 기호를 붙여주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">student_point<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>출력 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">400</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">300</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">210</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">200</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"lambda를-사용해-여러기준으로-정렬하기\"><a href=\"#lambda%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4-%EC%97%AC%EB%9F%AC%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0\" aria-label=\"lambda를 사용해 여러기준으로 정렬하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lambda를 사용해 여러기준으로 정렬하기</h3>\n<p>lambda는 훨씬 자유도가 높은데, 아래와 같이 여러개의 인자를 리턴하면 앞에있는 인자를 기준으로 하고, 그 다음에는 두번째 인자를 기준으로 정렬한다. 여기서는 마이너스를 붙여줬으므로 앞의 인자 기준으로 정렬하되, 앞의 인자가 동일한 값을 갖게되면 두번째 인자를 기준으로 역순으로 정렬한다. 쉽게 말하면, 리턴된 인자가 정렬의 대상이 되는 인자인 것처럼 오브젝트를 다룬다!</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">student_point<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>출력 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">210</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">300</span>, <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">400</span>, <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>, <span class=\"token punctuation\">(</span><span class=\"token number\">400</span>, <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>","timeToRead":2,"excerpt":"지난번에 작성한 big sort에 대한 글에서 casting을 통한 정렬을 위해 sort함수의 key파라미터에 대해 설명했는데 최근에 문제를 풀다가 몇가지 사용방법을 더 알게되었다. key 파라미터는 정렬의 기준이 되는 값을 제공하는 내장함수이다.…","frontmatter":{"title":"파이썬 sort()함수 key 파라미터 제대로 사용하기","cover":"","date":"2019-07-28T16:36:48.000Z","categories":["Phython"],"tags":["python","sort"]},"fields":{"slug":"/파이썬-sort-함수-key-파라미터-제대로-사용하기","date":"July 27, 2019"}}},"pageContext":{"slug":"/파이썬-sort-함수-key-파라미터-제대로-사용하기","nexttitle":"파이썬 dictionary활용을 위한 빌트인 함수들","nextslug":"/파이썬-dictionary활용을-위한-빌트인-함수들","prevtitle":"파이썬 heapq로 리스트 빠르게 정렬하기","prevslug":"/파이썬-heapq로-리스트-빠르게-정렬하기"}}}