{"componentChunkName":"component---src-templates-post-js","path":"/programming-elixir-6-문자열-제어흐름","result":{"data":{"markdownRemark":{"html":"<h3 id=\"문자열\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"문자열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열</h3>\n<h4 id=\"sigils--symbols-with-magical-power-\"><a href=\"#sigils--symbols-with-magical-power-\" aria-label=\"sigils  symbols with magical power  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sigils ( symbols with magical power )</h4>\n<p>물결로 시작하는 접두어를 sigil로 부른다</p>\n<p>~C A character list with no escaping or interpolation\n~c A character list, escaped and interpolated just like a single-quoted string\n~D A Date in the format yyyy-mm-dd\n~N A naive (raw) DateTime in the format yyyy-mm-dd hh:mm:ss[.ddd]\n~R A regular expression with no escaping or interpolation\n~r A regular expression, escaped and interpolated\n~S A string with no escaping or interpolation\n~s A string, escaped and interpolated just like a double-quoted string\n~T A Time in the format hh:mm:ss[.dddd]\n~W A list of whitespace-delimited words, with no escaping or interpolation ~w A list of whitespace-delimited words, with escaping and interpolation</p>\n<p>sigil안에서 구분자(delimiter, (, [, {, &#x3C;)는 닫히지 않으면 이스케이프가 필요 없다.</p>\n<h4 id=\"single-quotations\"><a href=\"#single-quotations\" aria-label=\"single quotations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Single quotations</h4>\n<p>엘릭서에서 작은 따옴표 안에 문자는 캐릭터 리스트로 판단한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iex&gt; ‘cat’\n‘cat&#39;\niex&gt; [67, 65, 84]\n‘CAT&#39;\niex&gt; [67, 65, 84, 101]\n[67, 65, 84, 101]</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iex&gt; str = ‘wombat&#39;\n‘wombat&#39;\niex&gt; :io.format &quot;~w~n&quot;, [ str ] [119,111,109,98,97,116]\n:ok\niex&gt; List.to_tuple str\n{119, 111, 109, 98, 97, 116}\niex&gt; str ++ [0]\n[119, 111, 109, 98, 97, 116, 0]</code></pre></div>\n<p>~n은 새줄 바꾸기를 의미한다.</p>\n<p>~w은 언랭 언어로 스트링을 표기하는 것을 강제하는 것으로, 언랭 내에서 해당 표현이 불가능하면 그냥 반환된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">iex(12)&gt; &#39;∂x/∂y&#39;\n[8706, 120, 47, 8706, 121]\niex(13)&gt; ~w&#39;∂x/∂y&#39; \n[&quot;∂x/∂y”]</code></pre></div>\n<h4 id=\"binaries\"><a href=\"#binaries\" aria-label=\"binaries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Binaries</h4>\n<p>바이너리는 &#x3C;&#x3C;>>안에 담긴 0부터 255까지의 연속된 숫자 리스트이다.\n바이너리 안에 integer, float값을 담을 수 있다.</p>\n<h4 id=\"double-quoted-strings-are-binaries\"><a href=\"#double-quoted-strings-are-binaries\" aria-label=\"double quoted strings are binaries permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double-Quoted Strings Are Binaries</h4>\n<p>single quotation으로 감싼 문자열은 리스트라면,\ndouble quotation으로 감싸진 string은 utf-8인코딩된 일련의 바이트 데이터다.\n이렇게 정의하면 합리적인데, 다음과 같은 이유에서이다.</p>\n<p>첫째, 반드시 글자별로 다른 메모리값을 가질 수 있어 메모리 사용이 합리적이다.\n둘째, 리스트를 다루는 방식으로 문자열을 조작할 필요가 없다. 접근 방식이 편리함.</p>\n<p>문자열 데이터를 list 모듈에서 head-tail 구조로 분리할 수도 있는데.\n이 경우 아래와 같이 바이너리 바이너리데이터 형식을 빌려서 분리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">defmodule Utf8 do\n  def each(str, func) when is_binary(str), do: _each(str, func(\n\n  defp _each(&lt;&lt; head :: utf8, tail :: binary &gt;&gt;, func) do\n    func.(head)\n    _each(tail, func)\n  end\n  \n  defp _each(&lt;&lt;&gt;&gt;, _func), do []\nend</code></pre></div>\n<h3 id=\"제어흐름\"><a href=\"#%EC%A0%9C%EC%96%B4%ED%9D%90%EB%A6%84\" aria-label=\"제어흐름 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제어흐름</h3>\n<p>제어문을 사용하는 것보다 함수로 처리하는 것을 더 권장.\n코드가 더 간결하고 핵심적일 수 있기 때문.</p>\n<p>Cond vs Case\ncond는 여러 조건 체크가 필요한 경우 사용, case의 경우 패턴 매칭되는 요소를 찾을 때 사용</p>\n<p>Exception\n사용자 정의 예외 클래스의 경우 반드시 message를 구현해야 한다.\n예외가 절대 발생하면 안되는 경우 별도로 예외처리를 별도로 하지 않지만,\n그렇지 않다면 함수 끝에 느낌표를 넣으면 예외가 raise 되며, 유의미한 예외일 것이라는 관습적인 의미를 갖는다.</p>","timeToRead":2,"excerpt":"문자열 Sigils ( symbols with magical power ) 물결로 시작하는 접두어를 sigil로 부른다 ~C A character list with no escaping or interpolation\n~c A character list…","frontmatter":{"title":"Programming Elixir 6 - 문자열, 제어흐름","cover":"","date":"2020-01-30T11:02:34.000Z","categories":["Elixir"],"tags":["elixir","string","control"]},"fields":{"slug":"/programming-elixir-6-문자열-제어흐름","date":"January 29, 2020"}}},"pageContext":{"slug":"/programming-elixir-6-문자열-제어흐름","nexttitle":"Programming Elixir 5 - 콜렉션 처리","nextslug":"/programming-elixir-5-콜렉션-처리","prevtitle":"Mac OS에서 asdf을 통한 언어 버전관리 + elixir 설치하기","prevslug":"/mac-os에서-asdf을-통한-언어-버전관리-elixir-설치하기"}}}