{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-네트워크","result":{"data":{"markdownRemark":{"html":"<h3 id=\"비동기-호출\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C\" aria-label=\"비동기 호출 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 호출</h3>\n<ul>\n<li>\n<p>프로토콜: 어떤 절차를 거쳐서 통신을 주고받을것이냐에 대한 규칙</p>\n<ul>\n<li>현재 인터넷에서 가장 많이사용하는 규칙은 tcp/ip이다.</li>\n</ul>\n</li>\n<li>\n<p>IPv4: Internet Protocol의 4번째버전에 해당하는 기술</p>\n<ul>\n<li>이미 주소가 바닥났지만</li>\n<li>하나의 IP라우터를 통해 공용IP를 공유하고 사설 IP를 할당받는 등의 방식으로 큰 불편을 느끼지 못하고 있다.</li>\n<li>사설IP는 공식적인 인터넷 기관에 사용여부가 등록되지 않은 IP이다</li>\n</ul>\n</li>\n<li>\n<p>포트</p>\n<ul>\n<li>IP주소는 컴퓨터에 장착된 네트워크 어댑터는 식별해주지만 실행중인 프로그램은 구분할 수 없다</li>\n<li>이러한 구분을 위해 포트를 사용한다</li>\n</ul>\n</li>\n<li>\n<p>DNS: 도메인 하나에 여러개의 IP를 묶을 수 있다. 이를 통해 부하분산(load balance)을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">string myComputer = Dns.GetHostName();\nIPHostEntry entry = Dns.GetHostEntry(myComputer);\nforeach (IPAddress ipAddress in entry.AddressList)\nConsole.WriteLine(ipAddress.AddressFamily+&quot;: &quot;+ipAddress)\n//ex) InterNetworkV6: fe80::bcae:bc0f:10d5:4ec4%12\n//ex) InterNetwork: 192.168.50.95</code></pre></div>\n<ul>\n<li>클라이언트는 ping 명령어를 통해 dns의 어떤 IP와 바인딩이 됐는지 확인할 수 있으며</li>\n<li>바인딩 정보는 시스템에 저장된다</li>\n<li>\n<p>관리자모드로 cmd를 실행하고 아래의 명령어를 통해 목록을 비울 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">$ ipconfig \\flushdns</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>사설 IP의 경우로 많이 사용되는 대역은 아래와 같다 </p>\n<ul>\n<li>10.0.0.0 ~ 10.255.255.255</li>\n<li>172.16.0.0 ~ 172.31.255.255</li>\n<li>192.168.0.0 ~ 192.168.255.255</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"systemnetsocketssocket\"><a href=\"#systemnetsocketssocket\" aria-label=\"systemnetsocketssocket permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.Net.Sockets.Socket</h3>\n<ul>\n<li>Socket 클래스는 IDisposable 상속을 받기 때문에 자원해제를 해줘야한다.</li>\n<li>\n<p>TCP와 UDP의 서버소켓 모두 특정 IP와 바인딩된다. 바인딩된 IP는 접점(EndPoint)이라고 부른다</p>\n<ul>\n<li>이렇게 바인딩이 되고 나면 다른 소켓에서는 절대로 동일한 접점 정보로 바인딩 할 수 없다.</li>\n<li>소켓은 모든 IP에 대해 바인딩할 수 있는 방법을 제공하는데 이때 제공하는 주소가 \"0.0.0.0\"이다</li>\n</ul>\n</li>\n<li>\n<p>프로그램을 실행중인 컴퓨터의 IP주소를 의미하는 용도로 \"127.0.0.1\"이 예약되어있다</p>\n<ul>\n<li>loopback address라고 한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"systemnetsocketssocket-udp\"><a href=\"#systemnetsocketssocket-udp\" aria-label=\"systemnetsocketssocket udp permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.Net.Sockets.Socket: UDP</h3>\n<ul>\n<li>\n<p>TCP와 UDP의 제일 큰 차이는 데이터 전송의 신뢰성확보</p>\n<ul>\n<li>때문에 TCP가 더 느리지만</li>\n<li>UDP를 사용할때도 신뢰성 확보를 위한 코드를 추가하게되면 비슷해져서 TCP를 사용한다.</li>\n</ul>\n</li>\n<li>\n<p>UDP는 신뢰성이 결여되어있다</p>\n<ul>\n<li>이 의미는 즉, 중간에 거쳐가는 네트워크 장치가 많아질수록 상대방에게 데이터가 전달되지 않을수도 있다는 점이다.</li>\n<li>뿐만아니라 파편화되어 전달될경우 패킷이 유실될 확률이 높다.</li>\n<li>또한 순서가 확보되지 않으며</li>\n</ul>\n</li>\n<li>\n<p>UDP는 한번에 보낼 수 있는 데이터 한계가 있다</p>\n<ul>\n<li>.Net의 UDP용 SendTo()메서드는 65535바이트를 넘을 수 없다. 또한 UDP 장비중에선 32KB정도만 허락하는 경우도 있으므로 많은 데이터를 보내는것을 권장하지 않는다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"systemnetsocketssocket-tcp\"><a href=\"#systemnetsocketssocket-tcp\" aria-label=\"systemnetsocketssocket tcp permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.Net.Sockets.Socket: TCP</h3>\n<ul>\n<li>TCP는 Listen(9)호출을 통해 클라이언트로부터 접속을 허용하며, 안에 인자로 받는 숫자는 허용하는 클라이언트 접속 큐의 갯수이다.</li>\n<li>\n<p>Accpet()를 통해 클라이언트 연결을 받고 Send/Receive를 한다.</p>\n<ul>\n<li>소켓통신은 기본적으로 동기호출이므로 Send/Receive를 호출한 메서드는 블로킹된다</li>\n<li>때문에 서버가 Accept를 빠르게 처리할 수 없다.</li>\n</ul>\n</li>\n<li>\n<p>Accept를 ThreadPool을 통해 비동기로 구현할 수 있지만</p>\n<ul>\n<li>이 경우는 스레드 문맥 전환문제가 생긴다.</li>\n<li>\n<p>이를 극복하기위해 비동기로 구현하는 Begin/End+Send/Receive가 있다.</p>\n<ul>\n<li>그러나 이 방법 또한 과다하게 코드가 복잡해지므로 고성능 TCP서버 구현이 아니면 스레드와 클라이언트 간의 1:1 대응 방식이 선호된다</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>HTTP 통신은 TCP 서버/클라이언트의 한 사례이다</p>\n<ul>\n<li>\n<p>BCL은 Socket클래스를 사용하지 않고 HTTP통신을 쉽게 구현할 수 있는</p>\n<ul>\n<li>System.Net.HttpWebRequest와</li>\n<li>System.Net.WebClient를 제공한다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","timeToRead":3,"excerpt":"비동기 호출 프로토콜: 어떤 절차를 거쳐서 통신을 주고받을것이냐에 대한 규칙 현재 인터넷에서 가장 많이사용하는 규칙은 tcp/ip이다. IPv4: Internet Protocol의 4번째버전에 해당하는 기술 이미 주소가 바닥났지만 하나의 IP…","frontmatter":{"title":"c# 기본서 - 네트워크","cover":"","date":"2018-11-30T15:13:00.000Z","categories":["C#"],"tags":["c#","bcl","network","tcp","udp","ip"]},"fields":{"slug":"/c-기본서-네트워크","date":"November 29, 2018"}}},"pageContext":{"slug":"/c-기본서-네트워크","nexttitle":"c# 기본서 - BCL: 비동기 호출","nextslug":"/c-기본서-bcl-비동기-호출","prevtitle":"c# 기본서 - 데이터베이스","prevslug":"/c-기본서-데이터베이스"}}}