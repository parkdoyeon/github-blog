{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-데이터베이스","result":{"data":{"markdownRemark":{"html":"<h3 id=\"데이터-자료형\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"데이터 자료형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 자료형</h3>\n<ul>\n<li>\n<p>문자열 데이터형에서 'n' 접두사가 붙은 것은 유니코드 문자(UCS-2)를 담는 것을 의미한다</p>\n<ul>\n<li>가령 char(10)은 영문10자, 한글5자라면, nchar(10)은 영문10자, 한글 10자를 표현할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>문자열 데이터형에서 'var'은 가변데이터형이다.</p>\n<ul>\n<li>char(10)은 무조건 10바이트 데이터를 담지만 varchar(10)은 10 이하의 데이터 자료형을 담는다.</li>\n<li>임의의 문자열을 담는 경우 가변형은 데이터를 절약하는 효과가있지만 속도가 저하된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"데이터-조회\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C\" aria-label=\"데이터 조회 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 조회</h3>\n<ul>\n<li>내부적으로 레코드를 가리키는 것을 커서(Cursor)라고 부른다.</li>\n<li>\n<p>데이터 조회 속도 향상시키기</p>\n<ul>\n<li>PK를 통해 고유한 값을 갖는 칼럼을 지정할 수 있다.</li>\n<li>데이터 칼럼에 속성의 ID옵션에서 인덱스 속성을 추가할 수 있다.</li>\n<li>고유한 값이 아니지만 속도향상을 위해 정렬될 필요가 있다면 지정하면 된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"adonet\"><a href=\"#adonet\" aria-label=\"adonet permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ADO.NET?</h3>\n<ul>\n<li>\n<p>데이터 조회를 위한 프로토콜은 데이터베이스 업체에서 잘 알고있기 때문에 통신을 위한 조회 라이브러리를 직접 배포한다.</p>\n<ul>\n<li>개발자는 통신 자체보다 라이브러리를 잘 사용하는게 중요하다</li>\n</ul>\n</li>\n<li>.net에서는 이러한 라이브러리를 'ADO.NET 데이터 제공자'라고 한다.</li>\n</ul>\n<h3 id=\"read\"><a href=\"#read\" aria-label=\"read permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>READ</h3>\n<ul>\n<li>\n<p>문자열 연산의 단점</p>\n<ul>\n<li>SQL 문법에 해당하는 문자열을 사용자가 입력하는 경우 수행하는 쿼리가 의도치 않은 결과를 낳을 수 있다. 이를 SQL Injection이라고 한다.</li>\n<li>\n<p>SQL 서버는 수행되는 쿼리를 내부적인 컴파일 과정을 거쳐 실행 계획을 생성한다</p>\n<ul>\n<li>한번 수행한 쿼리의 경우 실행계획을 캐싱해서 다음 수행시 빠르게 수행할 수 있도록 한다</li>\n<li>그러나 단일 쿼리문으로 수행되는 경우 동일 쿼리 발생확률이 낮아지므로 캐시성능이 좋지않다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>'@'입력과 같이 파라미터가 매개변수화된 쿼리를 반드시 사용하자</p>\n<ul>\n<li>최근 들어서 보안문제가 점점 중요해지므로 더이상 선택의 문제가 아니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"tier\"><a href=\"#tier\" aria-label=\"tier permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tier</h3>\n<ul>\n<li>Data Access Component 클래스는 실행 어셈블리 생성 프로젝트로부터 분리해서 별도의 어셈블리에 담는 것이 일반적이다</li>\n<li>프로그램 로직을 논리/물리적으로 분리하는 것을 계층(tier)을 나눈다고 표현한다.</li>\n<li>층을 나누면 변화의 수용력이 높아진다.</li>\n</ul>\n<h3 id=\"데이터-컨테이너와-orm-poco-dataset\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-orm-poco-dataset\" aria-label=\"데이터 컨테이너와 orm poco dataset permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 컨테이너와 ORM: POCO, DataSet</h3>\n<ul>\n<li>CRUD: Create, Retrieve, Update, Delete</li>\n<li>데이터 컨테이너는 관계형 데이터 베이스를 프로그래밍 언어에 정의된 타입에 대응시킨 것이다. 이를 ORM, 흔히 OR 매핑이라고 한다.</li>\n<li>\n<p>POCO(Plain Old CLR Object): 단순한 유형의 닷넷 클래스</p>\n<ul>\n<li>데이터 컨테이너로서, 테이블에서 정의하는 칼럼의 집합이다.</li>\n</ul>\n</li>\n<li>\n<p>POCO를 사용하지 않아도 DataSet만으로도 데이터IO를 할 수있다.</p>\n<ul>\n<li>그러나 DataSet하나만 생성해도 DataColumn, DataRow, DataTable 타입이 생성되고, 따라서 메모리가 증가 이슈가 생긴다.</li>\n<li>또한, DataRow가 값을 보관하는 단위는 Object이므로 박싱/언박싱 이슈가 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"tranjection-scope\"><a href=\"#tranjection-scope\" aria-label=\"tranjection scope permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tranjection Scope</h3>\n<ul>\n<li>using 문을 이용해 구역지정을 하고 complete()메소드 호출을 통해 트랜잭션을 실행할 수 있다.</li>\n</ul>","timeToRead":2,"excerpt":"데이터 자료형 문자열 데이터형에서 'n' 접두사가 붙은 것은 유니코드 문자(UCS-2)를 담는 것을 의미한다 가령 char(10)은 영문10자, 한글5자라면, nchar(10)은 영문10자, 한글 10자를 표현할 수 있다. 문자열 데이터형에서 'var…","frontmatter":{"title":"c# 기본서 - 데이터베이스","cover":"","date":"2018-12-03T16:39:00.000Z","categories":["C#"],"tags":["c#","bcl","database","CRUD","POCO"]},"fields":{"slug":"/c-기본서-데이터베이스","date":"December 02, 2018"}}},"pageContext":{"slug":"/c-기본서-데이터베이스","nexttitle":"c# 기본서 - 네트워크","nextslug":"/c-기본서-네트워크","prevtitle":"c# 기본서 - AppDomain과 리플렉션","prevslug":"/c-기본서-app-domain과-리플렉션"}}}