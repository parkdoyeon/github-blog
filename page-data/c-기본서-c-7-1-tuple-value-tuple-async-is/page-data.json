{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-c-7-1-tuple-value-tuple-async-is","result":{"data":{"markdownRemark":{"html":"<h3 id=\"defalut-리터럴-형식-추가\"><a href=\"#defalut-%EB%A6%AC%ED%84%B0%EB%9F%B4-%ED%98%95%EC%8B%9D-%EC%B6%94%EA%B0%80\" aria-label=\"defalut 리터럴 형식 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>defalut 리터럴 형식 추가</h3>\n<ul>\n<li>\n<p>2.0에 추가된 default는 (T)를 인자로 받았다.</p>\n<ul>\n<li>문자 그대로 T를 인자로 받으면 컴파일시 기본값을 추측하는데,</li>\n</ul>\n</li>\n<li>7.0부터 어차피 타입추론이 이뤄지므로 지정이 필요없다고 판단하고 리터럴로 사용하게 됐다.</li>\n</ul>\n<h3 id=\"main메서드에-async-예약어-허용\"><a href=\"#main%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-async-%EC%98%88%EC%95%BD%EC%96%B4-%ED%97%88%EC%9A%A9\" aria-label=\"main메서드에 async 예약어 허용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main메서드에 async 예약어 허용</h3>\n<ul>\n<li>어차피 우회가 가능했기 때문에 부자연스러운 코드가 발생한다고 판단하고 허용되었다.</li>\n</ul>\n<h3 id=\"튜플-변수명-자동지정\"><a href=\"#%ED%8A%9C%ED%94%8C-%EB%B3%80%EC%88%98%EB%AA%85-%EC%9E%90%EB%8F%99%EC%A7%80%EC%A0%95\" aria-label=\"튜플 변수명 자동지정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플 변수명 자동지정</h3>\n<ul>\n<li>item1, item2 등의 형식의 변수명을 사용하지 않으려면 명시적으로 이름을 지정해줘야했지만</li>\n<li>\n<p>7.1부터는 변수명을 타입 추론(타입을 확인해서 할당될 때 적용된 이름사용) 을 통해 알수있게됐다</p>\n<ul>\n<li>\n<p>물론 추론이 불가능할 땐 item형식의 이름을 쓴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\nint age = 20;\nstring name = &quot;Kevin Arnold&quot;;\nvar t = (age, name);\nConsole.WriteLine($&quot;{t.age}, {t.Name}&quot;)\n\nvar person = new { Age = 30, Name = &quot;Winnie Copper&quot;};\nvar t = (25, person.Name);\nConsole.WriteLine($&quot;{t.Item1}, {t.Name}&quot;);\n}</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>이와 같은 변화는 LINQ에서 훨씬 간결한 표현을 할 수 있도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{  \n    //익명 타입활용\n    var dateList = from person in people\n                    select { Name = person.Name, Year = DateTime.Now.AddYears(-person.Age).Year\n    \n    //이전 버전에서 튜플 이름을 반드시 지정해주고싶을때\n    var dateList = from person in people\n                    select (Name: person.Name, Year: DateTime.Now.AddYears(-person.Age).Year);\n\n    //7.1에서 튜플 자동지정 활용\n    var dateList = from person in people\n                    select (person.Name, DateTime.Now.AddYears(-person.Age).Year);\n\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"is의-제너릭-패턴매칭-허용\"><a href=\"#is%EC%9D%98-%EC%A0%9C%EB%84%88%EB%A6%AD-%ED%8C%A8%ED%84%B4%EB%A7%A4%EC%B9%AD-%ED%97%88%EC%9A%A9\" aria-label=\"is의 제너릭 패턴매칭 허용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>is의 제너릭 패턴매칭 허용</h3>\n<ul>\n<li>T타입으로 명시된 변수의 경우 is문 혹은 case문을 통해 패턴매칭이 불가능했으나, 7.1부터 가능해졌다.</li>\n</ul>","timeToRead":2,"excerpt":"defalut 리터럴 형식 추가 2.0에 추가된 default는 (T)를 인자로 받았다. 문자 그대로 T를 인자로 받으면 컴파일시 기본값을 추측하는데, 7.0부터 어차피 타입추론이 이뤄지므로 지정이 필요없다고 판단하고 리터럴로 사용하게 됐다. Main…","frontmatter":{"title":"c# 기본서 - c# 7.1: Tuple, ValueTuple, async, is","cover":"","date":"2018-12-07T12:06:00.000Z","categories":["C#"],"tags":["c#","c#7.1","default","ValueTuple","async","is"]},"fields":{"slug":"/c-기본서-c-7-1-tuple-value-tuple-async-is","date":"December 06, 2018"}}},"pageContext":{"slug":"/c-기본서-c-7-1-tuple-value-tuple-async-is","nexttitle":"c# 기본서 - c# 5.0: async, await","nextslug":"/c-기본서-c-5-0-async-await","prevtitle":"effective c# - 1. 언어요소","prevslug":"/effective-c-1-언어요소"}}}