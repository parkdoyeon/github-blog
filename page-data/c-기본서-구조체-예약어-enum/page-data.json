{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-구조체-예약어-enum","result":{"data":{"markdownRemark":{"html":"<h3 id=\"tight-coupling-loose-coupling\"><a href=\"#tight-coupling-loose-coupling\" aria-label=\"tight coupling loose coupling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tight Coupling, Loose Coupling</h3>\n<ul>\n<li>강력한 결합: 클래스간의 호출관계와같이 코드 변화가 어려운경우</li>\n<li>\n<p>느슨한 결합: 강력한 결합의 문제점을 보완하기 위한 결합, 인터페이스를 수단으로 활용.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">class Switch\n{\n//IPower를 상속하는 모든 인스턴스를 인자로 받을 수 있다.\npublic void powerOn(IPower machine) \n{\n    machine.TrunOn();\n}\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"구조체\"><a href=\"#%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"구조체 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조체</h3>\n<ul>\n<li>클래스와 달리 참조형식이 아닌 값형식 호출을 한다.</li>\n<li>기본 자료형처럼 인스턴스 생성시 new를 붙이지 않아도 된다: 본래 new로 생성한다는 것은 값을 0으로 개발자가 직접 초기화한다는 의미임. C#은 개발자가 값을 직접 할당하지 않는 것을 오류로 판단하기때문에 new 없이 객체 생성을하면 오류판정을 함. 구조체의 기본자료형과의 차이점은 구조체는 값할당없이 선언이 가능하지만 기본자료형은 컴파일시 에러판정을 한다.</li>\n<li>매개변수 생성자를 정의해도 기본생성자가 c#에 자동으로 포함된다.</li>\n</ul>\n<h3 id=\"파라미터에-사용되는-예약어-ref과-out\"><a href=\"#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%97%90-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EC%98%88%EC%95%BD%EC%96%B4-ref%EA%B3%BC-out\" aria-label=\"파라미터에 사용되는 예약어 ref과 out permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파라미터에 사용되는 예약어 ref과 out</h3>\n<ul>\n<li>ref: 주소에 의한 전달로, 변수의 값이 위치한 주소를 직접 전달한다(얕은복사). 참조형 타입도 마찬가지로 ref없이 전달될때는 참조값이 또 다른 스택 메모리에 복사되어 전달되지만, ref이 있으면 스택 주소값이 직접 전달된다.</li>\n<li>\n<p>out: 리턴하는 값이 여러개가 될때 사용하면 유용함. 초기화 될 수도 없으며 초기화해도 쓸일이 없음. TryParse가 대표적인 사용예</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">if(int.TryParse(&quot;1234567&quot;, out n) == true)\n{\nConsole.WriteLine(n); //1234567 \n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"enum\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enum</h3>\n<ul>\n<li>열거형 사용자 정의 타입. 정수를 상속받아 열거된 이름에 순차적으로 숫자값을 부여받음. System.Object를 상속받아 ToString()을 재정의했기 때문에 Console.WriteLine()에 찍으면 문자열 반환함.</li>\n<li>숫자로 표현하도록 변환할 수 있는데 반드시 명시적 형변환 해야한다는 제약이 있음.</li>\n<li>연산시 숫자연산을 하기 때문에 여러개의 문자열을 다룬다는 특성(Attribute) [Flag]를 지정할 수 있음.</li>\n<li>enum은 const의 묶음을 표현한 것과 같다.</li>\n</ul>","timeToRead":1,"excerpt":"Tight Coupling, Loose Coupling…","frontmatter":{"title":"c# 기본서 - 구조체, 예약어, Enum","cover":"","date":"2018-10-19T21:10:00.000Z","categories":["C#"],"tags":["c#","객체지향","기본","struct","ref","out","coupling","enum"]},"fields":{"slug":"/c-기본서-구조체-예약어-enum","date":"October 18, 2018"}}},"pageContext":{"slug":"/c-기본서-구조체-예약어-enum","nexttitle":"c# 기본서 - 다형성","nextslug":"/c-기본서-다형성","prevtitle":"c# 기본서 - 멤버별 유형확장","prevslug":"/c-기본서-멤버별-유형확장"}}}