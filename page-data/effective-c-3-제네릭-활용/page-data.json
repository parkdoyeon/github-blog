{"componentChunkName":"component---src-templates-post-js","path":"/effective-c-3-제네릭-활용","result":{"data":{"markdownRemark":{"html":"<h3 id=\"반드시-필요한-제약조건만-설정하라\"><a href=\"#%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4%EB%A7%8C-%EC%84%A4%EC%A0%95%ED%95%98%EB%9D%BC\" aria-label=\"반드시 필요한 제약조건만 설정하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반드시 필요한 제약조건만 설정하라</h3>\n<ul>\n<li>제너릭 타입을 활용할때 타입 조건을 넣고싶다면 제약조건 예약어 <a href=\"parkdoyeon.github.io/csharp/2018-12-05-csharp-2.0-Generic\">where</a>를 사용하는 것이 좋다</li>\n<li>그러나 기본값을 할당하는데 있어서 default()와 new()는 분명한 차이가 있으므로, 제약조건에 new()를 넣을땐 이용자가 구현에 어려움을 겪을수도 있다는 것을 생각해야한다.</li>\n</ul>\n<h3 id=\"런타입에-타입을-확인하여-최적의-알고리즘을-사용하라\"><a href=\"#%EB%9F%B0%ED%83%80%EC%9E%85%EC%97%90-%ED%83%80%EC%9E%85%EC%9D%84-%ED%99%95%EC%9D%B8%ED%95%98%EC%97%AC-%EC%B5%9C%EC%A0%81%EC%9D%98-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"런타입에 타입을 확인하여 최적의 알고리즘을 사용하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>런타입에 타입을 확인하여 최적의 알고리즘을 사용하라</h3>\n<ul>\n<li>제약조건을 사용하지 않고 제너릭 타입을 사용하게되면 런타임에 타입확인이 이뤄진다.</li>\n<li>이때, 런타임 환경을 최대한 고려하여 최적화된 타입별 생성자/메소드 오버로드등을 작성하는 것이 좋다.</li>\n</ul>\n<h3 id=\"icomparablet와-icomparert를-이용하여-객체의-선후관계를-정의하라\"><a href=\"#icomparablet%EC%99%80-icomparert%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%84%A0%ED%9B%84%EA%B4%80%EA%B3%84%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"icomparablet와 icomparert를 이용하여 객체의 선후관계를 정의하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IComparable<T>와 IComparer<T>를 이용하여 객체의 선후관계를 정의하라</h3>\n<ul>\n<li>\n<p>ICompareable<T>는 현재 객체의 비교대상을 지정해 리턴하고, IComparer<T>는 T타입의 모든 객체의 비교 함수를 정의한다. <a href=\"https://stackoverflow.com/questions/9316918/what-is-the-difference-between-iequalitycomparert-and-iequatablet\">참조</a></p>\n<ul>\n<li><strong>IComparable</strong> - Defines an interface for an object with a CompareTo() method that takes another object of the same type and compares <strong>the current object</strong> to the passed one. It internalizes the comparison to the object, allowing for a more inline comparison operation, and is useful when there's only one logical way, or an overwhelmingly common default way, to compare objects of a type.</li>\n<li><strong>IComparer</strong> - Defines an interface with a Compare() method that <strong>takes two objects of another type</strong> (which don't have to implement IComparable) and compares them. This externalizes the comparison, and is useful when there are many feasible ways to compare two objects of a type, or when the type doesn't implement IComparable (or the IComparable implementation compares a different way than what you want) and you don't have control over that type's source.</li>\n</ul>\n</li>\n<li>이때 제네릭 타입이 구현안된 IComparable, ICompar er도 하위 호환(.NET 2.0 이전버전)을 위해 구현하면 좋다.</li>\n</ul>\n<h3 id=\"타입-매개변수가-idisposable을-구현한-경우를-대비하여-제네릭-클래스를-작성하라\"><a href=\"#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-idisposable%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%9C-%EA%B2%BD%EC%9A%B0%EB%A5%BC-%EB%8C%80%EB%B9%84%ED%95%98%EC%97%AC-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"타입 매개변수가 idisposable을 구현한 경우를 대비하여 제네릭 클래스를 작성하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 매개변수가 IDisposable을 구현한 경우를 대비하여 제네릭 클래스를 작성하라</h3>\n<ul>\n<li>\n<p>타입 매개변수가 IDisposable을 구현했을때 using(a as IDisposable) 구문을 사용하여 dispose 호출이 가능하다</p>\n<ul>\n<li>\n<p>만약 a가 IDisposable을 구현하지 않았다면 null이 리턴되고 dispose 호출을 하지 않기때문에, 깔끔한 코드 작성이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\npublic void GetThingsDone()\n{\n    T driver = new T();\n    using(driver as IDisposable)\n    {\n        driver.DoWork();\n    }\n}\n}</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"공변성과-반공변성을-지원하라-고민해볼-것\"><a href=\"#%EA%B3%B5%EB%B3%80%EC%84%B1%EA%B3%BC-%EB%B0%98%EA%B3%B5%EB%B3%80%EC%84%B1%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%9D%BC-%EA%B3%A0%EB%AF%BC%ED%95%B4%EB%B3%BC-%EA%B2%83\" aria-label=\"공변성과 반공변성을 지원하라 고민해볼 것 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공변성과 반공변성을 지원하라 (고민해볼 것)</h3>\n<h3 id=\"타입-매개변수에-대해-메서드-제약-조건을-서정하려면-델리게이트를-사용하라\"><a href=\"#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%97%90-%EB%8C%80%ED%95%B4-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%9C%EC%95%BD-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%84%9C%EC%A0%95%ED%95%98%EB%A0%A4%EB%A9%B4-%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"타입 매개변수에 대해 메서드 제약 조건을 서정하려면 델리게이트를 사용하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 매개변수에 대해 메서드 제약 조건을 서정하려면 델리게이트를 사용하라</h3>\n<ul>\n<li>\n<p>특정 메서드를 구현하기위해서 인터페이스를 설정하기보다, 해당 메서드를 호출부에서 구현하는 것이 더 편리할때가 있다.</p>\n<ul>\n<li>가령</li>\n<li>\n<p>특정 매개변수를 받는 생성자 시퀀스 함수를 호출할 때, 타입 제약조건으로 '매개변수가 있는' 생성자를 설정할 순 없다. 여기서 델리게이트를 사용하면 제약을 둘 수 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\nList&lt;Point&gt; values = new List&lt;Point&gt;(\n    Utilities.Zip(xValues, yValues, (x, y) -&gt; new Point(x, y))\n)\n}</code></pre></div>\n</li>\n<li>인터페이스 구현시 다양한 타입이 전달되면 타입별로 오버라이드를 해야할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"베이스-클래스나-인터페이스에-대해서-제네릭을-특화하지-말라\"><a href=\"#%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%82%98-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%8A%B9%ED%99%94%ED%95%98%EC%A7%80-%EB%A7%90%EB%9D%BC\" aria-label=\"베이스 클래스나 인터페이스에 대해서 제네릭을 특화하지 말라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베이스 클래스나 인터페이스에 대해서 제네릭을 특화하지 말라</h3>\n<ul>\n<li>오버로드된 메서드가 여러개인 경우, 컴파일러가 이 중 하나를 어떻게 선택하는지 정확히 알고있어야 한다.</li>\n<li>\n<p>잘못된 오버라이드 함수가 선택되었을때 메서드 내에서 타입확인을 하여 런타임에러를 방지할 수 있겠지만,</p>\n<ul>\n<li>제네릭은 본래 런타임에 타입확인을 수행하지 않기 위해 만들어졌다.</li>\n<li>박싱/언박싱을 통한 런타임 오버헤드도 문제가 될 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"타입-매개변수로-인스턴스-필드를-만들-필요가-없다면-제네릭-메서드를-정의하라\"><a href=\"#%ED%83%80%EC%9E%85-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%ED%95%84%EB%93%9C%EB%A5%BC-%EB%A7%8C%EB%93%A4-%ED%95%84%EC%9A%94%EA%B0%80-%EC%97%86%EB%8B%A4%EB%A9%B4-%EC%A0%9C%EB%84%A4%EB%A6%AD-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%9D%BC\" aria-label=\"타입 매개변수로 인스턴스 필드를 만들 필요가 없다면 제네릭 메서드를 정의하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 매개변수로 인스턴스 필드를 만들 필요가 없다면 제네릭 메서드를 정의하라</h3>\n<ul>\n<li>\n<p>제너릭'클래스'의 경우 호출시마다 타입을 명시적으로 지정해야한다.</p>\n<ul>\n<li>이렇게하면 우선 귀찮은 문제가 있고</li>\n<li>해당 클래스마다 제네릭 클래스가 구현되었는지 확인해봐야한다.</li>\n</ul>\n</li>\n<li>\n<p>반면 일반 클래스내에서 오버로딩을 통해 제네릭 함수를 구현하면</p>\n<ul>\n<li>캐스팅을 통한 문제(박싱/언박싱 오버헤드, 런타임 에러)가 발생하지 않는다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"제네릭-인터페이스와-논제네릭-인터페이스를-함께-구현하라\"><a href=\"#%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%99%80-%EB%85%BC%EC%A0%9C%EB%84%A4%EB%A6%AD-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%ED%95%A8%EA%BB%98-%EA%B5%AC%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"제네릭 인터페이스와 논제네릭 인터페이스를 함께 구현하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제네릭 인터페이스와 논제네릭 인터페이스를 함께 구현하라</h3>\n<ul>\n<li>버전문제!</li>\n</ul>\n<h3 id=\"인터페이스는-간략히-정의하고-기능의-확장은-확장메서드를-사용하라\"><a href=\"#%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8A%94-%EA%B0%84%EB%9E%B5%ED%9E%88-%EC%A0%95%EC%9D%98%ED%95%98%EA%B3%A0-%EA%B8%B0%EB%8A%A5%EC%9D%98-%ED%99%95%EC%9E%A5%EC%9D%80-%ED%99%95%EC%9E%A5%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"인터페이스는 간략히 정의하고 기능의 확장은 확장메서드를 사용하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인터페이스는 간략히 정의하고 기능의 확장은 확장메서드를 사용하라</h3>\n<ul>\n<li>인터페이스를 통해 기능추가를 하면 기존에 인터페이스를 구현하고 있는 클래스를 수정해야한다.</li>\n<li>\n<p>반면에 확장메서드를 사용하면</p>\n<ul>\n<li>모든 구현부의 모든 클래스에서 호출이 가능하고</li>\n<li>이용자에게 메소드의 구현방식에대한 가이드가 된다</li>\n</ul>\n</li>\n<li>물론 동일한 이름의 확장메서드 명이 이미 구현이 되어있는경우 확장메서드가 호출되는 문제가 있을 수 있지만, 이경우 이름을 바꾸거나 완벽하게 동일한 기능을 하도록 작성하여 피할 수 있다.</li>\n</ul>\n<h3 id=\"확장-메서드를-이용하여-구체화된-제네릭-타입을-개선하라\"><a href=\"#%ED%99%95%EC%9E%A5-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B5%AC%EC%B2%B4%ED%99%94%EB%90%9C-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%83%80%EC%9E%85%EC%9D%84-%EA%B0%9C%EC%84%A0%ED%95%98%EB%9D%BC\" aria-label=\"확장 메서드를 이용하여 구체화된 제네릭 타입을 개선하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>확장 메서드를 이용하여 구체화된 제네릭 타입을 개선하라</h3>\n<ul>\n<li>\n<p>확장메서드를 사용하지 않으면 구체화된 제네릭타입을 상속해서 새로운 타입을 만들어야 하는데,</p>\n<ul>\n<li>이렇게 하면 상속타입에 대한 제약이 발생한다.</li>\n<li>가령 이터레이터 확장메서드를 통해 메서드 구현을 하면될것을 List타입을 상속받아 클래스 내에서 구현하면 다른 이터레이터 형태의 메서드 구현이 어려워진다.</li>\n</ul>\n</li>\n</ul>","timeToRead":7,"excerpt":"반드시 필요한 제약조건만 설정하라 제너릭 타입을 활용할때 타입 조건을 넣고싶다면 제약조건 예약어 where를 사용하는 것이 좋다 그러나 기본값을 할당하는데 있어서 default()와 new()는 분명한 차이가 있으므로, 제약조건에 new…","frontmatter":{"title":"effective c# - 3. 제네릭 활용","cover":"","date":"2019-01-03T12:19:00.000Z","categories":["C#"],"tags":["effectivec#","c#"]},"fields":{"slug":"/effective-c-3-제네릭-활용","date":"January 02, 2019"}}},"pageContext":{"slug":"/effective-c-3-제네릭-활용","nexttitle":"effective c# - 2. 리소스 관리","nextslug":"/effective-c-2-리소스-관리","prevtitle":"effective c# - 4. LINQ 활용","prevslug":"/effective-c-4-linq-활용"}}}