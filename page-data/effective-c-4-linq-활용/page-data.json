{"componentChunkName":"component---src-templates-post-js","path":"/effective-c-4-linq-활용","result":{"data":{"markdownRemark":{"html":"<h3 id=\"컬렉션을-반환하기보다-이터레이터를-반환하는-것이-낫다\"><a href=\"#%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%98%EA%B8%B0%EB%B3%B4%EB%8B%A4-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%B0%98%ED%99%98%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%82%AB%EB%8B%A4\" aria-label=\"컬렉션을 반환하기보다 이터레이터를 반환하는 것이 낫다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컬렉션을 반환하기보다 이터레이터를 반환하는 것이 낫다</h3>\n<ul>\n<li>지연평가로 인해 파라미터의 유효성 확인이 늦어질 경우 다른 메소드에 유효성 확인 로직을 넣고, 통과하면 이터레이터를 리턴으로 호출하는 방식을 쓸 수 있다.</li>\n</ul>\n<h3 id=\"루프보다-쿼리-구문이-낫다\"><a href=\"#%EB%A3%A8%ED%94%84%EB%B3%B4%EB%8B%A4-%EC%BF%BC%EB%A6%AC-%EA%B5%AC%EB%AC%B8%EC%9D%B4-%EB%82%AB%EB%8B%A4\" aria-label=\"루프보다 쿼리 구문이 낫다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>루프보다 쿼리 구문이 낫다</h3>\n<ul>\n<li>쿼리 구문을 사용하면 프로그램 논리를 명령형 방식에서 선언적인 방식으로 전환할 수 있다.</li>\n<li>이렇게 하면 한번의 순회 단계 내에서 여러 작업을 결합하여 단번에 수행할 수 있고</li>\n<li>원래의 의도도 더 명확하게 구현할 수 있다.</li>\n</ul>\n<h3 id=\"시퀀스에-사용할-수-있는-조합가능한-api를-사용해라\"><a href=\"#%EC%8B%9C%ED%80%80%EC%8A%A4%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A1%B0%ED%95%A9%EA%B0%80%EB%8A%A5%ED%95%9C-api%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%9D%BC\" aria-label=\"시퀀스에 사용할 수 있는 조합가능한 api를 사용해라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시퀀스에 사용할 수 있는 조합가능한 API를 사용해라</h3>\n<ul>\n<li>\n<p>yield return 문을 사용하면 시퀀스를 반환하는 메서드를 쉽게 만들 수 있다.</p>\n<ul>\n<li>이를 사용하면 매서드 내에서 시퀀스 내의 개별요소를 저장하기 위해 별도의 저장소를 마련할 필요가 없다.</li>\n<li>왜냐하면 정확히 값이 필요한 시점에 입력 시퀀스 상에서 다음 요소를 가져오고, 출력결과가 반드시 필요한 시점에 출력 시퀀스로 결과를 보내기 때문이다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"action-function-predicate와-순회방식을-분리하라\"><a href=\"#action-function-predicate%EC%99%80-%EC%88%9C%ED%9A%8C%EB%B0%A9%EC%8B%9D%EC%9D%84-%EB%B6%84%EB%A6%AC%ED%95%98%EB%9D%BC\" aria-label=\"action function predicate와 순회방식을 분리하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action, Function, Predicate와 순회방식을 분리하라</h3>\n<ul>\n<li>시퀀스를 순회하는 것과, 개별요소에 대해 작업을 수행하는 것(조건식 확인)을 분리해야한다. 이렇게 하면 시퀀스에 대해 다양한 작업을 구현할 수 있다.</li>\n</ul>\n<h3 id=\"필요한-시점에-필요한-요소를-생성하라\"><a href=\"#%ED%95%84%EC%9A%94%ED%95%9C-%EC%8B%9C%EC%A0%90%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9A%94%EC%86%8C%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%98%EB%9D%BC\" aria-label=\"필요한 시점에 필요한 요소를 생성하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필요한 시점에 필요한 요소를 생성하라</h3>\n<ul>\n<li>시퀀스를 생성하는 메서드의 참조가 여러군데에서 일어나면 일관성 문제가 발생할 수 있다.</li>\n<li>때문에 이터레이터 메소드(ex .TakeWhile(delegate actionfunc))를 통해 값이 필요한 순간에 요소를 생성할 수 있도록 하면 좋다.</li>\n</ul>\n<h3 id=\"함수를-매개변수로-사용하여-결합도를-낮춰라\"><a href=\"#%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EA%B2%B0%ED%95%A9%EB%8F%84%EB%A5%BC-%EB%82%AE%EC%B6%B0%EB%9D%BC\" aria-label=\"함수를 매개변수로 사용하여 결합도를 낮춰라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수를 매개변수로 사용하여 결합도를 낮춰라</h3>\n<ul>\n<li>인터페이스를 작성하고 이를 구현하도록 구조를 가져가면 베이스클래스에 의존하는 방식(부모-자식 상속관계)보다 더 느슨한 결합을 만들 수 있다.</li>\n<li>\n<p>상속 기법을 엄밀하게 정의하지 않고 델리게이트를 사용한다 하더라도, 델리게이트에 대한 참조가 필요하므로 런타임에 결합관계는 여전히 발생한다</p>\n<ul>\n<li>만약 어떤 객체가 델리게이트를 나중에 다시사용하기위해 그 복사본을 저장해두면 이 객체는 델리게이트의 생명주기에 영향을 미치게 된다. 즉, 참조하는 델리게이트가 이전보다 오랜기간 살아있게 된다.</li>\n</ul>\n</li>\n</ul>","timeToRead":3,"excerpt":"…","frontmatter":{"title":"effective c# - 4. LINQ 활용","cover":"","date":"2019-01-24T15:05:00.000Z","categories":["C#"],"tags":["effectivec#","c#","linq","enumerator","yield"]},"fields":{"slug":"/effective-c-4-linq-활용","date":"January 23, 2019"}}},"pageContext":{"slug":"/effective-c-4-linq-활용","nexttitle":"effective c# - 3. 제네릭 활용","nextslug":"/effective-c-3-제네릭-활용","prevtitle":"R - 인코딩 옵션 추론 및 한글 변환하기","prevslug":"/r-인코딩-옵션-추론-및-한글-변환하기"}}}