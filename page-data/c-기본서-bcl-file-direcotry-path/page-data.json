{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-bcl-file-direcotry-path","result":{"data":{"markdownRemark":{"html":"<h3 id=\"systemiofilestream\"><a href=\"#systemiofilestream\" aria-label=\"systemiofilestream permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.IO.FileStream</h3>\n<ul>\n<li>MemoryStream은 메모리에 할당된 바이트배열을 읽고 쓰지만</li>\n<li>FileStream은 디스크 파일을 읽고 쓴다</li>\n<li>읽을때는 StreamWriter, 가독성을 무시하고 효율적으로 기록을 하려면 BinaryWriter를 사용하면 된다.</li>\n<li>\n<p>Mode/Access/Share</p>\n<ul>\n<li>Mode: Open, Create, OpenOrCreate, Truncate(기존데이터 삭제하고 열기), Append(마지막으로 읽던 position으로 이동해서 무조건 열기(Write접근만 가능) - 로깅목적으로 사용함)</li>\n<li>Access: Read, Write, ReadWrite(읽기쓰기 목적으로 열기), </li>\n<li>Share: None(두번이상 열면 무조건 실패, 파일을 맨 처음 열고있는 스트림만 사용하기), Read, Write, ReadWrite(같은 파일을 서로 다른 스트림에서 읽고 쓰는게 가능함)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"systemiofile-systemiofileinfo\"><a href=\"#systemiofile-systemiofileinfo\" aria-label=\"systemiofile systemiofileinfo permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.IO.File, System.IO.FileInfo</h3>\n<ul>\n<li>\n<p>File: 자주 사용되는 조작기능을 담은 정적클래스</p>\n<ul>\n<li>Copy, Exists, Move(파일이동), Read, Write 등</li>\n</ul>\n</li>\n<li>FileInfo는 File타입의 기능을 인스턴스 멤버로 일부 구현하고 사용법은 거의 동일하다.</li>\n</ul>\n<h3 id=\"systemiodirectory-systemiodirectoryinfo-systemiopath\"><a href=\"#systemiodirectory-systemiodirectoryinfo-systemiopath\" aria-label=\"systemiodirectory systemiodirectoryinfo systemiopath permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.IO.Directory, System.IO.DirectoryInfo, System.IO.Path</h3>\n<ul>\n<li>마찬가지로 Directory는 정적 타입이고, DirectoryInfo는 Directory기능의 일부를 구현한 인스턴스멤버다</li>\n<li>GetFiles, GetDirectories 등을 통해 지정된 경로에 있는 하위 디렉토리/파일 목록을 문자열로 갖고올 수 있다</li>\n<li>이 경우 '?'와 '*' 와일드카드 사용이 가능하다.</li>\n<li>가령 GetFiles(targetPath, '???.dll')과 같이 쓸 경우 해당 경로에 있는 파일중 파일명이 3글자인 dll목록을 갖고올 수 있다.</li>\n<li>Move를 통해 디렉토리를 이동할 수 있다</li>\n</ul>\n<h3 id=\"systemiopath\"><a href=\"#systemiopath\" aria-label=\"systemiopath permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>System.IO.Path</h3>\n<ul>\n<li>경로와 관련한 유용한 정적메서드를 제공하므로 참조할 것 (426p)</li>\n<li>특히 Path.Combine메서드는 'folder' + '\\temp.exe'와 같이 통일이 안된 경로 문자열을 적절한 방식으로 혼합해준다.</li>\n<li>사용자로부터 경로를 입력받는 경우 허용되지 않는 문자가 포함될때 exception이 발생할수도 있는데,</li>\n<li>GetInvalidFileNameChars, GetInvalidPathChars같은 경우는 폴더명이나 경로에 허용되지 않는 문자열을 찾아낸다.</li>\n</ul>","timeToRead":1,"excerpt":"System.IO.FileStream MemoryStream은 메모리에 할당된 바이트배열을 읽고 쓰지만 FileStream은 디스크 파일을 읽고 쓴다 읽을때는 StreamWriter, 가독성을 무시하고 효율적으로 기록을 하려면 BinaryWriter…","frontmatter":{"title":"c# 기본서 - BCL: File, Direcotry, Path","cover":"","date":"2018-11-21T23:18:00.000Z","categories":["C#"],"tags":["c#","bcl","FileStream","File","Directory","Path"]},"fields":{"slug":"/c-기본서-bcl-file-direcotry-path","date":"November 20, 2018"}}},"pageContext":{"slug":"/c-기본서-bcl-file-direcotry-path","nexttitle":"c# 기본서 - BCL: 시간계산, Collection, 문자열처리, 직렬화와 Stream","nextslug":"/c-기본서-bcl-시간계산-collection-문자열처리-직렬화와-stream","prevtitle":"c# 기본서 - BCL: Thread, Monitor, Lock, Interlocked","prevslug":"/c-기본서-bcl-thread-monitor-lock-interlocked"}}}