{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-bcl-비동기-호출","result":{"data":{"markdownRemark":{"html":"<h3 id=\"비동기-호출\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C\" aria-label=\"비동기 호출 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 호출</h3>\n<ul>\n<li>일반적으로 동기호출을 Blocking 호출이라고 한다. 동기호출을 하면 해당 스레드는 아무것도 수행하지 못한다. 예시로 disk I/O가 있다.</li>\n<li>비동기 호출은 결국 또 다른 스레드를 만들어 실행시킨다는 점에서 스레드의 한 종류로 볼 수 있다.</li>\n<li>ThreadPool과 비교를 했을때 비동기 스레드는 바로 작업을 수행한다는 점에서 조금 빠를 수 있는데, 이정도 의미가 있는 경우는 이용자 수가 아주 많은경우이다(460p 참조)</li>\n</ul>\n<h3 id=\"비동기-호출-delegate\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%98%B8%EC%B6%9C-delegate\" aria-label=\"비동기 호출 delegate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 호출: Delegate</h3>\n<ul>\n<li>I/O말고도 일반 메서드에서도 비동기 호출을 할 수 있는 수단으로, BCL이 제공하는 기능이다.</li>\n<li>\n<p>간결하기때문에 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public delegate long CalcMethod(int start, int end);\nstatic void Main(string[] args) {\nCalcMethod calc = new CalcMethod(Calc.Cumsum);\n \nIAsyncResult ar = calc.BeginInvoke(1, 100, null, null);\n//delegate타입의 BeginInvoke 메서드 호출하며 ThreadPool의 스레드에서 실행된다\n\nar.AsyncWaitHandle.WaitOne(); \n//AsyncWaitHandle은 EventWaitHandle타입이고, Cal.CumSum이 완료될때까지 현재 스레드를 대기시킨다.\n\nlong result = calc.EndInvoke(ar);\n//반환 값을 얻기 위해 호출하는 메서드, 없어도 반드시 호출하는 것을 권장한다.\n//실행을 차단할 수있으므로 사용자 인터페이스 제공하는 스레드에서는 호출하지 말아야한다\n}\npublic class Calc {\npublic static long Cumsum(int start, int end) {\n    long sum = 0;\n    for(int i=start; i&lt;=end; i++;) {\n        sum += i;\n    }\n    return sum;\n}\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"filestreambeginread-구현과-유사하게-비동기-구현하기\"><a href=\"#filestreambeginread-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%9C%A0%EC%82%AC%ED%95%98%EA%B2%8C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"filestreambeginread 구현과 유사하게 비동기 구현하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FileStream.BeginRead 구현과 유사하게 비동기 구현하기</h3>\n<ul>\n<li>MSDN문서를 보면 delegate구현 방식에 따라 FileStream의 BeginRead/EndRead가 구현되었다.</li>\n<li>BeginInvoke의 세번째 인자로 콜백메서드를 지정해주면된다.</li>\n<li>\n<p>네번째 인자는 StateObject로, 해당 메서드를 여러 곳에서 비동기 호출 했을 때 각각의 비동기 호출을 구분하는 역할을 갖는다.(stateObject - A user-provided object that distinguishes this particular asynchronous read request from other requests.) <a href=\"http://www.java2s.com/Tutorials/CSharp/System.IO/FileStream/C_FileStream_BeginRead.htm\">참고</a></p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public delegate long CalcMethod(int start, int end);\nstatic void Main(string[] args) {\nCalcMethod calc = new CalcMethod(Calc.Cumsum);\ncalc.BeginInvoke(1, 100, calcCompleted, calc);\n}\nstatic void calcCompleted(IAsyncResult ar) {\nCalcMethod calc = ar,AsyncState as CalcMethod;\nlong result = calc.EndInvoke(ar);\n}</code></pre></div>\n</li>\n</ul>","timeToRead":2,"excerpt":"비동기 호출 일반적으로 동기호출을 Blocking 호출이라고 한다. 동기호출을 하면 해당 스레드는 아무것도 수행하지 못한다. 예시로 disk I/O…","frontmatter":{"title":"c# 기본서 - BCL: 비동기 호출","cover":"","date":"2018-11-30T12:02:00.000Z","categories":["C#"],"tags":["c#","bcl","thread","async"]},"fields":{"slug":"/c-기본서-bcl-비동기-호출","date":"November 29, 2018"}}},"pageContext":{"slug":"/c-기본서-bcl-비동기-호출","nexttitle":"c# 기본서 - BCL: Thread, Monitor, Lock, Interlocked","nextslug":"/c-기본서-bcl-thread-monitor-lock-interlocked","prevtitle":"c# 기본서 - 네트워크","prevslug":"/c-기본서-네트워크"}}}