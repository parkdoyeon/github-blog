{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-c-3-0-lambda-확장메서드","result":{"data":{"markdownRemark":{"html":"<h3 id=\"lambda-expression\"><a href=\"#lambda-expression\" aria-label=\"lambda expression permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda Expression</h3>\n<ul>\n<li>\n<p>람다 대수는 수학에서 함수를 표기하는 방식에서 착안했다. 프로그래밍에서는 두가지 의미를 갖는다.</p>\n<ol>\n<li>\n<p>코드로서 람다: 익명메서드의 간편표기법</p>\n<ul>\n<li>가령 수학에서 f(x, y) = x + y인 식을 람다로 치면 (x, y) => x + y 로 표현하는 것과 같다.</li>\n<li>위를 부연하면, 기본적으로 값이 반환된다는 가정하에 return문을 생략할 수 있으며, 이경우 람다식의 연산자인 '=>' 기호 다음에 오는 중괄호도 생략 가능하다.</li>\n</ul>\n</li>\n<li>데이터로서 람다: 식자체가 데이터가 되어 구문분석의 대상이 되는 것들. 별도로 컴파일 가능하며 메서드로도 실행 가능하다.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"익명메서드의-간편표기법으로서의-람다-actiont-functresult\"><a href=\"#%EC%9D%B5%EB%AA%85%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EA%B0%84%ED%8E%B8%ED%91%9C%EA%B8%B0%EB%B2%95%EC%9C%BC%EB%A1%9C%EC%84%9C%EC%9D%98-%EB%9E%8C%EB%8B%A4-actiont-functresult\" aria-label=\"익명메서드의 간편표기법으로서의 람다 actiont functresult permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>익명메서드의 간편표기법으로서의 람다: Action<T>, Func<TResult></h3>\n<ul>\n<li>\n<p>익명메서드에서는 delegate 정의를 별도로 해줘야하는 문제가 있었다. (이전 글 익명메서드 예제 참조) 이를 위해 별개로 정의된 함수표현이 있는데, 아래와 같다.</p>\n<ul>\n<li>public delegate void Action<T>(T obj) : 반환값이 없는 델리게이트, T형식 매개변수는 입력될 매개 인자 1개의 타입지정</li>\n<li>public delegate void Func<TResult>() : 반환값이 있는 델리게이트, TResult는 반환될 타입지정</li>\n</ul>\n</li>\n<li>2가지 함수 다 인자가 16개까지 확장 가능하며</li>\n<li>Func<TResult>()가 인자가 있는 경우에는 마지막 타입지정에 TResult만 있으면 된다.</li>\n</ul>\n<h3 id=\"actiont-functresult-활용과-확장-매서드\"><a href=\"#actiont-functresult-%ED%99%9C%EC%9A%A9%EA%B3%BC-%ED%99%95%EC%9E%A5-%EB%A7%A4%EC%84%9C%EB%93%9C\" aria-label=\"actiont functresult 활용과 확장 매서드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Action<T>, Func<TResult> 활용과 확장 매서드</h3>\n<ul>\n<li>\n<p>List<T>에 정의된 ForEach는 다음과 Action<T>를 인자로 받는다. 이를 다음과 같이 표현 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">list.ForEach((elem) =&gt; { Console.WriteLine(elem + &quot; * 2 == &quot;+ (elem*2)); }); //list의 요소 수만큼 델리게이트가 실행된다.</code></pre></div>\n</li>\n<li>List<T>의 FindAll()은 Predicate<T>로 표기되는 Func&#x3C;T, bool>을 인자로 받는다.</li>\n<li>\n<p>FindAll과 유사한 기능을 가진 Where()의 경우 iEnumerable<TSource>의 확장 메서드로, 열거자를 통해 직접 요소를 순회할때서야 람다식이 하나씩 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">//확장 메서드: 기존 클래스의 내부구조를 바꾸지 않고 새로운 인스턴스 메서드를 정의하는 것처럼 추가하는 것. static클래스에 static 메서드로 확장하려는 타입의 매개변수를 this 예약와함께 명시하는 식.\npublic static IEnumerable&lt;TSource&gt; Where&lt;TSource&gt;(this IEnumerable&lt;TSource&gt; source, Func&lt;TSoucem bool&gt; predicate)</code></pre></div>\n<ul>\n<li>이를 지연된 평가(lazy evaluation)이라고 하며,</li>\n<li>CPU가 실제로 데이터가 필요한 순간에서야 실행된다는 특징이 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"데이터로서의-람다\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C%EC%84%9C%EC%9D%98-%EB%9E%8C%EB%8B%A4\" aria-label=\"데이터로서의 람다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터로서의 람다</h3>\n<ul>\n<li>데이터 구조로 표현된 것을 식트리(expression tree)라고 한다</li>\n<li>이는 델리게이트 타입으로 전달되는 것이 아니라 구문분석을 할 수 있는 System.Linq.Expressions.Expression 타입 인스턴스가 된다.</li>\n<li>데이터 람다 메서드는 실행시점에 만들 수 있다.</li>\n</ul>","timeToRead":2,"excerpt":"Lambda Expression 람다 대수는 수학에서 함수를 표기하는 방식에서 착안했다. 프로그래밍에서는 두가지 의미를 갖는다. 코드로서 람다: 익명메서드의 간편표기법 가령 수학에서 f(x, y) = x + y인 식을 람다로 치면 (x, y) => x…","frontmatter":{"title":"c# 기본서 - c# 3.0: Lambda, 확장메서드","cover":"","date":"2018-12-06T10:03:00.000Z","categories":["C#"],"tags":["c#","c#3.0","Lambda","extensionMethod","this"]},"fields":{"slug":"/c-기본서-c-3-0-lambda-확장메서드","date":"December 05, 2018"}}},"pageContext":{"slug":"/c-기본서-c-3-0-lambda-확장메서드","nexttitle":"c# 기본서 - c# 2.0, Generic과 syntatic sugar","nextslug":"/c-기본서-c-2-0-generic과-syntatic-sugar","prevtitle":"c# 기본서 - c# 3.0: LINQ","prevslug":"/c-기본서-c-3-0-linq"}}}