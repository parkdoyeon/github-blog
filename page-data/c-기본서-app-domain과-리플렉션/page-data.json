{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-app-domain과-리플렉션","result":{"data":{"markdownRemark":{"html":"<h3 id=\"응용프로그램-도메인app-domain\"><a href=\"#%EC%9D%91%EC%9A%A9%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EB%8F%84%EB%A9%94%EC%9D%B8app-domain\" aria-label=\"응용프로그램 도메인app domain permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>응용프로그램 도메인(App Domain)</h3>\n<ul>\n<li>\n<p>닷넷 응용프로그램은 EXE 프로세스로 실행되고 내부의 CLR에 의해 응용프로그램 도메인(App Domain)으로 나뉜다.</p>\n<ul>\n<li>이는 내부적인 격리 공간으로, 별도의 통신방법을 설정하지 않는 한 서로 침범할 수 없으며,</li>\n<li>하나의 App Domain이 불안정하게 종료가 되어도 영향을 끼치지 않는다.</li>\n</ul>\n</li>\n<li>\n<p>App Domain 내부에는 어셈블리들이 로드된다.</p>\n<ul>\n<li>각 도메인들은 메인에서 AppDomain 클래스와 같은 reflection관련 클래스를 통해 이름과 목록을 조회하고, 직접 호출할 수 있다.</li>\n<li>심지어 직접 인스턴스를 생성할수도 있다.</li>\n<li>해제도 가능한데, Default AppDomain은 직접 해제가 불가능하고 프로세스가 종료될때만 해제된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"리플렉션reflection\"><a href=\"#%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98reflection\" aria-label=\"리플렉션reflection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리플렉션(Reflection)</h3>\n<ul>\n<li>리플렉션을 이용한 메서드 접근은 메인스레드에서 실행하는 것과 동일하게 어셈블리의 클래스와 메서드 접근을 가능케 하며,</li>\n<li>컴파일 시점에서 다른 코드에 대한 정보가 없더라도 접근이 가능하도록 한다.</li>\n<li>OOP의 캡슐화 마저도 무시할 수 있는 위력을 갖는다.</li>\n<li>\n<p>이러한 접근은 '느슨한 결합'이라고 하며, </p>\n<ul>\n<li>속도 저하에대한 이슈가 있지만 기술로 뛰어넘는 추세이다.</li>\n</ul>\n</li>\n<li>때문에 프레임워크 제작에 유용하게 사용될 수 있다.</li>\n</ul>","timeToRead":1,"excerpt":"응용프로그램 도메인(App Domain) 닷넷 응용프로그램은 EXE 프로세스로 실행되고 내부의 CLR에 의해 응용프로그램 도메인(App Domain…","frontmatter":{"title":"c# 기본서 - AppDomain과 리플렉션","cover":"","date":"2018-12-03T16:39:00.000Z","categories":["C#"],"tags":["c#","bcl","dll","AppDomain","Reflection"]},"fields":{"slug":"/c-기본서-app-domain과-리플렉션","date":"December 02, 2018"}}},"pageContext":{"slug":"/c-기본서-app-domain과-리플렉션","nexttitle":"c# 기본서 - 데이터베이스","nextslug":"/c-기본서-데이터베이스","prevtitle":"c# 기본서 - c# 2.0, Generic과 syntatic sugar","prevslug":"/c-기본서-c-2-0-generic과-syntatic-sugar"}}}