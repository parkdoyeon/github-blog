{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-c-6-0-간편표기법","result":{"data":{"markdownRemark":{"html":"<h3 id=\"60-주요변화\"><a href=\"#60-%EC%A3%BC%EC%9A%94%EB%B3%80%ED%99%94\" aria-label=\"60 주요변화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.0 주요변화</h3>\n<ul>\n<li>간편 표기법정도의 변화가 있었다.</li>\n<li>때문에 빌드할때는 c# 6.0이 필요하지만 빌드 결과를 실행하기위해선 .NET framework 2.0(c# 2.0)만 있으면 된다.</li>\n</ul>\n<h3 id=\"초기화-구문-추가\"><a href=\"#%EC%B4%88%EA%B8%B0%ED%99%94-%EA%B5%AC%EB%AC%B8-%EC%B6%94%EA%B0%80\" aria-label=\"초기화 구문 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>초기화 구문 추가</h3>\n<ul>\n<li>\n<p>멤버 초기값을 부여하기 위해 생성자를 추가할 필요 없이, 부호입력만으로 초기값 입력을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public string Name { get; set; } = &quot;Jane&quot;;\n//여기서 set;을 없애면 읽기전용으로 만들 수 있다.\n//즉, set;을 없애고 빌드하면 내부적으로 readonly 예약어를 추가한다.</code></pre></div>\n</li>\n</ul>\n<h3 id=\"람다식을-이용한-메서드-속성-정의\"><a href=\"#%EB%9E%8C%EB%8B%A4%EC%8B%9D%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%86%8D%EC%84%B1-%EC%A0%95%EC%9D%98\" aria-label=\"람다식을 이용한 메서드 속성 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>람다식을 이용한 메서드, 속성 정의</h3>\n<ul>\n<li>\n<p>메서드 코드가 한줄이면 람다로 간편하게 정의가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public void PrintIt() =&gt; Console.WriteLine(&quot;프린트&quot;);</code></pre></div>\n</li>\n<li>\n<p>인덱서나 속성 정의도 가능한데, 이 경우 get만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public double x;\npublic double y;\npublic double Angle =&gt; Math.Atan2(y, x);</code></pre></div>\n</li>\n<li>속성과 인덱서 전부 7.0부터 set도 가능하다.</li>\n</ul>\n<h3 id=\"using-static-타입-생략\"><a href=\"#using-static-%ED%83%80%EC%9E%85-%EC%83%9D%EB%9E%B5\" aria-label=\"using static 타입 생략 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>using static 타입 생략</h3>\n<ul>\n<li>상단에 using static 전체 타입을 선언해주면 정적멤버를 타입명 없이 바로 호출할 수 있다.</li>\n<li>\n<p>enum멤버나 const 속성을 갖는 클래스도 마찬가로 적용 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">using static MyDay;\nusing static BitMode;\n\npublic enum MyDay\n{\n    Saturday, Sunday\n}\n\npublic class BitMode\n{\n    public const int ON = 1;\n    public const int OFF = 2;\n}</code></pre></div>\n</li>\n<li>단, c# 3.0에 도입된 확장메서드는 using static 적용을 받지 않는다. 동일 메서드명간의 충돌이 있을 수 있기 때문이다.</li>\n</ul>\n<h3 id=\"null-조건-연산자-\"><a href=\"#null-%EC%A1%B0%EA%B1%B4-%EC%97%B0%EC%82%B0%EC%9E%90-\" aria-label=\"null 조건 연산자  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null 조건 연산자: ?</h3>\n<ul>\n<li>\n<p>참조형 변수의 멤버접근이나 배열 인덱스접근을 할때 null check대신 간편하게 쓸 수 있다. 단독으로 쓸 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">int count = list?.Count ?? 0;\n\n//위 코드는 아래와 동일하다.\nif(list != null) {\n    if(list.Count == null)\n        count = 0;\n    else\n        count = list.Count;\n}</code></pre></div>\n</li>\n<li>하나의 참조변수에 대해 다중으로 사용할 경우 효율성이 떨어지므로 주의해서 쓸 것.</li>\n</ul>\n<h3 id=\"문자열-내에-식expression-포함\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%82%B4%EC%97%90-%EC%8B%9Dexpression-%ED%8F%AC%ED%95%A8\" aria-label=\"문자열 내에 식expression 포함 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 내에 식(expression) 포함</h3>\n<ul>\n<li>string.Format의 활용도때문에 더 간편하고 쉽게 $\"\"표기법이 추가되었다.</li>\n</ul>\n<h3 id=\"nameof-추가\"><a href=\"#nameof-%EC%B6%94%EA%B0%80\" aria-label=\"nameof 추가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nameof 추가</h3>\n<ul>\n<li>사용된 식별자(메서드, 속성 등)의 이름을 그대로 출력할때 사용한다.</li>\n<li>\n<p>단, 식별자의 마지막 이름만 반환되므로 주의.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">string txt = nameof(System.Console);\n//txt == &quot;Console&quot;</code></pre></div>\n</li>\n<li>리플렉션을 통해서도 가능하지만(712p 참조), 리플렉션은 코드 실행되어야 이름이 구해지는 반면 nameof는 컴파일시에 치환되므로 실행시점에는 부하가 없다.</li>\n</ul>\n<h3 id=\"dictionary-타입의-초기화\"><a href=\"#dictionary-%ED%83%80%EC%9E%85%EC%9D%98-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-label=\"dictionary 타입의 초기화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary 타입의 초기화</h3>\n<ul>\n<li>\n<p>Dictionary의 간편한 초기화 방식을 지원한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">//기존에 지원하던 초기화 방식\nvar people = new Dictionary&lt;string, int&gt;\n{\n    { &quot;Anders&quot;, 7 },\n    { &quot;Sam&quot;, 10 },\n    { &quot;Sam&quot;, 7 } //에러발생!\n    //위 방식은 컴파일 후 Add()메서드를 호출하는 코드로 변경되므로 키값 중복 에러가 발생한다.\n}\n\n//반면에 인덱서를 통한 접근방식은\nvar people = new Dictionary&lt;string, int&gt;\n{\n    [&quot;Anders&quot;] = 7,\n    [&quot;Sam&quot;] = 10,\n    [&quot;Sam&quot;] = 7 //기존 키값에 덮어쓰기도 가능하다\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"예외필터\"><a href=\"#%EC%98%88%EC%99%B8%ED%95%84%ED%84%B0\" aria-label=\"예외필터 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예외필터</h3>\n<ul>\n<li>catch 옆에 when 조건식을 통해 해당 조건에 맞는 예외가 발생하면 예외처리기가 선택된다.</li>\n<li>\n<p>특이한 점은 예외 필터 조건식이 실행되는 시점은 예외 핸들러가 실행되는 시점이 아니므로 호출스택(call stack)이 그대로 보존된다.</p>\n<ul>\n<li>조건식에 특정 작업을 수행하고 무조건 false를 리턴하게 하면 예외 처리 구조에 영향을 주지 않고 부가적인 작업을 할 수 있다. (로그 무조건 남기게 하는등)</li>\n<li>exception 전부를 받는 catch 문에 구현하는 수가 있지만, when을 통한 구문은 Intermediate Language수준에서 지원하므로 예외필터의 IL코드로 직접 변경된다는 차이가 있다.</li>\n</ul>\n</li>\n<li>같은 예외를 여러번 호출할수도 있지만 동일한 예외에서 실제로 실행되는것은 한개이다.</li>\n</ul>\n<h3 id=\"trycatch에서-await-사용-가능\"><a href=\"#trycatch%EC%97%90%EC%84%9C-await-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5\" aria-label=\"trycatch에서 await 사용 가능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try/catch에서 await 사용 가능</h3>\n<h3 id=\"pragma의-cs접두사-지원\"><a href=\"#pragma%EC%9D%98-cs%EC%A0%91%EB%91%90%EC%82%AC-%EC%A7%80%EC%9B%90\" aria-label=\"pragma의 cs접두사 지원 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#pragma의 \"CS\"접두사 지원</h3>\n<ul>\n<li>\n<p>특정 경고를 끄려면 기존에는 경고코드의 숫자만 입력해야 했지만 이제는 전체를 사용해도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">//코드 상단부에 선언\n#pragma warning disable CS0168\n#pragma warning disable 0168\n// 둘다 가능</code></pre></div>\n</li>\n</ul>\n<h3 id=\"재정의된-메서드의-선택-정확도-향상\"><a href=\"#%EC%9E%AC%EC%A0%95%EC%9D%98%EB%90%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EC%9D%98-%EC%84%A0%ED%83%9D-%EC%A0%95%ED%99%95%EB%8F%84-%ED%96%A5%EC%83%81\" aria-label=\"재정의된 메서드의 선택 정확도 향상 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재정의된 메서드의 선택 정확도 향상</h3>\n<ul>\n<li>기존에는 nullable 타입을 받는 메서드가 여러 타입으로 오버로드가 됐을때, null을 파라미터로 받는 경우 컴파일 에러가 발생했다.</li>\n<li>그러나 6.0부턴 무조건 int? 인자를 받는 메서드로 실행된다.</li>\n<li>\n<p>null을 리턴하는 Task 메서드를 Task.Run메서드에 넣는 경우도 Run(Func<Task> function)을 선택해서 실행하도록 하게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public static Task Run(Func&lt;Task&gt; function);\npublic static Task Run(Action function);</code></pre></div>\n</li>\n</ul>","timeToRead":4,"excerpt":"6.0 주요변화 간편 표기법정도의 변화가 있었다. 때문에 빌드할때는 c# 6.0이 필요하지만 빌드 결과를 실행하기위해선 .NET framework 2.0(c# 2.…","frontmatter":{"title":"c# 기본서 - c# 6.0: 간편표기법","cover":"","date":"2018-12-07T12:06:00.000Z","categories":["C#"],"tags":["c#","c#6.0","lambda","using","questionmark",null,"dictionary","when","task"]},"fields":{"slug":"/c-기본서-c-6-0-간편표기법","date":"December 06, 2018"}}},"pageContext":{"slug":"/c-기본서-c-6-0-간편표기법","nexttitle":"c# 기본서 - c# 5.0: async, await","nextslug":"/c-기본서-c-5-0-async-await","prevtitle":"c# 기본서 - c# 7.1: Tuple, ValueTuple, async, is","prevslug":"/c-기본서-c-7-1-tuple-value-tuple-async-is"}}}