{"componentChunkName":"component---src-templates-post-js","path":"/tdd-셀레니움과-pytest로-브라우저-테스트-코드-작성하기","result":{"data":{"markdownRemark":{"html":"<h1 id=\"디렉토리-구조\"><a href=\"#%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC-%EA%B5%AC%EC%A1%B0\" aria-label=\"디렉토리 구조 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디렉토리 구조</h1>\n<p>pytest 샘플 프로젝트 구조는 이렇다. allure 라이브러리를 연동해서 부가적으로 allure-results 디렉토리가 생성되어있다. pytest 관련 파일을 설명하면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">D:.\n│  conftest.py <span class=\"token comment\"># 파이테스트에서 공통적으로 사용할 객체들을 구현한 모듈</span>\n│  inspection_test.py <span class=\"token comment\"># 브라우저를 테스트하는 클래스/함수가 구현된 모듈</span>\n│  requirements.txt <span class=\"token comment\"># pip으로 설치된 패키지 리스트</span>\n│\n├─allure-results\n├─bin\n│      chromedriver72.exe\n│      IEDriverServer.exe\n├─venv\n└─__pycache__</code></pre></div>\n<h1 id=\"conftestpy-공통-객체-설정하기\"><a href=\"#conftestpy-%EA%B3%B5%ED%86%B5-%EA%B0%9D%EC%B2%B4-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"conftestpy 공통 객체 설정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>conftest.py: 공통 객체 설정하기</h1>\n<p>pytest는 conftest.py라는 이름을 가진 스크립트에서 터미널 실행시 지정할 옵션값을 설정하거나,\n각 테스트 함수에서 공통으로 사용하는 오브젝트(가령 셀레니움에서 사용할 브라우저 엔진같은)를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n<span class=\"token keyword\">import</span> allure\n\n<span class=\"token comment\"># 터미널 옵션 설정</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">pytest_addoption</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 아래에서 params 값에 세팅해줄 예정이니 패스</span>\n    <span class=\"token comment\"># parser.addoption(\"--driver\", action=\"store\", default=\"chrome\", help=\"Type in browser type\")</span>\n    parser<span class=\"token punctuation\">.</span>addoption<span class=\"token punctuation\">(</span><span class=\"token string\">\"--url\"</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">\"store\"</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">\"http://test.website.co.kr\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># @pytest.fixture 데코레이터를 통해 리스트 형식인 파라미터를 넘기면,</span>\n<span class=\"token comment\"># params값이 루프를 돌면서 인자 순서대로 함수가 여러번 호출된다.</span>\n<span class=\"token decorator annotation punctuation\">@pytest<span class=\"token punctuation\">.</span>fixture</span><span class=\"token punctuation\">(</span>params<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ie\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> scope<span class=\"token operator\">=</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">driver_get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n    \n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>param <span class=\"token operator\">==</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">:</span>\n        web_driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token string\">\"bin/chromedriver72.exe\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>param <span class=\"token operator\">==</span> <span class=\"token string\">\"ie\"</span><span class=\"token punctuation\">:</span>\n        web_driver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Ie<span class=\"token punctuation\">(</span><span class=\"token string\">\"bin/IEDriverServer.exe\"</span><span class=\"token punctuation\">)</span>\n    \n    request<span class=\"token punctuation\">.</span>cls<span class=\"token punctuation\">.</span>driver <span class=\"token operator\">=</span> web_driver\n    <span class=\"token keyword\">yield</span> <span class=\"token comment\"># yield 예약어를 통해 web_driver사용을 일시적으로 브라우저 엔진을 반환한다.</span></code></pre></div>\n<h1 id=\"inspection_testpy-테스트-함수를-만드는-클래스-모듈\"><a href=\"#inspection_testpy-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%AA%A8%EB%93%88\" aria-label=\"inspection_testpy 테스트 함수를 만드는 클래스 모듈 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>inspection_test.py: 테스트 함수를 만드는 클래스 모듈</h1>\n<p>pytest를 실행하면 conftest.py에서 설정을 읽은 후 test가 접두어로 붙은 함수를 차례대로 호출한다.\n이때, 호출 데코레이터에 파라미터를 지정해놓으면, 앞에서 설명한 conftest.py의 fixture 파라미터 처럼 값을 순차적으로 순회하면서 함수를 여러번 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pytest\n<span class=\"token keyword\">import</span> selenium\n<span class=\"token keyword\">import</span> allure\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>ui <span class=\"token keyword\">import</span> WebDriverWait\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>support <span class=\"token keyword\">import</span> expected_conditions <span class=\"token keyword\">as</span> EC\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>by <span class=\"token keyword\">import</span> By\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>common <span class=\"token keyword\">import</span> exceptions <span class=\"token keyword\">as</span> ex\n\n<span class=\"token keyword\">import</span> dao\n\n@pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>usefixtures<span class=\"token punctuation\">(</span><span class=\"token string\">\"driver_get\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInspection</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_targets</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 타겟에 해당하는 튜플값을 반환하는 함수</span>\n        <span class=\"token comment\"># 데코레이터에서 직접 호출해도 된다.</span>\n        <span class=\"token keyword\">return</span> targets\n        \n    @pytest<span class=\"token punctuation\">.</span>mark<span class=\"token punctuation\">.</span>parametrize<span class=\"token punctuation\">(</span><span class=\"token string\">\"url, title\"</span><span class=\"token punctuation\">,</span> get_targets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">test_search_inspection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        wait <span class=\"token operator\">=</span> WebDriverWait<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 해당 ID값을 가진 태그가 화면에 등장하지 않으면 pytest의 결과를 통해 확인할 익셉션을 발생시킨다</span>\n        <span class=\"token keyword\">with</span> pytest<span class=\"token punctuation\">.</span>raises<span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span>TimeoutException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            wait<span class=\"token punctuation\">.</span>until<span class=\"token punctuation\">(</span>EC<span class=\"token punctuation\">.</span>visibility_of_element_located<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>By<span class=\"token punctuation\">.</span>ID<span class=\"token punctuation\">,</span> <span class=\"token string\">\"alertSiteInspection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># allure report에 화면 스크린샷을 남긴다.</span>\n        screenshot <span class=\"token operator\">=</span> <span class=\"token string\">\"data/\"</span><span class=\"token operator\">+</span>title<span class=\"token operator\">+</span><span class=\"token string\">\".png\"</span>\n        self<span class=\"token punctuation\">.</span>driver<span class=\"token punctuation\">.</span>save_screenshot<span class=\"token punctuation\">(</span>screenshot<span class=\"token punctuation\">)</span>\n        allure<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">.</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">(</span>screenshot<span class=\"token punctuation\">,</span> title<span class=\"token operator\">+</span><span class=\"token string\">\".png\"</span><span class=\"token punctuation\">,</span> attachment_type<span class=\"token operator\">=</span>allure<span class=\"token punctuation\">.</span>attachment_type<span class=\"token punctuation\">.</span>PNG<span class=\"token punctuation\">)</span></code></pre></div>","timeToRead":2,"excerpt":"디렉토리 구조 pytest 샘플 프로젝트 구조는 이렇다. allure 라이브러리를 연동해서 부가적으로 allure-results 디렉토리가 생성되어있다. pytest 관련 파일을 설명하면 아래와 같다. conftest.py…","frontmatter":{"title":"TDD - 셀레니움과 pytest로 브라우저 테스트 코드 작성하기","cover":"","date":"2019-05-28T15:55:53.000Z","categories":["Phython"],"tags":["python","selenium","pytest","tdd"]},"fields":{"slug":"/tdd-셀레니움과-pytest로-브라우저-테스트-코드-작성하기","date":"May 27, 2019"}}},"pageContext":{"slug":"/tdd-셀레니움과-pytest로-브라우저-테스트-코드-작성하기","nexttitle":"TDD - Jenkins에 Python 환경세팅하고 테스트 대시보드 Allure Report 연동하기","nextslug":"/tdd-jenkins에-python-환경세팅하고-테스트-대시보드-allure-report-연동하기","prevtitle":"ElastAlert - 유용한 규칙 종류","prevslug":"/elast-alert-유용한-규칙-종류"}}}