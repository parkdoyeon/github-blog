{"componentChunkName":"component---src-templates-post-js","path":"/npm-빌드위한-docker-gitlab-ci-세팅-삽질기","result":{"data":{"markdownRemark":{"html":"<p>vue.js를 프로덕션에 도입하면서 빌드와 배포를 하는 파이프라인 구축이 필요했다. 젠킨스와 깃랩을 함께 사용할수도 있었겠지만, 기존에 설정되어있는 깃랩 CI를 확장해 도커 깃랩 러너를 통해 npm 빌드를 하는 환경구성을 해보기로 했다.</p>\n<h1 id=\"how-to\"><a href=\"#how-to\" aria-label=\"how to permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How To</h1>\n<p>gitlab runner docker로 설치하고, 설정파일 생성하기</p>\n<blockquote>\n<p>참고 - <a href=\"https://docs.gitlab.com/runner/install/\">깃랩 러너 설치 가이드</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">docker pull gitlab/gitlab-runner\ndocker run --rm \\\n-v /gitlab-runner/config:/etc/gitlab-runner/config \\\n-it gitlab/gitlab-runner register</code></pre></div>\n<p>register 과정에서 깃랩 프로젝트 내에서 생성된 gitlab runner token값과 코디네이션 url을(ex. <a href=\"https://gilab.mycompany.com/ci\">https://gilab.mycompany.com/ci</a>) 넣어줘야한다. 그러면 볼륨 매핑한 config 디렉토리에 <code class=\"language-text\">config.toml</code>파일이 생성된다.</p>\n<p>설정이 완료되고 러너가 돌아가면 깃랩 페이지에서 내가 생성한 러너가 확인 된다. 이 자체로 러너를 돌리기엔 부족할 확률이 높다. 아래와 같이 상황에 맞춰 내가 원하는 설정을 추가적으로 넣어줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">concurrent = 1\ncheck_interval = 0\nlisten_address = &quot;0.0.0.0:443&quot;\n\n[session_server]\n  listen_address = &quot;0.0.0.0:5092&quot;\n  session_timeout = 1800\n\n[[runners]]\n  name = &quot;gitlab runner linux&quot;\n  url = &quot;https://gitlab.mycompany.com/ci&quot;\n  token = &quot;***************&quot;\n  executor = &quot;docker&quot;\n  [runners.custom_build_dir]\n  [runners.docker]\n    tls_verify = false\n    pull_policy = &quot;if-not-present&quot;\n    privileged = true\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    environment = [ &quot;DOCKER_DRIVER=overlay2&quot; ]\n    cache_dir = &quot;/data/volume/gitlab-runner/cache&quot;\n    volumes = [&quot;/var/run/docker.sock:/var/run/docker.sock&quot;, &quot;/data/volume/gitlab-runner/builds:/builds&quot;]\n    shm_size = 0\n  [runners.cache]\n    [runners.cache.s3]\n    [runners.cache.gcs]</code></pre></div>\n<h1 id=\"trouble-shooting\"><a href=\"#trouble-shooting\" aria-label=\"trouble shooting permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Trouble Shooting</h1>\n<p>하지만 이 설정파일을 만들기까지 매우 많은 삽질이 있었다.</p>\n<h4 id=\"도커-통신이-정상적으로-안되는-경우\"><a href=\"#%EB%8F%84%EC%BB%A4-%ED%86%B5%EC%8B%A0%EC%9D%B4-%EC%A0%95%EC%83%81%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%95%88%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"도커 통신이 정상적으로 안되는 경우 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도커 통신이 정상적으로 안되는 경우</h4>\n<p> 나는 docker로 깃랩러너를 돌린 다음에 깃랩 러너 컨테이너와 같은 층위에 다른 도커 이미지(node나 python 이미지와 같은)를 사용해서 빌드를 하고싶었다. 이 때 이미지를 불러와야하는데 계속 볼륨으로 바인딩한 도커 서비스간에 통신이 안돼서 build failure가 발생했다.</p>\n<blockquote>\n<p>빌드 로그</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Skipping Git submodules setup\n$ docker info\nClient:\nDebug Mode: <span class=\"token boolean\">false</span>\nServer:\nerrors pretty printing info\nERROR: error during connect: Get http://docker:2375/v1.40/info: dial tcp: lookup docker on <span class=\"token number\">10.101</span>.200.3:53: server misbehaving\nERROR: Job failed: <span class=\"token builtin class-name\">exit</span> code <span class=\"token number\">1</span></code></pre></div>\n<p>혹시 볼륨 바인딩에 문제가 있는건 아닐까? 싶어서 찾아봤더니 깃랩 러너가 돌아가고있는 드라이버를 따로 표기를 해줘야한다는 글이 있어서, 환경변수로 overlay2를 넣어줬더니 정상빌드 됐다. 여기서 볼륨설정을 모든 컨테이너에 적용하고싶다면 위와같이 runner.docker에 환경변수로 넣어주면된다. 프로젝트별로 바인딩 하고싶다면 variable값으로 <code class=\"language-text\">.gitlab-ci</code> 파일에 설정해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">variables:\n    DOCKER_DRIVER: overlay2</code></pre></div>\n<h4 id=\"npm-프록시-세팅하기\"><a href=\"#npm-%ED%94%84%EB%A1%9D%EC%8B%9C-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\" aria-label=\"npm 프록시 세팅하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>npm 프록시 세팅하기</h4>\n<p>폐쇄된 네트워크이기 때문에 npm 패키지를 설치할때 proxy설정을 해줘야했다. 처음에 도커 이미지에 프록시 세팅을 하려했다. 러너를 통해 생성되는 도커이미지에 프록시를 세팅하려면 아래와 같이 <code class=\"language-text\">.gitlab-ci.yml</code>파일을 수정하면 된다.</p>\n<blockquote>\n<p>참고 <a href=\"https://docs.docker.com/network/proxy/\">도커 프록시 설정</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#.gitlab-ci.yml</span>\n<span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">13</span>\n\n<span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">HTTPS_PROXY</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://registry.mycompany.com/repository/npm-group/\"</span>\n    <span class=\"token key atrule\">HTTP_PROXY</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://registry.mycompany.com/repository/npm-group\"</span></code></pre></div>\n<p>하지만 이렇게 하면 gitlab 코드를 받아올때도 프록시 설정이 적용되어 문제가 된다. no proxy옵션을 지정해주면 되지만, 앞으로 빌드하면서 어떤 url을 호출할지 알 수 없기 때문에 npm만 지정된 프록시로 우회하도록 설정하는게 깔끔하다. npm 자체적인 설정을 통해 가능하므로, ci 파일에 npm 프록시를 설정하는 스크립트를 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm config set registry http<span class=\"token punctuation\">:</span>//packages.webzen.com/repository/npm<span class=\"token punctuation\">-</span>group/</code></pre></div>\n<p>사실 이 부분도 삽질을 조금 했다. npm config에 https_proxy라는 값을 세팅해줄 수 있는데, 여기에 세팅되는 프록시 주소는 registry 프록시가 아니라 패키지가 다운로드하는 url들의 프록시를 의미한다. <a href=\"https://docs.npmjs.com/misc/config\">공식문서</a>에 나와있는 설명은 이렇다.</p>\n<blockquote>\n<p>https-proxy§\nDefault: null\nType: url\nA proxy to use for outgoing https requests. If the HTTPS<em>PROXY or https</em>proxy or HTTP<em>PROXY or http</em>proxy environment variables are set, proxy settings will be honored by the underlying request library.</p>\n</blockquote>\n<p>완성된 .gitlab-ci.yml파일은 이렇다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span><span class=\"token number\">13</span>\n\n<span class=\"token key atrule\">variables</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CHROMEDRIVER_FILEPATH</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"/builds/chromedriver/chromedriver_linux64.zip\"</span>\n\n<span class=\"token key atrule\">before_script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm config set registry http<span class=\"token punctuation\">:</span>//registry.mycompany.com/repository/npm<span class=\"token punctuation\">-</span>group/\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> build\n\n<span class=\"token key atrule\">test_build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n    <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> echo \"build vue js\"\n        <span class=\"token punctuation\">-</span> cd $CI_PROJECT_DIR/vue/somepage\n        <span class=\"token punctuation\">-</span> npm i\n        <span class=\"token punctuation\">-</span> npm run build\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> test\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> linux<span class=\"token punctuation\">-</span>runner\n    <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> vue<span class=\"token punctuation\">-</span>branch</code></pre></div>\n<blockquote>\n<p>공식문서/참고자료\n<a href=\"https://docs.gitlab.com/runner/executors/docker.html\">도커 executor 가이드</a>\n<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_images.html\">도커 이미지와 함께 빌드하기</a>\n<a href=\"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html\">도커 빌드하기</a>\n<a href=\"https://docs.gitlab.com/runner/configuration/proxy.html\">깃랩 러너 프록시 가이드</a>\n<a href=\"https://gitlab.com/gitlab-org/gitlab-ci-runner/issues/10\">coordinator url이란?</a>\n<a href=\"https://gitlab.com/johandurancerdas/gitlab-cicd-tutorial\">참고 프로젝트</a>\n<a href=\"https://www.youtube.com/watch?v=8h6IK9VkCQQ\">참고 강의</a></p>\n</blockquote>","timeToRead":4,"excerpt":"vue.js를 프로덕션에 도입하면서 빌드와 배포를 하는 파이프라인 구축이 필요했다. 젠킨스와 깃랩을 함께 사용할수도 있었겠지만, 기존에 설정되어있는 깃랩 CI를 확장해 도커 깃랩 러너를 통해 npm 빌드를 하는 환경구성을 해보기로 했다. How To…","frontmatter":{"title":"npm 빌드위한 docker gitlab CI 세팅 삽질기","cover":"","date":"2019-10-28T15:13:20.000Z","categories":["JavaScript"],"tags":["javascript","node","npm","docker","gitlab","ci","container"]},"fields":{"slug":"/npm-빌드위한-docker-gitlab-ci-세팅-삽질기","date":"October 27, 2019"}}},"pageContext":{"slug":"/npm-빌드위한-docker-gitlab-ci-세팅-삽질기","nexttitle":"window에서 python 버전 구분해서 실행하기","nextslug":"/window에서-python-버전-구분해서-실행하기","prevtitle":"리눅스 계정잠금 해제","prevslug":"/리눅스-계정잠금-해제"}}}