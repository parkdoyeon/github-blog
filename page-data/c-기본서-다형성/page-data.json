{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-다형성","result":{"data":{"markdownRemark":{"html":"<h3 id=\"중첩클래스\"><a href=\"#%EC%A4%91%EC%B2%A9%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"중첩클래스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중첩클래스</h3>\n<ul>\n<li>멤버와 같이 취급되므로 접근제한자 생략되면 private가 된다</li>\n<li>cf. 클래스는 원래 접근제한자 없으면 internal</li>\n</ul>\n<h3 id=\"virtual과-override\"><a href=\"#virtual%EA%B3%BC-override\" aria-label=\"virtual과 override permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>virtual과 override</h3>\n<ul>\n<li>virtual하게 먼저 구현해놓고, 해당 클래스 상속받은 클래스를 변경하고싶으면 override 예약으로 구현한다 (추상과 달리 필수가 아님)</li>\n<li>상속받은 클래스가 똑같은 이름의 아예 다른 함수를 구현하고싶으면 new 예약어를 넣으면 된다.</li>\n</ul>\n<h3 id=\"추상클래스\"><a href=\"#%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"추상클래스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추상클래스</h3>\n<ul>\n<li>구현해야하니까 private안됨</li>\n<li>new로 인스턴스화 할 수 없다. 구현도 안한걸 어떻게...?</li>\n<li>상속받으면 반드시 완성되어야한다</li>\n<li>전부 껍데기만있는 인터페이스와 달리 내부에 일반 메서드도 정의 가능하다. 단 추상메서드(가상메서드)는 안됨.</li>\n</ul>\n<h3 id=\"delegate\"><a href=\"#delegate\" aria-label=\"delegate permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delegate</h3>\n<ul>\n<li>델리게이트는 메서드를 인자로 받는 '타입'이다</li>\n<li>\n<p>즉 아래와같이 기본 형태에서 식별자의 이름을 바꾸고 예약어를 추가한 상태이다</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">int clean (object arg); //반환값 식별자 인자\ndelegate int FuncDelegate(object arg); // 예약어 반환값 식별자 인자</code></pre></div>\n</li>\n</ul>\n<p>//어떤 클래스의 함수 Clean을 delegate로 사용하면 다음과 같다.\nFuncDelegate cleanFunc = new FuncDelegate(클래스인스턴스.Clean);\n//위와 완벽하게 동일한 역할을 하는 구문\nFuncDelegate otherCleanFunc = 클래스인스턴스.Clean</p>\n<p>//위 구문을 main함수에서 실행시키면\ncleanFunc(arg)\notherCleanFunc(arg)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 메서드를 인자로 받는 콜백메서드도 델리게이트 사용의 한 방법으로 이해할 수 있다\n\n\n### Interface \n- 기본적으로 계약이다. 해당 인터페이스를 상속할 경우 인터페이스 내의 메서드를 재정의할것이라는 약속. 이것도 반드시 완성해야함.\n- 하지만 메서드의 묶음 개념으로, 프로퍼티도 포함할 수 있다. 그리고 추상과 달리 한 클래스가 여러개의 인터페이스를 다중상속할 수 있다.\n- is 연산자를 통해 상속 여부(인터페이스를 사용했을 경우에는 계약이행여부)를 확인할 수 있다.</code></pre></div>","timeToRead":1,"excerpt":"중첩클래스 멤버와 같이 취급되므로 접근제한자 생략되면 private가 된다 cf. 클래스는 원래 접근제한자 없으면 internal virtual과 override virtual…","frontmatter":{"title":"c# 기본서 - 다형성","cover":"","date":"2018-10-15T21:10:00.000Z","categories":["C#"],"tags":["c#","객체지향","기본","delegate","class","interface"]},"fields":{"slug":"/c-기본서-다형성","date":"October 14, 2018"}}},"pageContext":{"slug":"/c-기본서-다형성","nexttitle":"c# 기본서 - 객체지향","nextslug":"/c-기본서-객체지향","prevtitle":"c# 기본서 - 구조체, 예약어, Enum","prevslug":"/c-기본서-구조체-예약어-enum"}}}