{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-멤버별-유형확장","result":{"data":{"markdownRemark":{"html":"<h3 id=\"readonly-const\"><a href=\"#readonly-const\" aria-label=\"readonly const permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>readonly, const</h3>\n<ul>\n<li>둘다 객체의 내부값 변경불가</li>\n<li>그러나 const는 byte, int, string 등 기본 자료형에 한해서 적용가능</li>\n<li>const는 선언과 함께 값이 대입되어야함. 즉, 생성자에서 접근할 수 없다.</li>\n<li>const는 컴파일시에 소스코드에 값이 직접 치환됨</li>\n</ul>\n<h3 id=\"event\"><a href=\"#event\" aria-label=\"event permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>event</h3>\n<ul>\n<li>델리게이트 예약어로, 첫번째로 이벤트를 발생시킨 인자를, 두번째 인자로 해당 이벤트에대한 값을 제공받는다.</li>\n<li>\n<p>델리게이트 만으로도 구현이 가능하지만, 이벤트 예약어로 구현하면 콜백함수를 구독/해지할 수 있도록 함수를 담아두는 클래스선언을 하지 않아도 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">class SomeClass\n{\npublic event EventHandler CallbackGroup\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"클래스를-배열처럼-사용하게-하는-indexer\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EB%B0%B0%EC%97%B4%EC%B2%98%EB%9F%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B2%8C-%ED%95%98%EB%8A%94-indexer\" aria-label=\"클래스를 배열처럼 사용하게 하는 indexer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스를 배열처럼 사용하게 하는 Indexer</h3>\n<ul>\n<li>\n<p>프로퍼티를 활용해서 클래스에 배열처럼 접근하도록 돕는 기능</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">class SomeClass\n{\npublic int this[indexer]\n{\n    public get\n    {\n        if(indexer == &quot;냐옹&quot;)\n            return &quot;고양이&quot;;\n        else\n            return &quot;강아지&quot;;\n    }\n    public set;\n    {\n        this[indexer] = value;\n    }\n}\npublic event EventHandler CallbackGroup\n}</code></pre></div>\n</li>\n</ul>","timeToRead":1,"excerpt":"readonly, const 둘다 객체의 내부값 변경불가 그러나 const는 byte, int, string 등 기본 자료형에 한해서 적용가능 const는 선언과 함께 값이 대입되어야함. 즉, 생성자에서 접근할 수 없다. const…","frontmatter":{"title":"c# 기본서 - 멤버별 유형확장","cover":"","date":"2018-10-25T22:10:00.000Z","categories":["C#"],"tags":["c#","객체지향","readonly","const","event","indexer"]},"fields":{"slug":"/c-기본서-멤버별-유형확장","date":"October 24, 2018"}}},"pageContext":{"slug":"/c-기본서-멤버별-유형확장","nexttitle":"c# 기본서 - 구조체, 예약어, Enum","nextslug":"/c-기본서-구조체-예약어-enum","prevtitle":"Logstash - 파이프라인 만들기","prevslug":"/logstash-파이프라인-만들기"}}}