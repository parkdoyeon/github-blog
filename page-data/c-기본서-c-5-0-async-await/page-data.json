{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-c-5-0-async-await","result":{"data":{"markdownRemark":{"html":"<h3 id=\"호출자-정보\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%9E%90-%EC%A0%95%EB%B3%B4\" aria-label=\"호출자 정보 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호출자 정보</h3>\n<ul>\n<li>c/c++에서 갖고오는 <code class=\"language-text\">__LINE__</code>, <code class=\"language-text\">__FILE__</code>와 같은 매크로 상수를 불러올 수 있게됐다.</li>\n<li>\n<p>c#에서는 함수 파라미터에 attribute 형식으로 입력하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">static void LogMessage([CallerMemberName] string memberName = &quot;&quot;, [CallerFilePath] string filePath = &quot;&quot;, [CallerLineNumber] int lineNumber = 0)\n{\n    //코드\n}</code></pre></div>\n<table>\n<thead>\n<tr>\n<th>특성</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CallerMemberName</td>\n<td>호출자 정보가 명시된 메서드를 호출한 측의 메서드 이름</td>\n</tr>\n<tr>\n<td>CallerFilePath</td>\n<td>호출자 정보가 명시된 메서드를 호출한 측의 소스파일 경로</td>\n</tr>\n<tr>\n<td>CallerLineNumber</td>\n<td>호출자 정보가 명시된 메서드를 호출한 측의 소스코드 라인 번호</td>\n</tr>\n<tr>\n<td>where T: struct</td>\n<td>값 형식만</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3 id=\"async-await\"><a href=\"#async-await\" aria-label=\"async await permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async, await</h3>\n<ul>\n<li>비동기 호출을 동기호출처럼 사용할 수 있는 예약어</li>\n<li>FileRead()같은 함수는 비동기 함수가 별개로 있지만, 비동기로 호출할경우 콜백 함수를 쓰는등 복잡해지는 문제가 있었다.</li>\n<li>사용 방법은 함수 앞에 await를 붙이고, 그 아래에 있는 코드를 콜백함수처럼 동기적으로 작성하면 된다.</li>\n<li>\n<p>async는 await이라는 단어를 예약어로 인식하게 하도록 메소드 앞에 붙이는 예약어이다.</p>\n<ul>\n<li>하위호환을 위해 추가된 개념이다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"비동기-반환-타입-task-tasktresult\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%B0%98%ED%99%98-%ED%83%80%EC%9E%85-task-tasktresult\" aria-label=\"비동기 반환 타입 task tasktresult permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 반환 타입: Task, Task<TResult></h3>\n<ul>\n<li>\n<p>비동기 메서드는 반환값이 있는 경우 Task<TResult>, 없는경우 Task 반환한다.</p>\n<ul>\n<li>await예약어를 사용하지 않고 async 예약어를 사용할 경우 void 리턴도 가능한데, 이때 예외가 발생하면 처리되지 않은 채로 프로세스가 비정상적으로 종료되므로 권장되지 않는다.</li>\n<li>\n<p>그럼에도 불구하고 async void가 있는 경우는 EventHandler 타입때문이다. 아래를 제시한 타입외에는 사용하지 말자.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">public delegate void EventHandler(object sender, EventArgs e);</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>Task만 ThreadPool.QueueUserWorkItem대용으로 사용할수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">//동일한 코드이다\nThreadPool.QueueWorkItem(\n    (obj) =&gt;\n    {\n        //코드\n    }\n, null)\n\nTask task1 = new Task(\n    () =&gt;\n    {\n        //코드\n    }\n, null)\n\nTask task2 = new Task(\n    () =&gt;\n    {\n        //코드\n    }\n, null)\n\ntask1.Start();\ntask1.Wait();\n//차이점이라면 Task가 좀 더 세밀하게 제어할 수 있다. ThreadPool은 EventWaitHandle 타입을 통해 제어해야하는데, Wait();호출을 통해 작업완료까지 스레드 대기를 할 수있다.\n\n//Task.WaitAll(task1, task2)\n//두개의 스레드를 동시에 실행하고 대기할 수 있다.\n\n//await Task.WaitAll(task1, task2)\n//두개의 스레드를 동시에 실행하고 대기하지 않고 다음작업을 진행한다.</code></pre></div>\n</li>\n<li>Task.Factory.StartNew(Action<T> func)이라는 정적 속성을 통해 Start()호출 없이 바로 시작할수도 있다.</li>\n<li>\n<p>Task<TResult>를 사용해 반환값을 처리할수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">Task&lt;int&gt; task1 = new Task&lt;int&gt;(\n    () =&gt;\n    {\n        Random rand = new Random((int))\n    }\n, null)\ntask1.Start();\ntask1.Wait();\nConsole.WriteLine(task1.Result);</code></pre></div>\n</li>\n<li>\n<p>비동기를 지원하지 않는 동기메서드를 비동기메서드처럼 구현할수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">static Task&lt;string&gt; ReadAllTextAsync(string filePath)\n{\n    return TaskFactory.StartNew(() =&gt; \n    {\n        File.ReadAllText(filePath);\n    })\n}\nprivate static async Task AwaitFileRead(string filePath)\n{\n    string fileText = await ReadAllTextAsync(filePath);\n    // Task 반환타입을 갖지만 Async예약어가 있으므로 return 문이 필요없다.\n}</code></pre></div>\n</li>\n</ul>","timeToRead":2,"excerpt":"호출자 정보 c/c++에서 갖고오는 , 와 같은 매크로 상수를 불러올 수 있게됐다. c#에서는 함수 파라미터에 attribute 형식으로 입력하면 된다. 특성 설명 CallerMemberName…","frontmatter":{"title":"c# 기본서 - c# 5.0: async, await","cover":"","date":"2018-12-07T12:06:00.000Z","categories":["C#"],"tags":["c#","c#5.0","async","await","Task","Task<TResult>","호출자정보"]},"fields":{"slug":"/c-기본서-c-5-0-async-await","date":"December 06, 2018"}}},"pageContext":{"slug":"/c-기본서-c-5-0-async-await","nexttitle":"c# 기본서 - c# 6.0: 간편표기법","nextslug":"/c-기본서-c-6-0-간편표기법","prevtitle":"c# 기본서 - c# 7.1: Tuple, ValueTuple, async, is","prevslug":"/c-기본서-c-7-1-tuple-value-tuple-async-is"}}}