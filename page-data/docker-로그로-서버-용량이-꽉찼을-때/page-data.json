{"componentChunkName":"component---src-templates-post-js","path":"/docker-로그로-서버-용량이-꽉찼을-때","result":{"data":{"markdownRemark":{"html":"<h1 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h1>\n<p>평소와 같이 logstash에 파이프라인을 추가하려고 서버에 들어갔다가,\n자동완성을 하려고 배시에 tab키를 눌렀더니 다음과 같은 텍스트가 출력됐다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> p-bash: cannot create temp <span class=\"token function\">file</span> <span class=\"token keyword\">for</span> here-document: No space left on device</code></pre></div>\n<p>남은 용량이 얼마나 있는지 확인하려고 <code class=\"language-text\">du</code>명령어를 쳤다. 보아하니 도커 디스크로 마운트된 디렉토리에 문제가 있는 것 같았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">df</span> -h\nFilesystem                              Size  Used Avail Use% Mounted on\nudev                                    <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G   <span class=\"token number\">0</span>% /dev\ntmpfs                                   798M   79M  720M  <span class=\"token number\">10</span>% /run\n/dev/mapper/<span class=\"token punctuation\">[</span>HOST이름<span class=\"token punctuation\">]</span>--vg-root   90G  <span class=\"token number\">4</span>.3G   82G   <span class=\"token number\">6</span>% /\ntmpfs                                   <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G   <span class=\"token number\">0</span>% /dev/shm\ntmpfs                                   <span class=\"token number\">5</span>.0M     <span class=\"token number\">0</span>  <span class=\"token number\">5</span>.0M   <span class=\"token number\">0</span>% /run/lock\ntmpfs                                   <span class=\"token number\">3</span>.9G     <span class=\"token number\">0</span>  <span class=\"token number\">3</span>.9G   <span class=\"token number\">0</span>% /sys/fs/cgroup\n/dev/sda1                               472M  153M  295M  <span class=\"token number\">35</span>% /boot\ntmpfs                                   798M     <span class=\"token number\">0</span>  798M   <span class=\"token number\">0</span>% /run/user/1003\noverlay                                  90G   90G     <span class=\"token number\">0</span> <span class=\"token number\">100</span>% /var/lib/docker/overlay2/a5d0d5380f3e692bccb926c9fbf1c07ba6abc73db094b0e526d71aa19fd51537/merged\nshm                                      64M     <span class=\"token number\">0</span>   64M   <span class=\"token number\">0</span>% /var/lib/docker/containers/ef5745582de101dddc056068c78e024388169af634315348427a80d59148a324/mounts/shm</code></pre></div>\n<h1 id=\"원인\"><a href=\"#%EC%9B%90%EC%9D%B8\" aria-label=\"원인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인</h1>\n<p>도커의 컨테이너들로부터 출력되는 모든 로그들은 다 json파일로 파일시스템에 남는다.\n즉, <code class=\"language-text\">/var/lib/docker/containers/*/*.log</code>와 같은 경로에 컨테이너의 ID로 된 디렉토리에 개별로 저장된다.\n이 파일들은 관리가 되지 않으면 서서히 디스크 용량을 차지해서 disk full현상을 일으킬 수 있다.</p>\n<p>나의 경우, logstash의 모든 파서들이 파싱된 로그를 stdout으로 출력하다보니 며칠만에 약 90G가 넘는 로그파일때문에 3-4일만에 서버 디스크가 꽉 찼었다.\n(F.Y.I. 도커로 인한 disk full이 logstash를 운영하는데 별다른 영향을 주진 않았다.)</p>\n<h1 id=\"해결\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h1>\n<p>해결방법은 log파일 관리를 자동화 하면 되는데,</p>\n<ol>\n<li>크론으로 json파일을 삭제할수도 있고</li>\n<li>logrotate를 설치해서 실행시킬수도 있다. </li>\n<li>하지만 나는 폐쇄된 네트워크에서 서버세팅을 해야하기때문에, <a href=\"https://docs.docker.com/config/containers/logging/configure/\">도커에 내장된 로그 설정</a>을 통해 로그 관리 세팅을 했다.</li>\n</ol>\n<h1 id=\"방법\"><a href=\"#%EB%B0%A9%EB%B2%95\" aria-label=\"방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>방법</h1>\n<p>참고로, 내가 채택한 3번 방법은 도커서비스와 컨테이너를 내렸다가 새로 생성해줘야 적용이 되는 번거로움이 있다.</p>\n<ol>\n<li>\n<p>아래 경로로 다음과 같은 내용의 설정파일을 하나 만든다. 있으면 수정하고, 없으면 새로 만들어주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> /etc/docker/daemon.json\n<span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"log-driver\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"json-file\"</span>,\n<span class=\"token string\">\"log-opts\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"max-size\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"100m\"</span>,    \n    <span class=\"token string\">\"max-file\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"3\"</span>    \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n</li>\n<li>\n<p>도커 서비스를 재시작한다 (나는 스페이스 4개로 indentation을 구분했고, 이때 쉼표를 더 입력하거나 하면 시스템이 시작하지 않으므로 주의해야한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ systemctl restart docker</code></pre></div>\n</li>\n<li>컨테이너를 다시 생성한다</li>\n</ol>\n<p>설정이 적용된 컨테이너의 <code class=\"language-text\">/var/lib/docker/containers/*</code> 디렉토리 모습이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span>\n9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log    checkpoints      <span class=\"token function\">hostname</span>  resolv.conf\n9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log.1  config.v2.json   hosts     resolv.conf.hash\n9967b82d7c4059e1fb96ef9f20dc8c8738bf58e6e7418c680ac81019e5c964ec-json.log.2  hostconfig.json  mounts</code></pre></div>","timeToRead":3,"excerpt":"문제 평소와 같이 logstash에 파이프라인을 추가하려고 서버에 들어갔다가,\n자동완성을 하려고 배시에 tab…","frontmatter":{"title":"Docker 로그로 서버 용량이 꽉찼을 때","cover":"","date":"2019-06-18T15:57:18.000Z","categories":["Dev-Env"],"tags":["docker","log","logrotate","container"]},"fields":{"slug":"/docker-로그로-서버-용량이-꽉찼을-때","date":"June 17, 2019"}}},"pageContext":{"slug":"/docker-로그로-서버-용량이-꽉찼을-때","nexttitle":"ElasticSearch - unassigned shard 문제 해결 (2) 노드간 버전문제","nextslug":"/elastic-search-unassigned-shard-문제-해결-2-노드간-버전문제","prevtitle":"ElasticSearch - unassigned shard 문제 해결 (3) replica 숫자가 부적절할때","prevslug":"/elastic-search-unassigned-shard-문제-해결-3-replica-숫자가-부적절할때"}}}