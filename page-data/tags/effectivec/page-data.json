{"componentChunkName":"component---src-templates-tag-js","path":"/tags/effectivec/","result":{"data":{"allMarkdownRemark":{"totalCount":4,"edges":[{"node":{"fields":{"slug":"/effective-c-4-linq-활용","date":"January 23, 2019"},"excerpt":"…","timeToRead":3,"frontmatter":{"title":"effective c# - 4. LINQ 활용","tags":["effectivec#","c#","linq","enumerator","yield"],"cover":"","date":"2019-01-24T15:05:00.000Z","categories":["C#"]}}},{"node":{"fields":{"slug":"/effective-c-3-제네릭-활용","date":"January 02, 2019"},"excerpt":"반드시 필요한 제약조건만 설정하라 제너릭 타입을 활용할때 타입 조건을 넣고싶다면 제약조건 예약어 where를 사용하는 것이 좋다 그러나 기본값을 할당하는데 있어서 default()와 new()는 분명한 차이가 있으므로, 제약조건에 new…","timeToRead":7,"frontmatter":{"title":"effective c# - 3. 제네릭 활용","tags":["effectivec#","c#"],"cover":"","date":"2019-01-03T12:19:00.000Z","categories":["C#"]}}},{"node":{"fields":{"slug":"/effective-c-1-언어요소","date":"December 17, 2018"},"excerpt":"지역변수를 선언할때는 var를 사용하는 것이 낫다 c#은 익명함수를 지원하면서 타입을 암시적으로 선언하는 방법을 제공한다. 정확한 타입을 알지 못하는 상태에서 명시적으로 선언할경우 득보다 실이 많다 예1 잘못된 형변환: IEnumerable…","timeToRead":4,"frontmatter":{"title":"effective c# - 1. 언어요소","tags":["effectivec#","c#","is","as","delegate","var"],"cover":"","date":"2018-12-18T16:41:00.000Z","categories":["C#"]}}},{"node":{"fields":{"slug":"/effective-c-2-리소스-관리","date":"December 17, 2018"},"excerpt":".NET 리소스 관리의 이해 finalizer/IDisposable 닷넷은 가비지 수집기가 있기 때문에 개발자가 메모리 해제/누수와 같은 문제를 직접적으로 처리할 필요가 없다. 그러나 비관리 리소스의 경우 관리가 필요하며, 이를 위해 finalizer…","timeToRead":4,"frontmatter":{"title":"effective c# - 2. 리소스 관리","tags":["effectivec#","c#","finalizer","IDisposable","virtual","constructor"],"cover":"","date":"2018-12-18T16:41:00.000Z","categories":["C#"]}}}]}},"pageContext":{"tag":"effectivec#"}}}