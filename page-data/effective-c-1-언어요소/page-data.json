{"componentChunkName":"component---src-templates-post-js","path":"/effective-c-1-언어요소","result":{"data":{"markdownRemark":{"html":"<h3 id=\"지역변수를-선언할때는-var를-사용하는-것이-낫다\"><a href=\"#%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%84%A0%EC%96%B8%ED%95%A0%EB%95%8C%EB%8A%94-var%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EB%82%AB%EB%8B%A4\" aria-label=\"지역변수를 선언할때는 var를 사용하는 것이 낫다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역변수를 선언할때는 var를 사용하는 것이 낫다</h3>\n<ol>\n<li>c#은 익명함수를 지원하면서 타입을 암시적으로 선언하는 방법을 제공한다.</li>\n<li>\n<p>정확한 타입을 알지 못하는 상태에서 명시적으로 선언할경우 득보다 실이 많다</p>\n<ul>\n<li>\n<p>예1 잘못된 형변환: IEnumerable<T>를 상속받는 IQueryable<T>을 IEnumerable 타입으로 선언하는 경우</p>\n<ul>\n<li>IQueryable<T> 타입은 원격 데이터를 참조할 경우, 여러단계에서 수행되는 LINQ 쿼리식을 SQL쿼리로 합한 후 그 값을 순회하는 시점까지 SQL쿼리 수행을 연기한다. (=네트워크 트래픽을 적게 씀)</li>\n<li>반면 IEnumerable<T>는 단계별로 모두 원격에 SQL쿼리를 전달하고 로컬에 반환한다.</li>\n</ul>\n</li>\n<li>예2 숫자 형변환: 특정 숫자값을 반환하는 메서드를 var 변수를 통해 통해 호출해오면 예상치 못한 결과에 대한 디버깅이 어려울 수 있다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"const보다-readonly\"><a href=\"#const%EB%B3%B4%EB%8B%A4-readonly\" aria-label=\"const보다 readonly permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const보다 readonly</h3>\n<ul>\n<li>\n<p>const는 값이 컴파일시에 평가되는 컴파일 상수, readonly는 값이 런타임에 평가되는 런타임 상수다.</p>\n<ul>\n<li>const는 성능이 약간 더 낫지만 유연성이 떨어져 사용이 제한적이다</li>\n<li>const/readonly 값을 참조하는 코드를 작성할경우 const는 직접 값을 대입하지만 readonly 는 참조코드를 넣는다.</li>\n<li>const와 readonly가 있는 클래스의 값을 바꾼 dll로 교체하면 const는 호출값이 바뀌지 않지만 readonly는 값이 바뀐다. 즉 const는 전체를 빌드해야한다!</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"캐스트보다는-is-as가-좋다\"><a href=\"#%EC%BA%90%EC%8A%A4%ED%8A%B8%EB%B3%B4%EB%8B%A4%EB%8A%94-is-as%EA%B0%80-%EC%A2%8B%EB%8B%A4\" aria-label=\"캐스트보다는 is as가 좋다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐스트보다는 is, as가 좋다</h3>\n<ul>\n<li>캐스트 연산의 경우 형변환 실패시 <code class=\"language-text\">InvalidCastException</code>이 발생한다. 따라서 안전한 캐스팅을 위해서는 실패시 null 리턴을 반환하는 is/as를 적극 활용하는 것이 좋다.</li>\n<li>\n<p>foreach구문에서는 참조형식과 값형식 모두 형변환이 가능해야해서 캐스팅 형변환이 일어나기때문에 캐스팅 익셉션이 발생할 수 있다.</p>\n<ul>\n<li>\n<p>다만 컴파일 단계에서 IEnumerator.Current로 변환가능한지(System.Object), 또 다시 for문 앞에 루프변수로 변환가능한지만 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">//foreach 구문</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UseCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable</span> theCollection<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyType</span> t <span class=\"token keyword\">in</span> theCollection<span class=\"token punctuation\">)</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">DoStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//실제 foreach가 동작하는 구문</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">UseCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable</span> theCollection<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IEnumerator</span> it <span class=\"token operator\">=</span> theCollection<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">MoveNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MyType</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>MyType<span class=\"token punctuation\">)</span>it<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span>\n        t<span class=\"token punctuation\">.</span><span class=\"token function\">DoStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>시퀀스 요소를 특정한 타입으로 형변환해주는 IEnumerator.Cast<T>()함수가 있는데, 이 또한 변환 타입에 제약이 발생하므로 캐스팅 연산을 수행한다. 다만, 제너릭타입 컬렉션에 대해서는 호출이 불가능하다.</li>\n</ul>\n<h3 id=\"델리게이트를-이용하여-콜백을-표현하라\"><a href=\"#%EB%8D%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-%EC%BD%9C%EB%B0%B1%EC%9D%84-%ED%91%9C%ED%98%84%ED%95%98%EB%9D%BC\" aria-label=\"델리게이트를 이용하여 콜백을 표현하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>델리게이트를 이용하여 콜백을 표현하라</h3>\n<ul>\n<li>인터페이스가 아닌 델리게이트를 통해 콜백을 표현하면 클래스간의 결합도를 낮춰준다.</li>\n<li>\n<p>다만 델리게이트는 한번만 호출해도 델리게이트에 추가된 모든 대상함수가 호출되므로</p>\n<ul>\n<li>반환값이 멀티캐스트 체인의 마지막으로 호출된 함수 반환값이 되며, 이전 함수의 반환값은 무시된다는 무시된다는 문제가 있다.</li>\n<li>\n<p>때문에 아래와 같은 루프연산을 통해 반환값을 전체 받을 수 있도록 해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">LengthyOperation</span><span class=\"token punctuation\">(</span>Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> pred<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">bool</span> bContinue <span class=\"token operator\">=</span>ture<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComplicatedClass</span> cl <span class=\"token keyword\">in</span> container<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        cl<span class=\"token punctuation\">.</span><span class=\"token function\">DoLengthyOperation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span>Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> pr <span class=\"token keyword\">in</span> pred<span class=\"token punctuation\">.</span><span class=\"token function\">GetInvocationList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            bContinue <span class=\"token operator\">&amp;=</span> <span class=\"token function\">pr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bContinue<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"이벤트-호출시에는-null-연산자를-사용하라\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%98%B8%EC%B6%9C%EC%8B%9C%EC%97%90%EB%8A%94-null-%EC%97%B0%EC%82%B0%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"이벤트 호출시에는 null 연산자를 사용하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이벤트 호출시에는 null 연산자를 사용하라</h3>\n<ul>\n<li>다른 스레드로 전환이 된 다음 이벤트 해제가 일어나는 경우가 있을 수 있으므로, 다른 변수에 이벤트 객체를 할당하여 주소복사를 해놓거나 ? 연산자를 통해 nullcheck을 하는 것이 좋다.</li>\n</ul>\n<h3 id=\"박싱과-언박싱을-최소화-하라\"><a href=\"#%EB%B0%95%EC%8B%B1%EA%B3%BC-%EC%96%B8%EB%B0%95%EC%8B%B1%EC%9D%84-%EC%B5%9C%EC%86%8C%ED%99%94-%ED%95%98%EB%9D%BC\" aria-label=\"박싱과 언박싱을 최소화 하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>박싱과 언박싱을 최소화 하라</h3>\n<h3 id=\"베이스-클래스가-업그레이드-된-경우에만-new-한정자를-사용하라\"><a href=\"#%EB%B2%A0%EC%9D%B4%EC%8A%A4-%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%97%85%EA%B7%B8%EB%A0%88%EC%9D%B4%EB%93%9C-%EB%90%9C-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%A7%8C-new-%ED%95%9C%EC%A0%95%EC%9E%90%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\" aria-label=\"베이스 클래스가 업그레이드 된 경우에만 new 한정자를 사용하라 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>베이스 클래스가 업그레이드 된 경우에만 new 한정자를 사용하라</h3>\n<ul>\n<li>상속받은 메서드에 new 한정자를 사용하면 그 기능에 있어서 개발자에게 혼란을 줄 수 있으므로 다른 이름을 사용해야한다.</li>\n</ul>","timeToRead":4,"excerpt":"지역변수를 선언할때는 var를 사용하는 것이 낫다 c#은 익명함수를 지원하면서 타입을 암시적으로 선언하는 방법을 제공한다. 정확한 타입을 알지 못하는 상태에서 명시적으로 선언할경우 득보다 실이 많다 예1 잘못된 형변환: IEnumerable…","frontmatter":{"title":"effective c# - 1. 언어요소","cover":"","date":"2018-12-18T16:41:00.000Z","categories":["C#"],"tags":["effectivec#","c#","is","as","delegate","var"]},"fields":{"slug":"/effective-c-1-언어요소","date":"December 17, 2018"}}},"pageContext":{"slug":"/effective-c-1-언어요소","nexttitle":"c# 기본서 - c# 7.1: Tuple, ValueTuple, async, is","nextslug":"/c-기본서-c-7-1-tuple-value-tuple-async-is","prevtitle":"effective c# - 2. 리소스 관리","prevslug":"/effective-c-2-리소스-관리"}}}