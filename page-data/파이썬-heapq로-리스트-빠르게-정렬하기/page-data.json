{"componentChunkName":"component---src-templates-post-js","path":"/파이썬-heapq로-리스트-빠르게-정렬하기","result":{"data":{"markdownRemark":{"html":"<h3 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h3>\n<ol>\n<li>어떤 리스트(somearr)에서 가장 작은 원소 두개를 꺼내서</li>\n<li>연산(원소1+원소2*2)한 다음</li>\n<li>연산결과를 리스트(somearr)에 다시 넣는다. </li>\n<li>리스트의 모든 원소가 일정 기준(point) 이상이 될 때 까지 이 동작을 반복한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">somearr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span>\npoint <span class=\"token operator\">=</span> <span class=\"token number\">7</span></code></pre></div>\n<h3 id=\"listsort\"><a href=\"#listsort\" aria-label=\"listsort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>list.sort()</h3>\n<p>이 동작을 일반 리스트를 통해 구현하면 어떨까? 코드자체는 단순하다. 그러나 가장 작은 원소를 찾기위해 정렬을 해야하며, 모든 원소를 확인하며 정렬하는 sort()로는 리스트가 길어질수록 여기에 비례한만큼 긴 시간이 소요된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">somearr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> somearr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sorsomearr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    sorsomearr<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sorsomearr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>sorsomearr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    somearr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"dequepopleft-dequeappendleft\"><a href=\"#dequepopleft-dequeappendleft\" aria-label=\"dequepopleft dequeappendleft permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>deque.popleft(), deque.appendleft()</h3>\n<p>그렇다면 pop과 append연산을 deque모듈을 임포트해서 구현하는 것은 어떨까? </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\ndeque_arr <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">while</span> deque_arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> point<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>deque_arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    deque_arr<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span>deque_arr<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>deque_arr<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>deque_arr<span class=\"token punctuation\">)</span></code></pre></div>\n<p>왼쪽에 연산 결과를 추가한다고해서 더 빠르게 정렬이 일어난다는 보장도 없거니와, 연산 결과값으로 추가되는 왼쪽 원소가 반드시 최소가 된다는 보장은 없으므로, 결국엔 리스트 정렬을 해야한다. 특별히 효과를 보지 못한다.</p>\n<h3 id=\"heapqheappop-heapqheappush\"><a href=\"#heapqheappop-heapqheappush\" aria-label=\"heapqheappop heapqheappush permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>heapq.heappop(), heapq.heappush()</h3>\n<p>이 때 활용하면 좋은 모듈이 heapq다. heapq는 이진트리의 자료구조를 구현해낸 모듈로, 일반 리스트 데이터를 파라미터로 받아 이진트리 알고리즘으로 정렬한 다음 원소를 꺼내거나 삭제한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\nheapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 리스트 오브젝트를 정렬한다</span>\nanswer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> somearr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> K<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">,</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>somearr<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>heappush, heappop 모두 자료 삭제/추가와 동시에 정렬이 이어나는 자료구조로, 별도의 sort가 필요없다.</p>","timeToRead":1,"excerpt":"문제 어떤 리스트(somearr)에서 가장 작은 원소 두개를 꺼내서 연산(원소1+원소2*2)한 다음 연산결과를 리스트(somearr)에 다시 넣는다.  리스트의 모든 원소가 일정 기준(point) 이상이 될 때 까지 이 동작을 반복한다. list…","frontmatter":{"title":"파이썬 heapq로 리스트 빠르게 정렬하기","cover":"","date":"2019-07-31T21:45:45.000Z","categories":["Phython"],"tags":["python","heapq","sort"]},"fields":{"slug":"/파이썬-heapq로-리스트-빠르게-정렬하기","date":"July 30, 2019"}}},"pageContext":{"slug":"/파이썬-heapq로-리스트-빠르게-정렬하기","nexttitle":"파이썬 sort()함수 key 파라미터 제대로 사용하기","nextslug":"/파이썬-sort-함수-key-파라미터-제대로-사용하기","prevtitle":"JavaScript - 정규식으로 문자열 replace하기","prevslug":"/java-script-정규식으로-문자열-replace하기"}}}