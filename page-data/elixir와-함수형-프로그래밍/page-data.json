{"componentChunkName":"component---src-templates-post-js","path":"/elixir와-함수형-프로그래밍","result":{"data":{"markdownRemark":{"html":"<h1 id=\"oop-has-methods-fp-has-functions\"><a href=\"#oop-has-methods-fp-has-functions\" aria-label=\"oop has methods fp has functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOP has methods, FP has functions</h1>\n<p>객체 지향적인 프로그래밍은 클래스 인스턴스 메소드를 사용하여 상태변경을 하게되는데, 몇가지 단점이 있다.</p>\n<ol>\n<li>상태와 메소드간의 강한결합(coupling)이 발생한다. 실제로는 객체지향적인 메소드 사용보다 서브클래싱을 하여 메소드를 공유하는 경우가 더 많다.</li>\n<li>역할에 대한 혼란을 불러일으킨다. 메소드의 다른 역할이 필요해질 때 클래스 확장이나 서브클래싱을 사용하는데, 이 또한 강항 결합을 야기한다.</li>\n<li>동시성 환경에서 오브젝트의 상태값을 예기치 못하게 변경할 수 있다.</li>\n</ol>\n<h1 id=\"functions-and-state\"><a href=\"#functions-and-state\" aria-label=\"functions and state permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Functions and State</h1>\n<p>함수형 프로그래밍은 본래의 상태값을 절대 변경하지 않는다. 함수형 프로그래밍에서 상태는 변경되지 않으며, 그저 새로운 상태를 만들 뿐이다. 때문에 함수는 pure하다. 즉, 쉽게 조합되거나 재사용될 수 있다.</p>\n<p>엘릭서의 주된 도구는 함수의 조합(파이프 오퍼레이터의 사용 등의...)이나 패턴매칭(다른 파라미터를 갖는 같은 이름의 여러의 함수를 작성하는 것)이다. 파이프 오퍼레이터와 패턴매칭을 통해 자연스럽게 연산을 조합((composing)하기 때문에, 조건문을 사용하지 않는 방향에서 코드작성이 가능하다. 조건문은 많이 쓰게되면 코드작성이 어렵고 가독성이 떨어진다는 단점이 있는데, 함수형 프로그래밍은 이를 지양하므로써 좋은 설계가 가능하다.\n예켠데, 아래와 같이 조건문을 사용하지 않고도 함수 파라미터가 같은 두개의 값을 인자로 취했는지 아닌지 판단할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@doc “&quot;&quot;\na function that takes two parameters.\nIt should return `true` if the parameters are the same, `false` others.\nYou aren&#39;t allowed to use any conditional logic, so you&#39;ll have to rely on pattern matching.\n“&quot;&quot;\n\ndef equal(a, a), do: true\ndef equal(_, _), do: false</code></pre></div>","timeToRead":1,"excerpt":"OOP has methods, FP has functions 객체 지향적인 프로그래밍은 클래스 인스턴스 메소드를 사용하여 상태변경을 하게되는데, 몇가지 단점이 있다. 상태와 메소드간의 강한결합(coupling…","frontmatter":{"title":"Elixir와 함수형 프로그래밍","cover":"","date":"2020-02-03T23:37:20.000Z","categories":["Elixir"],"tags":["elixir","functional"]},"fields":{"slug":"/elixir와-함수형-프로그래밍","date":"February 02, 2020"}}},"pageContext":{"slug":"/elixir와-함수형-프로그래밍","nexttitle":"Mac OS에서 asdf을 통한 언어 버전관리 + elixir 설치하기","nextslug":"/mac-os에서-asdf을-통한-언어-버전관리-elixir-설치하기","prevtitle":"피닉스의 채널","prevslug":"/피닉스의-채널"}}}