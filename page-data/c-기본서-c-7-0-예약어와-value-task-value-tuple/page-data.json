{"componentChunkName":"component---src-templates-post-js","path":"/c-기본서-c-7-0-예약어와-value-task-value-tuple","result":{"data":{"markdownRemark":{"html":"<h3 id=\"70-주요변화\"><a href=\"#70-%EC%A3%BC%EC%9A%94%EB%B3%80%ED%99%94\" aria-label=\"70 주요변화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.0 주요변화</h3>\n<ul>\n<li>c# 7.0출시시 닷넷 버전은 4.6.2였다, 현재 7.0에 대응되는 프레임워크는 4.7이다.</li>\n<li>\n<p><code class=\"language-text\">ValueTuple</code> 타입이 추가되었다.</p>\n<ul>\n<li>그러나 4.6.2 닷넷 프레임워크에는 없으므로 nuget패키지를 통해 <code class=\"language-text\">System.ValueTuple</code>을 직접 설치해야한다</li>\n</ul>\n</li>\n<li><code class=\"language-text\">System.Threading.Tasks.ValueTask</code>가 추가되었는데, 마찬가지로 지원하지 않으므로 <code class=\"language-text\">System.Threading.Tasks.Extensions.dll</code>을 참조추가해야한다.</li>\n</ul>\n<h3 id=\"out-매개변수-쉽게-사용하기\"><a href=\"#out-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98-%EC%89%BD%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"out 매개변수 쉽게 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>out 매개변수 쉽게 사용하기</h3>\n<ul>\n<li>\n<p>기본에는 out매개변수 사용을 위해서는 따로 선언을 해줬어야했지만, 이제는 타입을 함께 입력해주면 선언이 필요없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">int.TryParse(&quot;5&quot;, out int result);\nint.TryParse(&quot;6&quot;, out int result); //컴파일시 6.0코드로 변환 하기때문에 같은 변수명으로 입력하면 컴파일 에러발생!</code></pre></div>\n</li>\n</ul>\n<h3 id=\"반환값로컬변수에-ref-사용\"><a href=\"#%EB%B0%98%ED%99%98%EA%B0%92%EB%A1%9C%EC%BB%AC%EB%B3%80%EC%88%98%EC%97%90-ref-%EC%82%AC%EC%9A%A9\" aria-label=\"반환값로컬변수에 ref 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반환값/로컬변수에 ref 사용</h3>\n<ul>\n<li>메서드를 통해 배열의 특정 요소만 반환하는 등의 사용이 가능하다</li>\n<li>\n<p>가독성 문제가 있지만 메서드의 값 설정과 할당이 동시에 가능해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">class MyMetrix\n{\n    int[,] _matrix = new int[100, 100]\n    public ref int Put(int c, int r)\n    {\n        return ref _matrix[c, r];\n    }\n}\n{\n    MyMetrix m = new MyMetrix();\n    int result = Matrix.Put(1, 1) = 1;\n    Console.WriteLine(result) //1\n}</code></pre></div>\n</li>\n<li>주의할 점은 메서드 내부에서 선언한 지역변수와 같은 경우 실행 후 호출측으로 넘어갈 때 스택이 해제되어 return ref으로 반환된 인스턴스가 남아있을거라는 보장이 없다.</li>\n<li>또한, ref 예약어를 지정한 지역변수는 다시 다른 변수를 가리키도록 변경할 수 없다.</li>\n</ul>\n<h3 id=\"valuetuple-도입-이유-dynamic-systemtuple의-한계\"><a href=\"#valuetuple-%EB%8F%84%EC%9E%85-%EC%9D%B4%EC%9C%A0-dynamic-systemtuple%EC%9D%98-%ED%95%9C%EA%B3%84\" aria-label=\"valuetuple 도입 이유 dynamic systemtuple의 한계 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ValueTuple 도입 이유: dynamic, System.Tuple의 한계</h3>\n<ul>\n<li>\n<p>튜플은 기본적으로 여러개의 요소를 반환해야하지만 일일히 클래스를 만들기가 번거로울 때 사용된다.</p>\n<ul>\n<li>\n<p>물론 아래와같이 c# 3.0의 익명 타입과 4.0의  dynamic 예약어를 이용할수도 있지만, 런타임시 리스크가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\ndynamic result = ParseInteger(&quot;20&quot;); //dynamic\nConsole.WriteLine(result.Parsed);\nConsole.WriteLine(result.Number);\n//정적 형식검사가 안돼 나중이 필드 이름이 바뀌어도 컴파일시 문제를 알아낼 수 없는 문제가 있다.\n}\ndynamic ParseInteger(string text)\n{\nint number = 0;\ntry\n{\n    number = Int32.Parse(text);\n    return new { Number = number, Parsed = true }; //익명 타입\n}\ncatch\n{\n    return new { Number = number, Parsed = false };\n}\n}</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>System.Tuple을 이용해 문제를 해결할수도 있지만</p>\n<ul>\n<li>변수 이름이 무조건 Item1, 2.. 와같이 정해지며</li>\n<li>\n<p>파이썬과같은 언어랑 비교했을 때 상대적으로 복잡하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\nTuple&lt;bool, int&gt; result = pg.ParseInteger(&quot;40&quot;);\n}\nTuple&lt;bool, int&gt; ParseInteger(string text)\n{\nint number = 0;\nbool result = false;\ntry\n{\n    number = Int32.Parse(text);\n    result = true\n}\ncatch { }\nreturn Tuple.create(result, number);\n}</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"valuetuple의-도입\"><a href=\"#valuetuple%EC%9D%98-%EB%8F%84%EC%9E%85\" aria-label=\"valuetuple의 도입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ValueTuple의 도입</h3>\n<ol>\n<li>Return 타입에 직접 이름을 지정하거나, 호출하는 측에서 강제로 이름을 지정할수도 있다.</li>\n<li>item1, item2 .. 과같은 방식의 호출도 가능하다.</li>\n<li>out 매개변수 처리에서 지원했던 생략기호도 반환값 분해 구문에 사용할 수 있다.</li>\n<li>\n<p>모든 튜플은 제너릭 타입으로 변경해서 처리한다</p>\n<ul>\n<li>닷넷 4에서 제공하는 System.Tuple은 class 타입으로 정의된 반면</li>\n<li>4.7의 ValueTuple은 struct로 정의되어있다는 차이가 있다.</li>\n</ul>\n</li>\n<li>\n<p>Deconstruct라는 특별한 이름을 지정한 메서드를 정의해서 out 파라미터를 받아 직접 튜플을 구현할수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">{\n    var result = pg.ParseInteger(&quot;40&quot;);\n    Console.WriteLine(result.Parsed);\n    Console.WriteLine(result.Number);\n\n    (bool success, int n) caller = pg.ParseInteger(&quot;40&quot;);\n    Console.WriteLine(caller.success);\n    Console.WriteLine(caller.n);\n\n    (bool ret, int num) = pg.ParseInteger(&quot;40&quot;);\n    Console.WriteLine(ret);\n    Console.WriteLine(num);\n\n    (var _, var _) = pg.ParseInteger(&quot;40&quot;); //2개값 모두 생략\n    (var _, var n) = pg.ParseInteger(&quot;40&quot;); //마지막 값만 n으로 받음\n}\n(bool Parsed, int Number) ParseInteger(string text) //Return 타입에 이름 지정\n{\n    //생략\n    return (result, number)\n}</code></pre></div>\n</li>\n</ol>\n<h3 id=\"lambda-메서드-정의-확대\"><a href=\"#lambda-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%A0%95%EC%9D%98-%ED%99%95%EB%8C%80\" aria-label=\"lambda 메서드 정의 확대 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lambda 메서드 정의 확대</h3>\n<ul>\n<li>\n<p>아래의 메서드에대한 lambda 정의가 7.0부터 가능해졌다.</p>\n<ul>\n<li>생성자/소멸자</li>\n<li>이벤트 클래스의 add/remove</li>\n<li>속성/인덱서의 set</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"지역함수\"><a href=\"#%EC%A7%80%EC%97%AD%ED%95%A8%EC%88%98\" aria-label=\"지역함수 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지역함수</h3>\n<ul>\n<li>메서드 내에서만 활용할 수 있는 지역함수 문법이 추가되었다.</li>\n<li>익명함수 표기도 가능하며, 단일식이면 람다로도 표현가능하다.</li>\n<li>표기는 자유롭지만, c# 컴파일러는 internal 접근자를 가진 메서드로 정의해 타입 내에 자동으로 추가한다.</li>\n</ul>\n<h3 id=\"valuetaskt-async메서드-반환타입으로-사용자-정의-task타입을-반환할-수-있게됨\"><a href=\"#valuetaskt-async%EB%A9%94%EC%84%9C%EB%93%9C-%EB%B0%98%ED%99%98%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-task%ED%83%80%EC%9E%85%EC%9D%84-%EB%B0%98%ED%99%98%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B2%8C%EB%90%A8\" aria-label=\"valuetaskt async메서드 반환타입으로 사용자 정의 task타입을 반환할 수 있게됨 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ValueTask<T>: async메서드 반환타입으로 사용자 정의 Task타입을 반환할 수 있게됨</h3>\n<ul>\n<li>async 예약어가 붙는 메서드는 반환타입이 void, Task, Task<T> 중에 하나여야한다</li>\n<li>문제는 메서드 내에서 await호출이 되지 않아 비동기 처리가 필요 없을때도 Task 객체가 생성되어 성능상 불이익이 발생한다.</li>\n<li>\n<p>여기서 반환 타입을 ValueTask<T>형식으로 바꿔주면 비동기 처리를 하지 않을 경우에는 Task 객체 생성이 일어나지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">static string _filecontents = string.Empty;\nprivate static async Task&lt;(string, int)&gt; FileReadAsync(string filePath)\n{\n    if (string.IsNullOrEmpty(_filecontents) == false)\n            return (_filecontents, Thread.CurrentThread.ManagedThreadId);\n    \n    _filecontents = await ReadAllTextAsync(filePath);\n    return (_filecontents, Thread.CurrentThread.ManagedThreadId);\n}</code></pre></div>\n</li>\n</ul>\n<h3 id=\"자유로운-throw-사용\"><a href=\"#%EC%9E%90%EC%9C%A0%EB%A1%9C%EC%9A%B4-throw-%EC%82%AC%EC%9A%A9\" aria-label=\"자유로운 throw 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자유로운 throw 사용</h3>\n<ul>\n<li>throw는 식(expression)이 아닌 문(statement)에 해당한다.</li>\n<li>즉 '항'의 개념이 아니므로 삼항연산자에 사용되려면 메서드를 별개로 만들어 우회해서 사용해야 했었다.</li>\n<li>\n<p>7.0부터는 직접 사용이 가능하며,</p>\n<ul>\n<li>그렇다해서 모든 구문이 사용한것은 아니고 사용이 안되는 맥락에서는 컴파일 에러를 발생시킨다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"리터럴의-가독성-상승을-위한-표현방식-개선\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4%EC%9D%98-%EA%B0%80%EB%8F%85%EC%84%B1-%EC%83%81%EC%8A%B9%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%91%9C%ED%98%84%EB%B0%A9%EC%8B%9D-%EA%B0%9C%EC%84%A0\" aria-label=\"리터럴의 가독성 상승을 위한 표현방식 개선 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴의 가독성 상승을 위한 표현방식 개선</h3>\n<ul>\n<li>\n<p>7.0부터 숫자 내의 임의의 위치에 밑줄을 추가할 수 있다.</p>\n<ul>\n<li>10,000,000 와 같은 표현을 위해 int number = 10<em>000</em>000 형식으로 표기 가능하다.</li>\n</ul>\n</li>\n<li>숫자뿐만이 아니라 16진수 표현도 가능하다.</li>\n</ul>\n<h3 id=\"패턴-매칭상수-null-참조타입-값타입-var-등-is-연산\"><a href=\"#%ED%8C%A8%ED%84%B4-%EB%A7%A4%EC%B9%AD%EC%83%81%EC%88%98-null-%EC%B0%B8%EC%A1%B0%ED%83%80%EC%9E%85-%EA%B0%92%ED%83%80%EC%9E%85-var-%EB%93%B1-is-%EC%97%B0%EC%82%B0\" aria-label=\"패턴 매칭상수 null 참조타입 값타입 var 등 is 연산 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 매칭(상수, null, 참조타입, 값타입, var 등...): is 연산</h3>\n<ul>\n<li>is는 as와 기본적으로 동일한 기능을 수행한다.</li>\n<li>차이점은 as는 변수에 캐스팅 결과가 담기지만,</li>\n<li>\n<p>is는 구문자체로는 True/False를 반환하고, 비교 타입 뒤에 변수명을 입력하면 해당 변수에 캐스팅된 값이 할당된다는 차이점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">object obj = new List&lt;string&gt;();\nif(obj is List&lt;string&gt; list)\n    list.ForEach(e =&gt; Console.WriteLine(e));\n\nobject[] object = new object[] { 100, null, DateTime.Now, new ArrayList() };\nforeach(object item in objList)\n{\n    if (item is 100) {\n        //item 사용\n    } else if (item is null) { \n        //item 사용\n    } else if (item is DateTime dt) {\n        //dt 사용\n    }\n}</code></pre></div>\n</li>\n<li>\n<p>var도 가능하지만 사실상 의미가 없다.</p>\n<ul>\n<li>단 var 타입뒤에 변수명 반드시 써줘야하며, 이것도 의미가 없으면 언더바(_)로 입력하면된다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"패턴-매칭-switchcase-연산\"><a href=\"#%ED%8C%A8%ED%84%B4-%EB%A7%A4%EC%B9%AD-switchcase-%EC%97%B0%EC%82%B0\" aria-label=\"패턴 매칭 switchcase 연산 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>패턴 매칭: switch/case 연산</h3>\n<ul>\n<li>case 예약어 다음에 \"[타입] [변수명]\"을 넣으면 is 예약어처럼 사용 가능하다</li>\n<li>case 구문 뒤에 when 예약어를 추가하면 조건을 한번 더 검사할 수 있다. 예외필터의 when과 사용법이 동일하다.</li>\n<li>\n<p>튜플타입과 같은 복잡한 인자를 받을 때 var와 when 구문을 사용하면 훨씬 간결하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">Action&lt;(int, int)&gt; detectZeroOr = (arg) =&gt;\n{\n    switch (arg)\n    {\n        case var r when r.Equals(0, 0):\n        case var r1 when r1.Item == 0:\n        case var r2 when r2.Item == 0:\n            return;\n    }\n    Console.WriteLine(&quot;both nonzero&quot;)\n}</code></pre></div>\n</li>\n</ul>","timeToRead":7,"excerpt":"7.0 주요변화 c# 7.0출시시 닷넷 버전은 4.6.2였다, 현재 7.0에 대응되는 프레임워크는 4.7이다.  타입이 추가되었다. 그러나 4.6.2 닷넷 프레임워크에는 없으므로 nuget…","frontmatter":{"title":"c# 기본서 - c# 7.0: 예약어와 ValueTask/ValueTuple","cover":"","date":"2018-12-07T12:06:00.000Z","categories":["C#"],"tags":["c#","c#7.0","tuple","out","ref","lambda","ValueTask","is","when","switch/case"]},"fields":{"slug":"/c-기본서-c-7-0-예약어와-value-task-value-tuple","date":"December 06, 2018"}}},"pageContext":{"slug":"/c-기본서-c-7-0-예약어와-value-task-value-tuple","nexttitle":"c# 기본서 - c# 3.0: LINQ","nextslug":"/c-기본서-c-3-0-linq","prevtitle":"c# 기본서 - c# 4.0: dynamic","prevslug":"/c-기본서-c-4-0-dynamic"}}}